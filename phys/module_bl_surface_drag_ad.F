
MODULE a_module_bl_surface_drag

CONTAINS

!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.5 (r3678) - 11 Feb 2011 13:58
!
!  Differentiation of surface_drag in reverse (adjoint) mode:
!   gradient     of useful results: rublten rvblten
!   with respect to varying inputs: v_phy rublten z rvblten u_phy
!   RW status of diff variables: v_phy:out rublten:in-out z:out
!                rvblten:in-out u_phy:out
SUBROUTINE A_SURFACE_DRAG(rublten, a_rublten, rvblten, a_rvblten, u_phy, &
   a_u_phy, v_phy, a_v_phy, xland, z, a_z, ht, ids, ide, jds, jde, kds, kde&
   , ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte)
  IMPLICIT NONE
  INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
   jme, kms, kme, its, ite, jts, jte, kts, kte
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(INOUT) :: rublten, rvblten
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_rublten, a_rvblten
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: u_phy, v_phy, z
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_u_phy, a_v_phy, a_z
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: xland, ht
! Local
  REAL :: v0, tao_xz, tao_yz, cd, zh, zwt
  REAL :: v0b, tao_xzb, tao_yzb, cdb, zhb, zwtb
  INTEGER :: i, j, i_start, i_end, i_endu, j_start, j_end, j_endv, k
  INTEGER :: branch
  REAL :: tempb2
  REAL :: tempb1
  REAL :: tempb0
  INTRINSIC MAX
  INTRINSIC ABS
  REAL :: tempb
  REAL :: abs2
  REAL :: abs1
  INTRINSIC MIN
  INTRINSIC SQRT
! End declarations.
!-----------------------------------------------------------------------
  i_start = its
  IF (ite .GT. ide - 1) THEN
    i_end = ide - 1
  ELSE
    i_end = ite
  END IF
  i_endu = ite
  j_start = jts
  IF (jte .GT. jde - 1) THEN
    j_end = jde - 1
  ELSE
    j_end = jte
  END IF
  j_endv = jte

  DO j=j_start,j_end
    DO i=i_start,i_endu
      CALL PUSHREAL8(v0)
      v0 = SQRT(u_phy(i, kts, j)**2 + v_phy(i, kts, j)**2)
      IF (xland(i, j) - xland(i-1, j) .GE. 0.) THEN
        abs1 = xland(i, j) - xland(i-1, j)
      ELSE
        abs1 = -(xland(i, j)-xland(i-1, j))
      END IF
      IF (abs1 .LT. 1.0e-10) THEN
        IF (xland(i, j) .LT. 1.5) THEN
          CALL PUSHREAL8(cd)
! land
          cd = 0.01
          CALL PUSHCONTROL2B(0)
        ELSE
          CALL PUSHREAL8(cd)
! water
          cd = 0.001
          IF (cd .LT. 1.e-4*v0) THEN
            cd = 1.e-4*v0
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
            cd = cd
          END IF
          IF (cd .GT. 0.003) THEN
            cd = 0.003
            CALL PUSHCONTROL2B(3)
          ELSE
            CALL PUSHCONTROL2B(2)
            cd = cd
          END IF
        END IF
      ELSE
        CALL PUSHREAL8(cd)
! coast
        cd = 0.003
        CALL PUSHCONTROL2B(1)
      END IF
      CALL PUSHREAL8(tao_xz)
      tao_xz = cd*v0*u_phy(i, kts, j)
      DO k=kts,kte
        zh = z(i, k, j) - ht(i, j)
        IF (zh .LT. 1000.) THEN
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
      END DO
    END DO
  END DO
!
  DO j=j_start,j_endv
    DO i=i_start,i_end
      CALL PUSHREAL8(v0)
      v0 = SQRT(u_phy(i, kts, j)**2 + v_phy(i, kts, j)**2)
      IF (xland(i, j) - xland(i, j-1) .GE. 0.) THEN
        abs2 = xland(i, j) - xland(i, j-1)
      ELSE
        abs2 = -(xland(i, j)-xland(i, j-1))
      END IF
      IF (abs2 .LT. 1.0e-10) THEN
        IF (xland(i, j) .LT. 1.5) THEN
          CALL PUSHREAL8(cd)
! land
          cd = 0.01
          CALL PUSHCONTROL2B(0)
        ELSE
          CALL PUSHREAL8(cd)
! water
          cd = 0.001
          IF (cd .LT. 1.e-4*v0) THEN
            cd = 1.e-4*v0
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
            cd = cd
          END IF
          IF (cd .GT. 0.003) THEN
            cd = 0.003
            CALL PUSHCONTROL2B(3)
          ELSE
            CALL PUSHCONTROL2B(2)
            cd = cd
          END IF
        END IF
      ELSE
        CALL PUSHREAL8(cd)
! coast
        cd = 0.003
        CALL PUSHCONTROL2B(1)
      END IF
      CALL PUSHREAL8(tao_yz)
      tao_yz = cd*v0*v_phy(i, kts, j)
      DO k=kts,kte
        zh = z(i, k, j) - ht(i, j)
        IF (zh .LT. 1000.) THEN
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
      END DO
    END DO
  END DO
  DO j=j_endv,j_start,-1
    DO i=i_end,i_start,-1
      tao_yzb = 0.0
      DO k=kte,kts,-1
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          zhb = 0.0
        ELSE
          zh = z(i, k, j) - ht(i, j)
          zwt = 2.*(1000.-zh)/1000.
          zwtb = -(tao_yz*0.5*a_rvblten(i, k, j)/1000.)
          tao_yzb = tao_yzb - 0.5*zwt*a_rvblten(i, k, j)/1000.
          zhb = -(2.*zwtb/1000.)
        END IF
        a_z(i, k, j) = a_z(i, k, j) + zhb
      END DO
      CALL POPREAL8(tao_yz)
      tempb2 = v_phy(i, kts, j)*tao_yzb
      cdb = v0*tempb2
      v0b = cd*tempb2
      a_v_phy(i, kts, j) = a_v_phy(i, kts, j) + cd*v0*tao_yzb
      CALL POPCONTROL2B(branch)
      IF (branch .LT. 2) THEN
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(cd)
        ELSE
          CALL POPREAL8(cd)
        END IF
      ELSE
        IF (branch .NE. 2) cdb = 0.0
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) v0b = v0b + 1.e-4*cdb
        CALL POPREAL8(cd)
      END IF
      CALL POPREAL8(v0)
      IF (u_phy(i, kts, j)**2 + v_phy(i, kts, j)**2 .EQ. 0.0) THEN
        tempb1 = 0.0
      ELSE
        tempb1 = v0b/(2.0*SQRT(u_phy(i, kts, j)**2+v_phy(i, kts, j)**2))
      END IF
      a_u_phy(i, kts, j) = a_u_phy(i, kts, j) + 2*u_phy(i, kts, j)*tempb1
      a_v_phy(i, kts, j) = a_v_phy(i, kts, j) + 2*v_phy(i, kts, j)*tempb1
    END DO
  END DO
  DO j=j_end,j_start,-1
    DO i=i_endu,i_start,-1
      tao_xzb = 0.0
      DO k=kte,kts,-1
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          zhb = 0.0
        ELSE
          zh = z(i, k, j) - ht(i, j)
          zwt = 2.*(1000.-zh)/1000.
          zwtb = -(tao_xz*0.5*a_rublten(i, k, j)/1000.)
          tao_xzb = tao_xzb - 0.5*zwt*a_rublten(i, k, j)/1000.
          zhb = -(2.*zwtb/1000.)
        END IF
        a_z(i, k, j) = a_z(i, k, j) + zhb
      END DO
      CALL POPREAL8(tao_xz)
      tempb0 = u_phy(i, kts, j)*tao_xzb
      cdb = v0*tempb0
      v0b = cd*tempb0
      a_u_phy(i, kts, j) = a_u_phy(i, kts, j) + cd*v0*tao_xzb
      CALL POPCONTROL2B(branch)
      IF (branch .LT. 2) THEN
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(cd)
        ELSE
          CALL POPREAL8(cd)
        END IF
      ELSE
        IF (branch .NE. 2) cdb = 0.0
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) v0b = v0b + 1.e-4*cdb
        CALL POPREAL8(cd)
      END IF
      CALL POPREAL8(v0)
      IF (u_phy(i, kts, j)**2 + v_phy(i, kts, j)**2 .EQ. 0.0) THEN
        tempb = 0.0
      ELSE
        tempb = v0b/(2.0*SQRT(u_phy(i, kts, j)**2+v_phy(i, kts, j)**2))
      END IF
      a_u_phy(i, kts, j) = a_u_phy(i, kts, j) + 2*u_phy(i, kts, j)*tempb
      a_v_phy(i, kts, j) = a_v_phy(i, kts, j) + 2*v_phy(i, kts, j)*tempb
    END DO
  END DO

END SUBROUTINE A_SURFACE_DRAG

END MODULE a_module_bl_surface_drag

