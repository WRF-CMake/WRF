
! ======================================================================================
! This file was generated by the version 5.3.5 of DFT on 07/13/2010. The differentiation
! transforming system(DFT) was jointly developed and sponsored by LASG of IAP(1998-2010)
! and LSEC of ICMSEC, AMSS(2001-2003)
! The copyright of the DFT system was declared by Walls at LASG, 1998-2010
! ======================================================================================
#if (RWORDSIZE == 4)
#   define VPOWX vspowx
#   define VPOW  vspow
#else
#   define VPOWX vpowx
#   define VPOW  vpow
#endif

 MODULE g_module_big_step_utilities_em

 USE module_domain, ONLY : domain
 USE module_model_constants
 USE module_state_description
 USE module_configure, ONLY : grid_config_rec_type
 USE module_wrf_error

 CONTAINS

SUBROUTINE g_calc_mu_uv ( config_flags,                 &
                          mu, g_mu, mub, muu, g_muu, muv, g_muv,  &
                          ids, ide, jds, jde, kds, kde, &
                          ims, ime, jms, jme, kms, kme, &
                          its, ite, jts, jte, kts, kte )

   IMPLICIT NONE
   
   ! Input data

   TYPE(grid_config_rec_type   ) ,   INTENT(IN   ) :: config_flags

   INTEGER ,          INTENT(IN   ) :: ids, ide, jds, jde, kds, kde, &
                                       ims, ime, jms, jme, kms, kme, &
                                       its, ite, jts, jte, kts, kte 

   REAL, DIMENSION( ims:ime , jms:jme ) , INTENT(  OUT) :: muu, muv
   REAL, DIMENSION( ims:ime , jms:jme ) , INTENT(  OUT) :: g_muu, g_muv
   REAL, DIMENSION( ims:ime , jms:jme ) , INTENT(IN   ) :: mu, mub
   REAL, DIMENSION( ims:ime , jms:jme ) , INTENT(IN   ) :: g_mu

   !  local stuff

   INTEGER :: i, j, itf, jtf, im, jm

!<DESCRIPTION>
!
!  calc_mu_uv calculates the full column dry-air mass at the staggered
!  horizontal velocity points (u,v) and places the results in muu and muv.
!  This routine uses the reference state (mub) and perturbation state (mu)
!
!</DESCRIPTION>


      itf=ite
      jtf=MIN(jte,jde-1)

      IF      ( ( its .NE. ids ) .AND. ( ite .NE. ide ) ) THEN
         DO j=jts,jtf
         DO i=its,itf
            g_muu(i,j) = 0.5*(g_mu(i,j)+g_mu(i-1,j))
            muu(i,j) = 0.5*(mu(i,j)+mu(i-1,j)+mub(i,j)+mub(i-1,j))
         ENDDO
         ENDDO
      ELSE IF ( ( its .EQ. ids ) .AND. ( ite .NE. ide ) ) THEN
         DO j=jts,jtf
         DO i=its+1,itf
            g_muu(i,j) = 0.5*(g_mu(i,j)+g_mu(i-1,j))
            muu(i,j) = 0.5*(mu(i,j)+mu(i-1,j)+mub(i,j)+mub(i-1,j))
         ENDDO
         ENDDO
         i=its
         im = its
         if(config_flags%periodic_x) im = its-1
         DO j=jts,jtf
            g_muu(i,j) = 0.5*(g_mu(i,j)+g_mu(im,j))
            muu(i,j) = 0.5*(mu(i,j)+mu(im,j)+mub(i,j)+mub(im,j))
         ENDDO
      ELSE IF ( ( its .NE. ids ) .AND. ( ite .EQ. ide ) ) THEN
         DO j=jts,jtf
         DO i=its,itf-1
            g_muu(i,j) = 0.5*(g_mu(i,j)+g_mu(i-1,j))
            muu(i,j) = 0.5*(mu(i,j)+mu(i-1,j)+mub(i,j)+mub(i-1,j))
         ENDDO
         ENDDO
         i=ite
         im = ite-1
         if(config_flags%periodic_x) im = ite
         DO j=jts,jtf
            g_muu(i,j) = 0.5*(g_mu(i-1,j)+g_mu(im,j))
            muu(i,j) = 0.5*(mu(i-1,j)+mu(im,j)+mub(i-1,j)+mub(im,j))
         ENDDO
      ELSE IF ( ( its .EQ. ids ) .AND. ( ite .EQ. ide ) ) THEN
         DO j=jts,jtf
         DO i=its+1,itf-1
            g_muu(i,j) = 0.5*(g_mu(i,j)+g_mu(i-1,j))
            muu(i,j) = 0.5*(mu(i,j)+mu(i-1,j)+mub(i,j)+mub(i-1,j))
         ENDDO
         ENDDO
         i=its
         im = its
         if(config_flags%periodic_x) im = its-1
         DO j=jts,jtf
            g_muu(i,j) = 0.5*(g_mu(i,j)+g_mu(im,j))
            muu(i,j) = 0.5*(mu(i,j)+mu(im,j)+mub(i,j)+mub(im,j))
         ENDDO
         i=ite
         im = ite-1
         if(config_flags%periodic_x) im = ite
         DO j=jts,jtf
            g_muu(i,j) = 0.5*(g_mu(i-1,j)+g_mu(im,j))
            muu(i,j) = 0.5*(mu(i-1,j)+mu(im,j)+mub(i-1,j)+mub(im,j))
         ENDDO
      END IF

      itf=MIN(ite,ide-1)
      jtf=jte

      IF      ( ( jts .NE. jds ) .AND. ( jte .NE. jde ) ) THEN
         DO j=jts,jtf
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j)+g_mu(i,j-1))
             muv(i,j) = 0.5*(mu(i,j)+mu(i,j-1)+mub(i,j)+mub(i,j-1))
         ENDDO
         ENDDO
      ELSE IF ( ( jts .EQ. jds ) .AND. ( jte .NE. jde ) ) THEN
         DO j=jts+1,jtf
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j)+g_mu(i,j-1))
             muv(i,j) = 0.5*(mu(i,j)+mu(i,j-1)+mub(i,j)+mub(i,j-1))
         ENDDO
         ENDDO
         j=jts
         jm = jts
         if(config_flags%periodic_y) jm = jts-1
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j)+g_mu(i,jm))
             muv(i,j) = 0.5*(mu(i,j)+mu(i,jm)+mub(i,j)+mub(i,jm))
         ENDDO
      ELSE IF ( ( jts .NE. jds ) .AND. ( jte .EQ. jde ) ) THEN
         DO j=jts,jtf-1
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j)+g_mu(i,j-1))
             muv(i,j) = 0.5*(mu(i,j)+mu(i,j-1)+mub(i,j)+mub(i,j-1))
         ENDDO
         ENDDO
         j=jte
         jm = jte-1
         if(config_flags%periodic_y) jm = jte
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j-1)+g_mu(i,jm))
             muv(i,j) = 0.5*(mu(i,j-1)+mu(i,jm)+mub(i,j-1)+mub(i,jm))
         ENDDO
      ELSE IF ( ( jts .EQ. jds ) .AND. ( jte .EQ. jde ) ) THEN
         DO j=jts+1,jtf-1
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j)+g_mu(i,j-1))
             muv(i,j) = 0.5*(mu(i,j)+mu(i,j-1)+mub(i,j)+mub(i,j-1))
         ENDDO
         ENDDO
         j=jts
         jm = jts
         if(config_flags%periodic_y) jm = jts-1
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j)+g_mu(i,jm))
             muv(i,j) = 0.5*(mu(i,j)+mu(i,jm)+mub(i,j)+mub(i,jm))
         ENDDO
         j=jte
         jm = jte-1
         if(config_flags%periodic_y) jm = jte
         DO i=its,itf
             g_muv(i,j) = 0.5*(g_mu(i,j-1)+g_mu(i,jm))
             muv(i,j) = 0.5*(mu(i,j-1)+mu(i,jm)+mub(i,j-1)+mub(i,jm))
         ENDDO
      END IF

END SUBROUTINE g_calc_mu_uv

 SUBROUTINE g_calc_mu_uv_1(config_flags,mu,g_mu,muu,g_muu,muv,g_muv,ids, &
 ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,jms:jme) :: muu,g_muu,muv,g_muv
 REAL,DIMENSION(ims:ime,jms:jme) :: mu,g_mu

 INTEGER :: i,j,itf,jtf,im,jm

 itf =ite

 jtf =min(jte,jde-1)

 IF( ( its .NE. ids ) .AND. ( ite .NE. ide ) ) THEN

 DO j =jts,jtf
 DO i =its,itf

 g_muu(i,j) =0.5*(g_mu(i,j) +g_mu(i-1,j))
 muu(i,j) =0.5*(mu(i,j) +mu(i-1,j))

 ENDDO
 ENDDO
 ELSE IF( ( its .EQ. ids ) .AND. ( ite .NE. ide ) ) THEN

 DO j =jts,jtf
 DO i =its+1,itf

 g_muu(i,j) =0.5*(g_mu(i,j) +g_mu(i-1,j))
 muu(i,j) =0.5*(mu(i,j) +mu(i-1,j))

 ENDDO
 ENDDO

 i =its

 im =its

 if(config_flags%periodic_x) im =its-1

 DO j =jts,jtf

 g_muu(i,j) =0.5*(g_mu(i,j) +g_mu(im,j))
 muu(i,j) =0.5*(mu(i,j) +mu(im,j))

 ENDDO
 ELSE IF( ( its .NE. ids ) .AND. ( ite .EQ. ide ) ) THEN

 DO j =jts,jtf
 DO i =its,itf-1

 g_muu(i,j) =0.5*(g_mu(i,j) +g_mu(i-1,j))
 muu(i,j) =0.5*(mu(i,j) +mu(i-1,j))

 ENDDO
 ENDDO

 i =ite

 im =ite-1

 if(config_flags%periodic_x) im =ite

 DO j =jts,jtf

 g_muu(i,j) =0.5*(g_mu(i-1,j) +g_mu(im,j))
 muu(i,j) =0.5*(mu(i-1,j) +mu(im,j))

 ENDDO
 ELSE IF( ( its .EQ. ids ) .AND. ( ite .EQ. ide ) ) THEN

 DO j =jts,jtf
 DO i =its+1,itf-1

 g_muu(i,j) =0.5*(g_mu(i,j) +g_mu(i-1,j))
 muu(i,j) =0.5*(mu(i,j) +mu(i-1,j))

 ENDDO
 ENDDO

 i =its

 im =its

 if(config_flags%periodic_x) im =its-1

 DO j =jts,jtf

 g_muu(i,j) =0.5*(g_mu(i,j) +g_mu(im,j))
 muu(i,j) =0.5*(mu(i,j) +mu(im,j))

 ENDDO

 i =ite

 im =ite-1

 if(config_flags%periodic_x) im =ite

 DO j =jts,jtf

 g_muu(i,j) =0.5*(g_mu(i-1,j) +g_mu(im,j))
 muu(i,j) =0.5*(mu(i-1,j) +mu(im,j))

 ENDDO
 END IF

 itf =min(ite,ide-1)

 jtf =jte

 IF( ( jts .NE. jds ) .AND. ( jte .NE. jde ) ) THEN

 DO j =jts,jtf
 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j) +g_mu(i,j-1))
 muv(i,j) =0.5*(mu(i,j) +mu(i,j-1))

 ENDDO
 ENDDO
 ELSE IF( ( jts .EQ. jds ) .AND. ( jte .NE. jde ) ) THEN

 DO j =jts+1,jtf
 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j) +g_mu(i,j-1))
 muv(i,j) =0.5*(mu(i,j) +mu(i,j-1))

 ENDDO
 ENDDO

 j =jts

 jm =jts

 if(config_flags%periodic_y) jm =jts-1

 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j) +g_mu(i,jm))
 muv(i,j) =0.5*(mu(i,j) +mu(i,jm))

 ENDDO
 ELSE IF( ( jts .NE. jds ) .AND. ( jte .EQ. jde ) ) THEN

 DO j =jts,jtf-1
 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j) +g_mu(i,j-1))
 muv(i,j) =0.5*(mu(i,j) +mu(i,j-1))

 ENDDO
 ENDDO

 j =jte

 jm =jte-1

 if(config_flags%periodic_y) jm =jte

 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j-1) +g_mu(i,jm))
 muv(i,j) =0.5*(mu(i,j-1) +mu(i,jm))

 ENDDO
 ELSE IF( ( jts .EQ. jds ) .AND. ( jte .EQ. jde ) ) THEN

 DO j =jts+1,jtf-1
 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j) +g_mu(i,j-1))
 muv(i,j) =0.5*(mu(i,j) +mu(i,j-1))

 ENDDO
 ENDDO

 j =jts

 jm =jts

 if(config_flags%periodic_y) jm =jts-1

 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j) +g_mu(i,jm))
 muv(i,j) =0.5*(mu(i,j) +mu(i,jm))

 ENDDO

 j =jte

 jm =jte-1

 if(config_flags%periodic_y) jm =jte

 DO i =its,itf

 g_muv(i,j) =0.5*(g_mu(i,j-1) +g_mu(i,jm))
 muv(i,j) =0.5*(mu(i,j-1) +mu(i,jm))

 ENDDO
 END IF

 END SUBROUTINE g_calc_mu_uv_1

SUBROUTINE g_couple_momentum ( muu, g_muu, ru, g_ru, u, g_u, msfu,              &
                               muv, g_muv, rv, g_rv, v, g_v, msfv, msfv_inv,    &
                               mut, g_mut, rw, g_rw, w, g_w, msft,              &
                               ids, ide, jds, jde, kds, kde,  &
                               ims, ime, jms, jme, kms, kme,  &
                               its, ite, jts, jte, kts, kte  )

   IMPLICIT NONE

   ! Input data

   INTEGER ,             INTENT(IN   ) :: ids, ide, jds, jde, kds, kde, &
                                          ims, ime, jms, jme, kms, kme, &
                                          its, ite, jts, jte, kts, kte

   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(  OUT) :: g_ru, g_rv, g_rw
   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(  OUT) :: ru, rv, rw

   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(IN   ) :: g_muu, g_muv, g_mut
   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(IN   ) :: muu, muv, mut
   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(IN   ) :: msfu, msfv, msft, msfv_inv
   
   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(IN   ) :: g_u, g_v, g_w
   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(IN   ) :: u, v, w
   
   ! Local data
   
   INTEGER :: i, j, k, itf, jtf, ktf
   
!<DESCRIPTION>
!
! couple_momentum couples the velocities to the full column mass and
! the map factors.
!
!</DESCRIPTION>

   ktf=MIN(kte,kde-1)
   
      itf=ite
      jtf=MIN(jte,jde-1)

      DO j=jts,jtf
      DO k=kts,ktf
      DO i=its,itf
         g_ru(i,k,j)=g_u(i,k,j)*muu(i,j)/msfu(i,j) + u(i,k,j)*g_muu(i,j)/msfu(i,j) 
         ru(i,k,j)=u(i,k,j)*muu(i,j)/msfu(i,j)
      ENDDO
      ENDDO
      ENDDO

      itf=MIN(ite,ide-1)
      jtf=jte

      DO j=jts,jtf
      DO k=kts,ktf
      DO i=its,itf
           g_rv(i,k,j)=g_v(i,k,j)*muv(i,j)*msfv_inv(i,j) + v(i,k,j)*g_muv(i,j)*msfv_inv(i,j)
           rv(i,k,j)=v(i,k,j)*muv(i,j)*msfv_inv(i,j)
!           rv(i,k,j)=v(i,k,j)*muv(i,j)/msfv(i,j)
      ENDDO
      ENDDO
      ENDDO

      itf=MIN(ite,ide-1)
      jtf=MIN(jte,jde-1)

      DO j=jts,jtf
      DO k=kts,kte
      DO i=its,itf
         g_rw(i,k,j)=g_w(i,k,j)*mut(i,j)/msft(i,j) + w(i,k,j)*g_mut(i,j)/msft(i,j)
         rw(i,k,j)=w(i,k,j)*mut(i,j)/msft(i,j)
      ENDDO
      ENDDO
      ENDDO

END SUBROUTINE g_couple_momentum

 SUBROUTINE g_calc_ww_cp(u,g_u,v,g_v,mup,g_mup,mub,ww,g_ww,rdx,rdy, &
 msftx,msfty,msfux,msfuy,msfvx,msfvx_inv,msfvy,dnw,ids,ide,jds,jde,kds,kde,ims,ime, &
 jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6,Tmpv7,g_Tmpv7,Tmpv8,g_Tmpv8
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: u,g_u,v,g_v
 REAL,DIMENSION(ims:ime,jms:jme) :: mup,g_mup,mub,msftx,msfty,msfux,msfuy,msfvx, &
 msfvy,msfvx_inv
 REAL,DIMENSION(kms:kme) :: dnw
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ww,g_ww
 REAL :: rdx,rdy

 INTEGER :: i,j,k,itf,jtf,ktf
 REAL,DIMENSION(its:ite) :: dmdt,g_dmdt
 REAL,DIMENSION(its:ite,kts:kte) :: divv,g_divv
 REAL,DIMENSION(its:ite+1,jts:jte+1) :: muu,g_muu,muv,g_muv

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 itf =min(ite,ide-1)

 DO j =jts,jtf
 DO i =its,min(ite+1,ide)

 g_muu(i,j) =0.5*(g_mup(i,j) +g_mup(i-1,j))/msfuy(i,j)
 muu(i,j) =0.5*(mup(i,j) +mub(i,j) +mup(i-1,j) +mub(i-1,j))/msfuy(i,j)

 ENDDO
 ENDDO

 DO j =jts,min(jte+1,jde)
 DO i =its,itf

 g_muv(i,j) =0.5*(g_mup(i,j) +g_mup(i,j-1))*msfvx_inv(i,j)
 muv(i,j) =0.5*(mup(i,j) +mub(i,j) +mup(i,j-1) +mub(i,j-1))*msfvx_inv(i,j)

 ENDDO
 ENDDO

 DO j =jts,jtf
 DO i =its,ite

 g_dmdt(i) =0.0
 dmdt(i) =0.

 g_ww(i,1,j) =0.0
 ww(i,1,j) =0.

 g_ww(i,kte,j) =0.0
 ww(i,kte,j) =0.

 ENDDO

 DO k =kts,ktf
 DO i =its,itf

 g_Tmpv1 =muu(i+1,j)*g_u(i+1,k,j) +g_muu(i+1,j)*u(i+1,k,j) 
 Tmpv1 =muu(i+1,j)*u(i+1,k,j)

 g_Tmpv2 =muu(i,j)*g_u(i,k,j) +g_muu(i,j)*u(i,k,j) 
 Tmpv2 =muu(i,j)*u(i,k,j)

 g_Tmpv3 =muv(i,j+1)*g_v(i,k,j+1) +g_muv(i,j+1)*v(i,k,j+1) 
 Tmpv3 =muv(i,j+1)*v(i,k,j+1)

 g_Tmpv4 =muv(i,j)*g_v(i,k,j) +g_muv(i,j)*v(i,k,j) 
 Tmpv4 =muv(i,j)*v(i,k,j)

 g_divv(i,k) =msftx(i,j) *dnw(k)*(rdx*(g_Tmpv1 -g_Tmpv2) +rdy*(g_Tmpv3 - &
 g_Tmpv4))
 divv(i,k) =msftx(i,j) *dnw(k)*(rdx*(Tmpv1 -Tmpv2) +rdy*(Tmpv3 -Tmpv4))

 g_dmdt(i) =g_dmdt(i) +g_divv(i,k)
 dmdt(i) =dmdt(i) +divv(i,k)

 ENDDO
 ENDDO

 DO k =2,ktf
 DO i =its,itf

 g_ww(i,k,j) =g_ww(i,k-1,j) -dnw(k-1)*g_dmdt(i) -g_divv(i,k-1)
 ww(i,k,j) =ww(i,k-1,j) -dnw(k-1)*dmdt(i) -divv(i,k-1)

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_calc_ww_cp

 SUBROUTINE g_calc_cq(moist,g_moist,cqu,g_cqu,cqv,g_cqv,cqw,g_cqw, &
 n_moist,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 INTEGER :: n_moist
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme,n_moist) :: moist,g_moist
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: cqu,g_cqu,cqv,g_cqv,cqw,g_cqw

 REAL :: qtot,g_qtot
 INTEGER :: i,j,k,itf,jtf,ktf,ispe

 itf =ite

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 IF(  n_moist >= PARAM_FIRST_SCALAR ) THEN

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 DO ispe =PARAM_FIRST_SCALAR,n_moist

 g_qtot =g_qtot +g_moist(i,k,j,ispe) +g_moist(i-1,k,j,ispe)
 qtot =qtot +moist(i,k,j,ispe) +moist(i-1,k,j,ispe)

 ENDDO

 g_cqu(i,k,j) =-1.*(0.5*g_qtot)/((1. +0.5*qtot)*(1. +0.5*qtot))
 cqu(i,k,j) =1./(1. +0.5*qtot)

 ENDDO
 ENDDO
 ENDDO

 itf =min(ite,ide-1)

 jtf =jte

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 DO ispe =PARAM_FIRST_SCALAR,n_moist

 g_qtot =g_qtot +g_moist(i,k,j,ispe) +g_moist(i,k,j-1,ispe)
 qtot =qtot +moist(i,k,j,ispe) +moist(i,k,j-1,ispe)

 ENDDO

 g_cqv(i,k,j) =-1.*(0.5*g_qtot)/((1. +0.5*qtot)*(1. +0.5*qtot))
 cqv(i,k,j) =1./(1. +0.5*qtot)

 ENDDO
 ENDDO
 ENDDO

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 DO j =jts,jtf
 DO k =kts+1,ktf
 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 DO ispe =PARAM_FIRST_SCALAR,n_moist

 g_qtot =g_qtot +g_moist(i,k,j,ispe) +g_moist(i,k-1,j,ispe)
 qtot =qtot +moist(i,k,j,ispe) +moist(i,k-1,j,ispe)

 ENDDO

 g_cqw(i,k,j) =0.5*g_qtot
 cqw(i,k,j) =0.5*qtot

 ENDDO
 ENDDO
 ENDDO
 ELSE

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_cqu(i,k,j) =0.0
 cqu(i,k,j) =1.

 ENDDO
 ENDDO
 ENDDO

 itf =min(ite,ide-1)

 jtf =jte

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_cqv(i,k,j) =0.0
 cqv(i,k,j) =1.

 ENDDO
 ENDDO
 ENDDO

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 DO j =jts,jtf
 DO k =kts+1,ktf
 DO i =its,itf

 g_cqw(i,k,j) =0.0
 cqw(i,k,j) =0.

 ENDDO
 ENDDO
 ENDDO
 END IF

 END SUBROUTINE g_calc_cq

 SUBROUTINE g_calc_alt(alt,g_alt,al,g_al,alb,ids,ide,jds,jde,kds,kde,ims,ime, &
 jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: alb,al,g_al
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: alt,g_alt

 INTEGER :: i,j,k,itf,jtf,ktf

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_alt(i,k,j) =g_al(i,k,j)
 alt(i,k,j) =al(i,k,j) +alb(i,k,j)

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_calc_alt

 SUBROUTINE g_calc_p_rho_phi(moist,g_moist,n_moist,al,g_al,alb,mu,g_mu, &
 muts,g_muts,ph,g_ph,p,g_p,pb,t,g_t,p0,t0,znu,dnw,rdnw,rdn,non_hydrostatic &
,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 LOGICAL :: non_hydrostatic
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 INTEGER :: n_moist
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: alb,pb,t,g_t
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme,n_moist) :: moist,g_moist
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: al,g_al,p,g_p
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ph,g_ph
 REAL,DIMENSION(ims:ime,jms:jme) :: mu,g_mu,muts,g_muts
 REAL,DIMENSION(kms:kme) :: znu,dnw,rdnw,rdn
 REAL :: t0,p0

 INTEGER :: i,j,k,itf,jtf,ktf,ispe
 REAL :: qvf,g_qvf,qtot,g_qtot,qf1,g_qf1,qf2,g_qf2
 REAL,DIMENSION(its:ite) :: temp,g_temp,cpovcv_v,g_cpovcv_v

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)
!#ifndef INTELMKL  ! Remarked by Ning Pan

 g_cpovcv_v =0.0
 cpovcv_v =cpovcv

!#endif  ! Remarked by Ning Pan

 IF(non_hydrostatic) THEN

 IF(n_moist >= PARAM_FIRST_SCALAR ) THEN

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_qvf =rvovrd*g_moist(i,k,j,P_QV)
 qvf =1. +rvovrd*moist(i,k,j,P_QV)

 g_Tmpv1 =-1./muts(i,j)*(alb(i,k,j)*g_mu(i,j) +rdnw(k)*(g_ph(i,k+1,j) &
 -g_ph(i,k,j))) +(-(-1.)*g_muts(i,j)/(muts(i,j)*muts(i,j)))*(alb(i,k,j)*mu(i,j) &
 +rdnw(k)*(ph(i,k+1,j) -ph(i,k,j))) 
 Tmpv1 =-1./muts(i,j)*(alb(i,k,j)*mu(i,j) +rdnw(k)*(ph(i,k+1,j) -ph(i,k,j)))

 g_al(i,k,j) =g_Tmpv1
 al(i,k,j) =Tmpv1

 g_Tmpv1 =r_d*(t0 +t(i,k,j))*g_qvf +r_d*(g_t(i,k,j))*qvf 
 Tmpv1 =r_d*(t0 +t(i,k,j))*qvf

 g_Tmpv2 =((g_Tmpv1)*(p0*(al(i,k,j) +alb(i,k,j))) -(p0*(g_al(i,k,j))) &
*(Tmpv1))/((p0*(al(i,k,j) +alb(i,k,j)))*(p0*(al(i,k,j) +alb(i,k,j)))) 
 Tmpv2 =(Tmpv1)/(p0*(al(i,k,j) +alb(i,k,j)))

 g_temp(i) =g_Tmpv2
 temp(i) =Tmpv2

 ENDDO
! Added by Ning Pan
         CALL g_vpow_local( p(its,k,j),g_p(its,k,j), temp(its), g_temp(its), cpovcv_v(its), g_cpovcv_v(its), itf-its+1 )

#ifdef INTELMKL
!This line is fail to be recognized
         CALL VPOWX ( itf-its+1, temp(its), cpovcv, p(its,k,j) )
#else
!This line is fail to be recognized
!REVISED AND ADDED BY WALLS
!        CALL VPOW  ( p(its,k,j), temp(its), cpovcv_v(its), itf-its+1 )
!         CALL g_vpow_local( p(its,k,j),g_p(its,k,j), temp(its), g_temp(its), cpovcv_v(its), g_cpovcv_v(its), itf-its+1 )  ! Remarked by Ning Pan
         CALL VPOW  ( p(its,k,j), temp(its), cpovcv_v(its), itf-its+1 )  ! Added by Ning Pan
#endif

 DO i =its,itf

 g_p(i,k,j) =g_p(i,k,j)*p0
 p(i,k,j) =p(i,k,j)*p0 -pb(i,k,j)

 ENDDO
 ENDDO
 ENDDO
 ELSE

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_Tmpv1 =-1./muts(i,j)*(alb(i,k,j)*g_mu(i,j) +rdnw(k)*(g_ph(i,k+1,j) &
 -g_ph(i,k,j))) +(-(-1.)*g_muts(i,j)/(muts(i,j)*muts(i,j)))*(alb(i,k,j)*mu(i,j) &
 +rdnw(k)*(ph(i,k+1,j) -ph(i,k,j))) 
 Tmpv1 =-1./muts(i,j)*(alb(i,k,j)*mu(i,j) +rdnw(k)*(ph(i,k+1,j) -ph(i,k,j)))

 g_al(i,k,j) =g_Tmpv1
 al(i,k,j) =Tmpv1

 g_Tmpv1 =((r_d*(g_t(i,k,j)))*(p0*(al(i,k,j) +alb(i,k,j))) -(p0*(g_al(i,k, &
 j)))*(r_d*(t0 +t(i,k,j))))/((p0*(al(i,k,j) +alb(i,k,j)))*(p0*(al(i,k,j) +alb(i,k,j)))) 
 Tmpv1 =(r_d*(t0 +t(i,k,j)))/(p0*(al(i,k,j) +alb(i,k,j)))

 g_p(i,k,j) =p0*cpovcv*(g_Tmpv1)*(Tmpv1)**(cpovcv -1.0)
 p(i,k,j) =p0*(Tmpv1)**cpovcv -pb(i,k,j)

 ENDDO
 ENDDO
 ENDDO
 END IF
 ELSE

 IF(n_moist >= PARAM_FIRST_SCALAR ) THEN

 DO j =jts,jtf

 k =ktf

 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 DO ispe =PARAM_FIRST_SCALAR,n_moist

 g_qtot =g_qtot +g_moist(i,k,j,ispe)
 qtot =qtot +moist(i,k,j,ispe)

 ENDDO

 g_qf2 =-1.*(g_qtot)/((1. +qtot)*(1. +qtot))
 qf2 =1./(1. +qtot)

 g_Tmpv1 =qtot*g_qf2 +g_qtot*qf2 
 Tmpv1 =qtot*qf2

 g_qf1 =g_Tmpv1
 qf1 =Tmpv1

 g_Tmpv1 =qf1*g_muts(i,j) +g_qf1*muts(i,j) 
 Tmpv1 =qf1*muts(i,j)

!REVISED BY WALLS
!g_Tmpv2 =(((-0.5*(g_mu(i,j) +g_Tmpv1))/rdnw(k))*qf2 -g_qf2*-0.5*(mu(i,j) &
!+Tmpv1)/rdnw(k))/(qf2*qf2) 
 g_Tmpv2 =(((-0.5*(g_mu(i,j) +g_Tmpv1))/rdnw(k))*qf2 -g_qf2*(-0.5)*(mu(i,j) &
 +Tmpv1)/rdnw(k))/(qf2*qf2) 
 Tmpv2 =-0.5*(mu(i,j) +Tmpv1)/rdnw(k)/qf2

 g_p(i,k,j) =g_Tmpv2
 p(i,k,j) =Tmpv2

 g_qvf =rvovrd*g_moist(i,k,j,P_QV)
 qvf =1. +rvovrd*moist(i,k,j,P_QV)

 g_Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*g_qvf +(r_d/p1000mb)*(g_t(i,k,j))*qvf 
 Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*qvf

 g_Tmpv2 =Tmpv1*(cvpm*((g_p(i,k,j))/p1000mb)*((p(i,k,j) +pb(i,k,j))/p1000mb) &
**(cvpm -1.0)) +g_Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm) 
 Tmpv2 =Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm)

 g_al(i,k,j) =g_Tmpv2
 al(i,k,j) =Tmpv2 -alb(i,k,j)

 ENDDO

 DO k =ktf-1,kts,-1
 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 DO ispe =PARAM_FIRST_SCALAR,n_moist

 g_qtot =g_qtot +0.5*(g_moist(i,k,j,ispe) +g_moist(i,k+1,j,ispe))
 qtot =qtot +0.5*(moist(i,k,j,ispe) +moist(i,k+1,j,ispe))

 ENDDO

 g_qf2 =-1.*(g_qtot)/((1. +qtot)*(1. +qtot))
 qf2 =1./(1. +qtot)

 g_Tmpv1 =qtot*g_qf2 +g_qtot*qf2 
 Tmpv1 =qtot*qf2

 g_qf1 =g_Tmpv1
 qf1 =Tmpv1

 g_Tmpv1 =qf1*g_muts(i,j) +g_qf1*muts(i,j) 
 Tmpv1 =qf1*muts(i,j)

 g_Tmpv2 =((g_mu(i,j) +g_Tmpv1)*qf2 -g_qf2*(mu(i,j) +Tmpv1))/(qf2*qf2) 
 Tmpv2 =(mu(i,j) +Tmpv1)/qf2

 g_p(i,k,j) =g_p(i,k+1,j) -(g_Tmpv2/rdn(k+1))
 p(i,k,j) =p(i,k+1,j) -Tmpv2/rdn(k+1)

 g_qvf =rvovrd*g_moist(i,k,j,P_QV)
 qvf =1. +rvovrd*moist(i,k,j,P_QV)

 g_Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*g_qvf +(r_d/p1000mb)*(g_t(i,k,j))*qvf 
 Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*qvf

 g_Tmpv2 =Tmpv1*(cvpm*((g_p(i,k,j))/p1000mb)*((p(i,k,j) +pb(i,k,j))/p1000mb) &
**(cvpm -1.0)) +g_Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm) 
 Tmpv2 =Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm)

 g_al(i,k,j) =g_Tmpv2
 al(i,k,j) =Tmpv2 -alb(i,k,j)

 ENDDO
 ENDDO

 DO k =2,ktf+1
 DO i =its,itf

 g_Tmpv1 =(muts(i,j))*g_al(i,k-1,j) +(g_muts(i,j))*al(i,k-1,j) 
 Tmpv1 =(muts(i,j))*al(i,k-1,j)

 g_ph(i,k,j) =g_ph(i,k-1,j) -(dnw(k-1))*(g_Tmpv1 +g_mu(i,j)*alb(i,k-1,j))
 ph(i,k,j) =ph(i,k-1,j) -(dnw(k-1))*(Tmpv1 +mu(i,j)*alb(i,k-1,j))

 ENDDO
 ENDDO
 ENDDO
 ELSE

 DO j =jts,jtf

 k =ktf

 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 g_qf2 =-1.*(g_qtot)/((1. +qtot)*(1. +qtot))
 qf2 =1./(1. +qtot)

 g_Tmpv1 =qtot*g_qf2 +g_qtot*qf2 
 Tmpv1 =qtot*qf2

 g_qf1 =g_Tmpv1
 qf1 =Tmpv1

 g_Tmpv1 =qf1*g_muts(i,j) +g_qf1*muts(i,j) 
 Tmpv1 =qf1*muts(i,j)

!REVISED BY WALLS'
!g_Tmpv2 =(((-0.5*(g_mu(i,j) +g_Tmpv1))/rdnw(k))*qf2 -g_qf2*-0.5*(mu(i,j) &
!+Tmpv1)/rdnw(k))/(qf2*qf2) 
 g_Tmpv2 =(((-0.5*(g_mu(i,j) +g_Tmpv1))/rdnw(k))*qf2 -g_qf2*(-0.5)*(mu(i,j) &
 +Tmpv1)/rdnw(k))/(qf2*qf2) 
 Tmpv2 =-0.5*(mu(i,j) +Tmpv1)/rdnw(k)/qf2

 g_p(i,k,j) =g_Tmpv2
 p(i,k,j) =Tmpv2

 g_qvf =0.0
 qvf =1.

 g_Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*g_qvf +(r_d/p1000mb)*(g_t(i,k,j))*qvf 
 Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*qvf

 g_Tmpv2 =Tmpv1*(cvpm*((g_p(i,k,j))/p1000mb)*((p(i,k,j) +pb(i,k,j))/p1000mb) &
**(cvpm -1.0)) +g_Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm) 
 Tmpv2 =Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm)

 g_al(i,k,j) =g_Tmpv2
 al(i,k,j) =Tmpv2 -alb(i,k,j)

 ENDDO

 DO k =ktf-1,kts,-1
 DO i =its,itf

 g_qtot =0.0
 qtot =0.

 g_qf2 =-1.*(g_qtot)/((1. +qtot)*(1. +qtot))
 qf2 =1./(1. +qtot)

 g_Tmpv1 =qtot*g_qf2 +g_qtot*qf2 
 Tmpv1 =qtot*qf2

 g_qf1 =g_Tmpv1
 qf1 =Tmpv1

 g_Tmpv1 =qf1*g_muts(i,j) +g_qf1*muts(i,j) 
 Tmpv1 =qf1*muts(i,j)

 g_Tmpv2 =((g_mu(i,j) +g_Tmpv1)*qf2 -g_qf2*(mu(i,j) +Tmpv1))/(qf2*qf2) 
 Tmpv2 =(mu(i,j) +Tmpv1)/qf2

 g_p(i,k,j) =g_p(i,k+1,j) -(g_Tmpv2/rdn(k+1))
 p(i,k,j) =p(i,k+1,j) -Tmpv2/rdn(k+1)

 g_qvf =0.0
 qvf =1.

 g_Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*g_qvf +(r_d/p1000mb)*(g_t(i,k,j))*qvf 
 Tmpv1 =(r_d/p1000mb)*(t(i,k,j) +t0)*qvf

 g_Tmpv2 =Tmpv1*(cvpm*((g_p(i,k,j))/p1000mb)*((p(i,k,j) +pb(i,k,j))/p1000mb) &
**(cvpm -1.0)) +g_Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm) 
 Tmpv2 =Tmpv1*(((p(i,k,j) +pb(i,k,j))/p1000mb)**cvpm)

 g_al(i,k,j) =g_Tmpv2
 al(i,k,j) =Tmpv2 -alb(i,k,j)

 ENDDO
 ENDDO

 DO k =2,ktf+1
 DO i =its,itf

 g_Tmpv1 =(muts(i,j))*g_al(i,k-1,j) +(g_muts(i,j))*al(i,k-1,j) 
 Tmpv1 =(muts(i,j))*al(i,k-1,j)

 g_ph(i,k,j) =g_ph(i,k-1,j) -(dnw(k-1))*(g_Tmpv1 +g_mu(i,j)*alb(i,k-1,j))
 ph(i,k,j) =ph(i,k-1,j) -(dnw(k-1))*(Tmpv1 +mu(i,j)*alb(i,k-1,j))

 ENDDO
 ENDDO
 ENDDO
 END IF
 END IF

 END SUBROUTINE g_calc_p_rho_phi

 SUBROUTINE g_calc_php(php,g_php,ph,g_ph,phb,ids,ide,jds,jde,kds,kde,ims,ime, &
 jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: phb,ph,g_ph
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: php,g_php

 INTEGER :: i,j,k,itf,jtf,ktf

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

 g_php(i,k,j) =0.5*(g_ph(i,k,j) +g_ph(i,k+1,j))
 php(i,k,j) =0.5*(phb(i,k,j)+phb(i,k+1,j) +ph(i,k,j) +ph(i,k+1,j))

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_calc_php

 SUBROUTINE g_diagnose_w(ph_tend,g_ph_tend,ph_new,g_ph_new,ph_old, &
 g_ph_old,w,g_w,mu,g_mu,dt,u,g_u,v,g_v,ht,cf1,cf2,cf3,rdx,rdy,msftx, &
 msfty,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6,Tmpv7,g_Tmpv7,Tmpv8,g_Tmpv8,Tmpv9,g_Tmpv9, &
 Tmpv10,g_Tmpv10,Tmpv11,g_Tmpv11,Tmpv12,g_Tmpv12,Tmpv13,g_Tmpv13,Tmpv14, &
 g_Tmpv14,Tmpv15,g_Tmpv15,Tmpv16,g_Tmpv16,Tmpv17,g_Tmpv17,Tmpv18, &
 g_Tmpv18,Tmpv19,g_Tmpv19,Tmpv20,g_Tmpv20
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ph_tend,g_ph_tend,ph_new,g_ph_new, &
 ph_old,g_ph_old,u,g_u,v,g_v
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: w,g_w
 REAL,DIMENSION(ims:ime,jms:jme) :: mu,g_mu,ht,msftx,msfty
 REAL :: dt,cf1,cf2,cf3,rdx,rdy
 INTEGER :: i,j,k,itf,jtf

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 DO j =jts,jtf
 DO i =its,itf

 g_w(i,1,j) =msfty(i,j) *.5 *rdy*((ht(i,j+1)-ht(i,j))*(cf1*g_v(i,1,j+1) &
 +cf2*g_v(i,2,j+1) +cf3*g_v(i,3,j+1)) +(ht(i,j)-ht(i,j-1))*(cf1*g_v(i,1,j) &
 +cf2*g_v(i,2,j) +cf3*g_v(i,3,j))) +msftx(i,j) *.5 *rdx*((ht(i+1,j)-ht(i,j)) &
*(cf1*g_u(i+1,1,j) +cf2*g_u(i+1,2,j) +cf3*g_u(i+1,3,j)) +(ht(i,j)-ht(i-1,j)) &
*(cf1*g_u(i,1,j) +cf2*g_u(i,2,j) +cf3*g_u(i,3,j)))
 w(i,1,j) =msfty(i,j) *.5 *rdy*((ht(i,j+1)-ht(i,j))*(cf1*v(i,1,j+1) +cf2*v(i,2,j+1) &
 +cf3*v(i,3,j+1)) +(ht(i,j)-ht(i,j-1))*(cf1*v(i,1,j) +cf2*v(i,2,j) +cf3*v(i,3,j))) &
 +msftx(i,j) *.5 *rdx*((ht(i+1,j)-ht(i,j))*(cf1*u(i+1,1,j) +cf2*u(i+1,2,j) &
 +cf3*u(i+1,3,j)) +(ht(i,j)-ht(i-1,j))*(cf1*u(i,1,j) +cf2*u(i,2,j) +cf3*u(i,3,j)))

 ENDDO

 DO k =2,kte
 DO i =its,itf

 g_Tmpv1 =(g_ph_tend(i,k,j)*mu(i,j) -g_mu(i,j)*ph_tend(i,k,j))/(mu(i,j)*mu(i,j)) 
 Tmpv1 =ph_tend(i,k,j)/mu(i,j)

 g_w(i,k,j) =msfty(i,j)*((g_ph_new(i,k,j) -g_ph_old(i,k,j))/dt -g_Tmpv1)/g
 w(i,k,j) =msfty(i,j)*((ph_new(i,k,j) -ph_old(i,k,j))/dt -Tmpv1)/g

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_diagnose_w

 SUBROUTINE g_rhs_ph(ph_tend,g_ph_tend,u,g_u,v,g_v,ww,g_ww,ph,g_ph, &
 ph_old,g_ph_old,phb,w,g_w,mut,g_mut,muu,g_muu,muv,g_muv,fnm,fnp,rdnw, &
 cfn,cfn1,rdx,rdy,msfux,msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty,non_hydrostatic, &
 config_flags,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6,Tmpv7,g_Tmpv7,Tmpv8,g_Tmpv8,Tmpv9,g_Tmpv9, &
 Tmpv10,g_Tmpv10,Tmpv11,g_Tmpv11,Tmpv12,g_Tmpv12
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: u,g_u,v,g_v,ww,g_ww,ph,g_ph, &
 ph_old,g_ph_old,phb,w,g_w
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ph_tend,g_ph_tend
 REAL,DIMENSION(ims:ime,jms:jme) :: muu,g_muu,muv,g_muv,mut,g_mut,msfux, &
 msfuy,msfvx,msfvy,msftx,msfty,msfvx_inv
 REAL,DIMENSION(kms:kme) :: rdnw,fnm,fnp
 REAL :: cfn,cfn1,rdx,rdy
 LOGICAL :: non_hydrostatic

 INTEGER :: i,j,k,itf,jtf,ktf,kz,i_start,j_start
 REAL :: ur,g_ur,ul,g_ul,ub,g_ub,vr,g_vr,vl,g_vl,vb,g_vb
 REAL,DIMENSION(its:ite,kts:kte) :: wdwn,g_wdwn
 INTEGER :: advective_order
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 advective_order =config_flags%h_sca_adv_order

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 DO j =jts,jtf
 DO k =2,kte
 DO i =its,itf

 g_Tmpv1 =.5*(ww(i,k,j) +ww(i,k-1,j))*rdnw(k-1)*(g_ph(i,k,j) -g_ph(i,k-1,j)) &
 +.5*(g_ww(i,k,j) +g_ww(i,k-1,j))*rdnw(k-1)*(ph(i,k,j) -ph(i,k-1,j) +phb(i,k,j) &
 -phb(i,k-1,j)) 
 Tmpv1 =.5*(ww(i,k,j) +ww(i,k-1,j))*rdnw(k-1)*(ph(i,k,j) -ph(i,k-1,j) +phb(i,k,j) &
 -phb(i,k-1,j))

 g_wdwn(i,k) =g_Tmpv1
 wdwn(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO k =2,kte-1
 DO i =its,itf

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(fnm(k)*g_wdwn(i,k+1) +fnp(k)*g_wdwn(i,k))
 ph_tend(i,k,j) =ph_tend(i,k,j) -(fnm(k)*wdwn(i,k+1) +fnp(k)*wdwn(i,k))

 ENDDO
 ENDDO
 ENDDO

 IF(non_hydrostatic) THEN

 DO j =jts,jtf

 DO i =its,itf

 g_ph_tend(i,kde,j) =0.0
 ph_tend(i,kde,j) =0.

 ENDDO

 DO k =2,kte
 DO i =its,itf

 g_Tmpv1 =mut(i,j)*g*g_w(i,k,j) +g_mut(i,j)*g*w(i,k,j) 
 Tmpv1 =mut(i,j)*g*w(i,k,j)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) +(g_Tmpv1/msfty(i,j))
 ph_tend(i,k,j) =ph_tend(i,k,j) +Tmpv1/msfty(i,j)

 ENDDO
 ENDDO
 ENDDO
 END IF

 IF(advective_order <= 2) THEN

 i_start =its

 j_start =jts

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 IF( (config_flags%open_ys .or. specified) .and. jts == jds ) j_start =jts+1

 IF( (config_flags%open_ye .or. specified) .and. jte == jde ) jtf =jtf-2

 DO j =j_start,jtf
 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv3 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv3 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 i_start =its

 j_start =jts

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 IF( (config_flags%open_xs .or. specified) .and. its == ids ) i_start =its+1

 IF( (config_flags%open_xe .or. specified) .and. ite == ide ) itf =itf-2

 DO j =j_start,jtf
 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv3 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv3 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO
 ELSE IF(advective_order <= 4) THEN

 i_start =its

 j_start =jts

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 IF( (config_flags%open_ys .or. specified) .and. jts == jds ) j_start =jts+2

 IF( (config_flags%open_ye .or. specified) .and. jte == jde ) jtf =jtf-3

 DO j =j_start,jtf
 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv2 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -(g_ph(i,k,j+2) -g_ph(i,k,j-2))) +(g_Tmpv1*msfvy(i,j+1) &
 +g_Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) -ph(i,k,j-1)) -(ph(i,k,j+2) &
 -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) -(phb(i,k,j+2)-phb(i,k,j-2))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -(ph(i,k,j+2) -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) &
 -(phb(i,k,j+2)-phb(i,k,j-2)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv2 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -(g_ph(i,k,j+2) -g_ph(i,k,j-2))) +(g_Tmpv1*msfvy(i,j+1) &
 +g_Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) -ph(i,k,j-1)) -(ph(i,k,j+2) &
 -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) -(phb(i,k,j+2)-phb(i,k,j-2))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -(ph(i,k,j+2) -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) &
 -(phb(i,k,j+2)-phb(i,k,j-2)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 IF( (config_flags%open_ys .or. specified) .and. jts <= jds+1 ) THEN

 j =jds+1

 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv3 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv3 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 IF( (config_flags%open_ye .or. specified) .and. jte >= jde-2 ) THEN

 j =jde-2

 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv3 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv3 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 i_start =its

 j_start =jts

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 IF( (config_flags%open_xs) .and. its == ids ) i_start =its+2

 IF( (config_flags%open_xe) .and. ite == ide ) itf =itf-3

 DO j =j_start,jtf
 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv2 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -(g_ph(i+2,k,j) -g_ph(i-2,k,j))) +(g_Tmpv1*msfux(i+1,j) &
 +g_Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) -ph(i-1,k,j)) -(ph(i+2,k,j) &
 -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) -(phb(i+2,k,j)-phb(i-2,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -(ph(i+2,k,j) -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) &
 -(phb(i+2,k,j)-phb(i-2,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv2 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -(g_ph(i+2,k,j) -g_ph(i-2,k,j))) +(g_Tmpv1*msfux(i+1,j) &
 +g_Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) -ph(i-1,k,j)) -(ph(i+2,k,j) &
 -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) -(phb(i+2,k,j)-phb(i-2,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -(ph(i+2,k,j) -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) &
 -(phb(i+2,k,j)-phb(i-2,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 IF( (config_flags%open_xs .or. specified) .and. its <= ids+1 ) THEN

 i =ids+1

 DO j =j_start,jtf
 DO k =2,kte-1

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv3 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO j =j_start,jtf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv3 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 IF( (config_flags%open_xe .or. specified) .and. ite >= ide-2 ) THEN

 i =ide-2

 DO j =j_start,jtf
 DO k =2,kte-1

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv3 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO j =j_start,jtf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv3 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF
 ELSE IF(advective_order <= 6) THEN

 i_start =its

 j_start =jts

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 IF(config_flags%open_ys .or. specified ) j_start =max(jts,jds+3)

 IF(config_flags%open_ye .or. specified ) jtf =min(jtf,jde-4)

 DO j =j_start,jtf
 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv2 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./60.)*(45.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -9.*(g_ph(i,k,j+2) -g_ph(i,k,j-2)) +(g_ph(i,k,j+3) &
 -g_ph(i,k,j-3))) +(g_Tmpv1*msfvy(i,j+1) +g_Tmpv2*msfvy(i,j))*(1./60.) &
*(45.*(ph(i,k,j+1) -ph(i,k,j-1)) -9.*(ph(i,k,j+2) -ph(i,k,j-2)) +(ph(i,k,j+3) &
 -ph(i,k,j-3)) +45. *(phb(i,k,j+1)-phb(i,k,j-1)) -9. *(phb(i,k,j+2)-phb(i,k,j-2)) &
 +(phb(i,k,j+3)-phb(i,k,j-3))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./60.)*(45.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -9.*(ph(i,k,j+2) -ph(i,k,j-2)) +(ph(i,k,j+3) -ph(i,k,j-3)) &
 +45. *(phb(i,k,j+1)-phb(i,k,j-1)) -9. *(phb(i,k,j+2)-phb(i,k,j-2)) +(phb(i,k,j+3) &
-phb(i,k,j-3)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv2 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./60.)*(45.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -9.*(g_ph(i,k,j+2) -g_ph(i,k,j-2)) +(g_ph(i,k,j+3) &
 -g_ph(i,k,j-3))) +(g_Tmpv1*msfvy(i,j+1) +g_Tmpv2*msfvy(i,j))*(1./60.) &
*(45.*(ph(i,k,j+1) -ph(i,k,j-1)) -9.*(ph(i,k,j+2) -ph(i,k,j-2)) +(ph(i,k,j+3) &
 -ph(i,k,j-3)) +45. *(phb(i,k,j+1)-phb(i,k,j-1)) -9. *(phb(i,k,j+2)-phb(i,k,j-2)) &
 +(phb(i,k,j+3)-phb(i,k,j-3))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./60.)*(45.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -9.*(ph(i,k,j+2) -ph(i,k,j-2)) +(ph(i,k,j+3) -ph(i,k,j-3)) &
 +45. *(phb(i,k,j+1)-phb(i,k,j-1)) -9. *(phb(i,k,j+2)-phb(i,k,j-2)) +(phb(i,k,j+3) &
-phb(i,k,j-3)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 IF( (config_flags%open_ys .or. specified) .and. jts <= jds+2 .and. jds+2 <= jte ) THEN

 j =jds+2

 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv2 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -(g_ph(i,k,j+2) -g_ph(i,k,j-2))) +(g_Tmpv1*msfvy(i,j+1) &
 +g_Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) -ph(i,k,j-1)) -(ph(i,k,j+2) &
 -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) -(phb(i,k,j+2)-phb(i,k,j-2))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -(ph(i,k,j+2) -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) &
 -(phb(i,k,j+2)-phb(i,k,j-2)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv2 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -(g_ph(i,k,j+2) -g_ph(i,k,j-2))) +(g_Tmpv1*msfvy(i,j+1) &
 +g_Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) -ph(i,k,j-1)) -(ph(i,k,j+2) &
 -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) -(phb(i,k,j+2)-phb(i,k,j-2))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -(ph(i,k,j+2) -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) &
 -(phb(i,k,j+2)-phb(i,k,j-2)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 END IF

 IF( (config_flags%open_ye .or. specified) .and. jts <= jde-3 .and. jde-3 <= jte ) THEN

 j =jde-3

 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv2 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -(g_ph(i,k,j+2) -g_ph(i,k,j-2))) +(g_Tmpv1*msfvy(i,j+1) &
 +g_Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) -ph(i,k,j-1)) -(ph(i,k,j+2) &
 -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) -(phb(i,k,j+2)-phb(i,k,j-2))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -(ph(i,k,j+2) -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) &
 -(phb(i,k,j+2)-phb(i,k,j-2)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv2 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(g_ph(i,k,j+1) &
 -g_ph(i,k,j-1)) -(g_ph(i,k,j+2) -g_ph(i,k,j-2))) +(g_Tmpv1*msfvy(i,j+1) &
 +g_Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) -ph(i,k,j-1)) -(ph(i,k,j+2) &
 -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) -(phb(i,k,j+2)-phb(i,k,j-2))) 
 Tmpv3 =(Tmpv1*msfvy(i,j+1) +Tmpv2*msfvy(i,j))*(1./12.)*(8.*(ph(i,k,j+1) &
 -ph(i,k,j-1)) -(ph(i,k,j+2) -ph(i,k,j-2)) +8. *(phb(i,k,j+1)-phb(i,k,j-1)) &
 -(phb(i,k,j+2)-phb(i,k,j-2)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv3)

 ENDDO
 END IF

 IF( (config_flags%open_ys .or. specified) .and. jts <= jds+1 .and. jds+1 <= jte ) THEN

 j =jds+1

 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv3 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv3 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 IF( (config_flags%open_ye .or. specified) .and. jts <= jde-2 .and. jde-2 <= jte ) THEN

 j =jde-2

 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(g_v(i,k,j+1) +g_v(i,k-1,j+1)) +g_muv(i,j+1) &
*(v(i,k,j+1) +v(i,k-1,j+1)) 
 Tmpv1 =muv(i,j+1)*(v(i,k,j+1) +v(i,k-1,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(g_v(i,k,j) +g_v(i,k-1,j)) +g_muv(i,j)*(v(i,k,j) +v(i,k-1,j)) 
 Tmpv3 =muv(i,j)*(v(i,k,j) +v(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muv(i,j+1)*(cfn*g_v(i,k-1,j+1) +cfn1*g_v(i,k-2,j+1)) &
 +g_muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1)) 
 Tmpv1 =muv(i,j+1)*(cfn*v(i,k-1,j+1) +cfn1*v(i,k-2,j+1))

 g_Tmpv2 =Tmpv1*msfvy(i,j+1)*(g_ph(i,k,j+1) -g_ph(i,k,j)) +g_Tmpv1*msfvy( &
 i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfvy(i,j+1)*(phb(i,k,j+1)-phb(i,k,j) +ph(i,k,j+1) -ph(i,k,j))

 g_Tmpv3 =muv(i,j)*(cfn*g_v(i,k-1,j) +cfn1*g_v(i,k-2,j)) +g_muv(i,j) &
*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j)) 
 Tmpv3 =muv(i,j)*(cfn*v(i,k-1,j) +cfn1*v(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfvy(i,j)*(g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv3*msfvy(i, &
 j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1)) 
 Tmpv4 =Tmpv3*msfvy(i,j)*(phb(i,k,j)-phb(i,k,j-1) +ph(i,k,j) -ph(i,k,j-1))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdy/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 i_start =its

 j_start =jts

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 IF(config_flags%open_xs .or. specified ) i_start =max(its,ids+3)

 IF(config_flags%open_xe .or. specified ) itf =min(itf,ide-4)

 DO j =j_start,jtf
 DO k =2,kte-1
 DO i =i_start,itf

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv2 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./60.)*(45.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -9.*(g_ph(i+2,k,j) -g_ph(i-2,k,j)) +(g_ph(i+3,k,j) &
 -g_ph(i-3,k,j))) +(g_Tmpv1*msfux(i+1,j) +g_Tmpv2*msfux(i,j))*(1./60.) &
*(45.*(ph(i+1,k,j) -ph(i-1,k,j)) -9.*(ph(i+2,k,j) -ph(i-2,k,j)) +(ph(i+3,k,j) &
 -ph(i-3,k,j)) +45. *(phb(i+1,k,j)-phb(i-1,k,j)) -9. *(phb(i+2,k,j)-phb(i-2,k,j)) &
 +(phb(i+3,k,j)-phb(i-3,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./60.)*(45.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -9.*(ph(i+2,k,j) -ph(i-2,k,j)) +(ph(i+3,k,j) -ph(i-3,k,j)) &
 +45. *(phb(i+1,k,j)-phb(i-1,k,j)) -9. *(phb(i+2,k,j)-phb(i-2,k,j)) +(phb(i+3,k,j) &
-phb(i-3,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 k =kte

 DO i =i_start,itf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv2 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./60.)*(45.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -9.*(g_ph(i+2,k,j) -g_ph(i-2,k,j)) +(g_ph(i+3,k,j) &
 -g_ph(i-3,k,j))) +(g_Tmpv1*msfux(i+1,j) +g_Tmpv2*msfux(i,j))*(1./60.) &
*(45.*(ph(i+1,k,j) -ph(i-1,k,j)) -9.*(ph(i+2,k,j) -ph(i-2,k,j)) +(ph(i+3,k,j) &
 -ph(i-3,k,j)) +45. *(phb(i+1,k,j)-phb(i-1,k,j)) -9. *(phb(i+2,k,j)-phb(i-2,k,j)) &
 +(phb(i+3,k,j)-phb(i-3,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./60.)*(45.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -9.*(ph(i+2,k,j) -ph(i-2,k,j)) +(ph(i+3,k,j) -ph(i-3,k,j)) &
 +45. *(phb(i+1,k,j)-phb(i-1,k,j)) -9. *(phb(i+2,k,j)-phb(i-2,k,j)) +(phb(i+3,k,j) &
-phb(i-3,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO
 ENDDO

 IF( (config_flags%open_xs) .and. its <= ids+2 .and. ids+2 <= ite ) THEN

 i =ids+2

 DO j =j_start,jtf
 DO k =2,kte-1

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv2 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -(g_ph(i+2,k,j) -g_ph(i-2,k,j))) +(g_Tmpv1*msfux(i+1,j) &
 +g_Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) -ph(i-1,k,j)) -(ph(i+2,k,j) &
 -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) -(phb(i+2,k,j)-phb(i-2,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -(ph(i+2,k,j) -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) &
 -(phb(i+2,k,j)-phb(i-2,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO

 k =kte

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv2 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -(g_ph(i+2,k,j) -g_ph(i-2,k,j))) +(g_Tmpv1*msfux(i+1,j) &
 +g_Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) -ph(i-1,k,j)) -(ph(i+2,k,j) &
 -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) -(phb(i+2,k,j)-phb(i-2,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -(ph(i+2,k,j) -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) &
 -(phb(i+2,k,j)-phb(i-2,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO
 END IF

 IF( (config_flags%open_xe) .and. its <= ide-3 .and. ide-3 <= ite ) THEN

 i =ide-3

 DO j =j_start,jtf
 DO k =2,kte-1

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv2 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -(g_ph(i+2,k,j) -g_ph(i-2,k,j))) +(g_Tmpv1*msfux(i+1,j) &
 +g_Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) -ph(i-1,k,j)) -(ph(i+2,k,j) &
 -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) -(phb(i+2,k,j)-phb(i-2,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -(ph(i+2,k,j) -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) &
 -(phb(i+2,k,j)-phb(i-2,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO

 k =kte

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv2 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(g_ph(i+1,k,j) &
 -g_ph(i-1,k,j)) -(g_ph(i+2,k,j) -g_ph(i-2,k,j))) +(g_Tmpv1*msfux(i+1,j) &
 +g_Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) -ph(i-1,k,j)) -(ph(i+2,k,j) &
 -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) -(phb(i+2,k,j)-phb(i-2,k,j))) 
 Tmpv3 =(Tmpv1*msfux(i+1,j) +Tmpv2*msfux(i,j))*(1./12.)*(8.*(ph(i+1,k,j) &
 -ph(i-1,k,j)) -(ph(i+2,k,j) -ph(i-2,k,j)) +8. *(phb(i+1,k,j)-phb(i-1,k,j)) &
 -(phb(i+2,k,j)-phb(i-2,k,j)))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv3)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv3)

 ENDDO
 END IF

 IF( (config_flags%open_xs .or. specified) .and. its <= ids+1 .and. ids+1 <= ite ) THEN

 i =ids+1

 DO j =j_start,jtf
 DO k =2,kte-1

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv3 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO j =j_start,jtf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv3 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 IF( (config_flags%open_xe .or. specified) .and. its <= ide-2 .and. ide-2 <= ite ) THEN

 i =ide-2

 DO j =j_start,jtf
 DO k =2,kte-1

 g_Tmpv1 =muu(i+1,j)*(g_u(i+1,k,j) +g_u(i+1,k-1,j)) +g_muu(i+1,j) &
*(u(i+1,k,j) +u(i+1,k-1,j)) 
 Tmpv1 =muu(i+1,j)*(u(i+1,k,j) +u(i+1,k-1,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(g_u(i,k,j) +g_u(i,k-1,j)) +g_muu(i,j)*(u(i,k,j) +u(i,k-1,j)) 
 Tmpv3 =muu(i,j)*(u(i,k,j) +u(i,k-1,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.25 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 ENDDO

 k =kte

 DO j =j_start,jtf

 g_Tmpv1 =muu(i+1,j)*(cfn*g_u(i+1,k-1,j) +cfn1*g_u(i+1,k-2,j)) &
 +g_muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j)) 
 Tmpv1 =muu(i+1,j)*(cfn*u(i+1,k-1,j) +cfn1*u(i+1,k-2,j))

 g_Tmpv2 =Tmpv1*msfux(i+1,j)*(g_ph(i+1,k,j) -g_ph(i,k,j)) +g_Tmpv1*msfux( &
 i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j)) 
 Tmpv2 =Tmpv1*msfux(i+1,j)*(phb(i+1,k,j)-phb(i,k,j) +ph(i+1,k,j) -ph(i,k,j))

 g_Tmpv3 =muu(i,j)*(cfn*g_u(i,k-1,j) +cfn1*g_u(i,k-2,j)) +g_muu(i,j) &
*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j)) 
 Tmpv3 =muu(i,j)*(cfn*u(i,k-1,j) +cfn1*u(i,k-2,j))

 g_Tmpv4 =Tmpv3*msfux(i,j)*(g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv3*msfux(i, &
 j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j)) 
 Tmpv4 =Tmpv3*msfux(i,j)*(phb(i,k,j)-phb(i-1,k,j) +ph(i,k,j) -ph(i-1,k,j))

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(g_Tmpv2 +g_Tmpv4)
 ph_tend(i,k,j) =ph_tend(i,k,j) -(0.5 *rdx/msfty(i,j))*(Tmpv2 +Tmpv4)

 ENDDO
 END IF

 END IF

 i_start =its

 itf =min(ite,ide-1)

 IF( (config_flags%open_ys) .and. jts == jds ) THEN

 j =jts

 DO k =2,kde

 kz =min(k,kde-1)

 DO i =its,itf

 g_vb =.5*(fnm(kz)*(g_v(i,kz,j+1) +g_v(i,kz,j)) +fnp(kz)*(g_v(i,kz-1,j+1) &
 +g_v(i,kz-1,j)))
 vb =.5*(fnm(kz)*(v(i,kz,j+1) +v(i,kz,j)) +fnp(kz)*(v(i,kz-1,j+1) +v(i,kz-1,j)))

 g_vl =(g_vb +0.0 -(g_vb -0.0)*sign(1.0, vb -(0.)))*0.5
! Revised by Ning Pan, 2010-07-21
! vl =min(vb,0.)
 vl =amin1(vb,0.)

 g_Tmpv1 =vl*(g_ph_old(i,k,j+1) -g_ph_old(i,k,j)) +g_vl*(ph_old(i,k,j+1) &
 -ph_old(i,k,j)) 
 Tmpv1 =vl*(ph_old(i,k,j+1) -ph_old(i,k,j))

 g_Tmpv2 =rdy*mut(i,j)*(g_Tmpv1) +rdy*g_mut(i,j)*(Tmpv1) 
 Tmpv2 =rdy*mut(i,j)*(Tmpv1)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -g_Tmpv2
 ph_tend(i,k,j) =ph_tend(i,k,j) -Tmpv2

 ENDDO
 ENDDO
 END IF

 IF( (config_flags%open_ye) .and. jte == jde ) THEN

 j =jte-1

 DO k =2,kde

 kz =min(k,kde-1)

 DO i =its,itf

 g_vb =.5*(fnm(kz)*(g_v(i,kz,j+1) +g_v(i,kz,j)) +fnp(kz)*(g_v(i,kz-1,j+1) &
 +g_v(i,kz-1,j)))
 vb =.5*(fnm(kz)*(v(i,kz,j+1) +v(i,kz,j)) +fnp(kz)*(v(i,kz-1,j+1) +v(i,kz-1,j)))

 g_vr =(g_vb +0.0 +(g_vb -0.0)*sign(1.0, vb -(0.)))*0.5
! Revised by Ning Pan, 2010-07-21
! vr =max(vb,0.)
 vr =amax1(vb,0.)

 g_Tmpv1 =vr*(g_ph_old(i,k,j) -g_ph_old(i,k,j-1)) +g_vr*(ph_old(i,k,j) &
 -ph_old(i,k,j-1)) 
 Tmpv1 =vr*(ph_old(i,k,j) -ph_old(i,k,j-1))

 g_Tmpv2 =rdy*mut(i,j)*(g_Tmpv1) +rdy*g_mut(i,j)*(Tmpv1) 
 Tmpv2 =rdy*mut(i,j)*(Tmpv1)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -g_Tmpv2
 ph_tend(i,k,j) =ph_tend(i,k,j) -Tmpv2

 ENDDO
 ENDDO
 END IF

 j_start =its

 jtf =min(jte,jde-1)

 IF( (config_flags%open_xs) .and. its == ids ) THEN

 i =its

 DO j =jts,jtf
 DO k =2,kde-1

 kz =k

 g_ub =.5*(fnm(kz)*(g_u(i+1,kz,j) +g_u(i,kz,j)) +fnp(kz)*(g_u(i+1,kz-1,j) &
 +g_u(i,kz-1,j)))
 ub =.5*(fnm(kz)*(u(i+1,kz,j) +u(i,kz,j)) +fnp(kz)*(u(i+1,kz-1,j) +u(i,kz-1,j)))

 g_ul =(g_ub +0.0 -(g_ub -0.0)*sign(1.0, ub -(0.)))*0.5
! Revised by Ning Pan, 2010-07-20
! ul =min(ub,0.)
 ul =amin1(ub,0.)

 g_Tmpv1 =ul*(g_ph_old(i+1,k,j) -g_ph_old(i,k,j)) +g_ul*(ph_old(i+1,k,j) &
 -ph_old(i,k,j)) 
 Tmpv1 =ul*(ph_old(i+1,k,j) -ph_old(i,k,j))

 g_Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(g_Tmpv1) +(msftx(i,j) &
/msfty(i,j)) *rdx*g_mut(i,j)*(Tmpv1) 
 Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(Tmpv1)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -g_Tmpv2
 ph_tend(i,k,j) =ph_tend(i,k,j) -Tmpv2

 ENDDO

 k =kde

 kz =k

 g_ub =.5*(fnm(kz)*(g_u(i+1,kz,j) +g_u(i,kz,j)) +fnp(kz)*(g_u(i+1,kz-1,j) &
 +g_u(i,kz-1,j)))
 ub =.5*(fnm(kz)*(u(i+1,kz,j) +u(i,kz,j)) +fnp(kz)*(u(i+1,kz-1,j) +u(i,kz-1,j)))

 g_ul =(g_ub +0.0 -(g_ub -0.0)*sign(1.0, ub -(0.)))*0.5
! Revised by Ning Pan, 2010-07-20
! ul =min(ub,0.)
 ul =amin1(ub,0.)

 g_Tmpv1 =ul*(g_ph_old(i+1,k,j) -g_ph_old(i,k,j)) +g_ul*(ph_old(i+1,k,j) &
 -ph_old(i,k,j)) 
 Tmpv1 =ul*(ph_old(i+1,k,j) -ph_old(i,k,j))

 g_Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(g_Tmpv1) +(msftx(i,j) &
/msfty(i,j)) *rdx*g_mut(i,j)*(Tmpv1) 
 Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(Tmpv1)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -g_Tmpv2
 ph_tend(i,k,j) =ph_tend(i,k,j) -Tmpv2

 ENDDO
 END IF

 IF( (config_flags%open_xe) .and. ite == ide ) THEN

 i =ite-1

 DO j =jts,jtf
 DO k =2,kde-1

 kz =k

 g_ub =.5*(fnm(kz)*(g_u(i+1,kz,j) +g_u(i,kz,j)) +fnp(kz)*(g_u(i+1,kz-1,j) &
 +g_u(i,kz-1,j)))
 ub =.5*(fnm(kz)*(u(i+1,kz,j) +u(i,kz,j)) +fnp(kz)*(u(i+1,kz-1,j) +u(i,kz-1,j)))

 g_ur =(g_ub +0.0 +(g_ub -0.0)*sign(1.0, ub -(0.)))*0.5
! Revised by Ning Pan, 2010-07-20
! ur =max(ub,0.)
 ur =amax1(ub,0.)

 g_Tmpv1 =ur*(g_ph_old(i,k,j) -g_ph_old(i-1,k,j)) +g_ur*(ph_old(i,k,j) &
 -ph_old(i-1,k,j)) 
 Tmpv1 =ur*(ph_old(i,k,j) -ph_old(i-1,k,j))

 g_Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(g_Tmpv1) +(msftx(i,j) &
/msfty(i,j)) *rdx*g_mut(i,j)*(Tmpv1) 
 Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(Tmpv1)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -g_Tmpv2
 ph_tend(i,k,j) =ph_tend(i,k,j) -Tmpv2

 ENDDO

 k =kde

 kz =k-1

 g_ub =.5*(fnm(kz)*(g_u(i+1,kz,j) +g_u(i,kz,j)) +fnp(kz)*(g_u(i+1,kz-1,j) &
 +g_u(i,kz-1,j)))
 ub =.5*(fnm(kz)*(u(i+1,kz,j) +u(i,kz,j)) +fnp(kz)*(u(i+1,kz-1,j) +u(i,kz-1,j)))

 g_ur =(g_ub +0.0 +(g_ub -0.0)*sign(1.0, ub -(0.)))*0.5
! Revised by Ning Pan, 2010-07-20
! ur =max(ub,0.)
 ur =amax1(ub,0.)

 g_Tmpv1 =ur*(g_ph_old(i,k,j) -g_ph_old(i-1,k,j)) +g_ur*(ph_old(i,k,j) &
 -ph_old(i-1,k,j)) 
 Tmpv1 =ur*(ph_old(i,k,j) -ph_old(i-1,k,j))

 g_Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(g_Tmpv1) +(msftx(i,j) &
/msfty(i,j)) *rdx*g_mut(i,j)*(Tmpv1) 
 Tmpv2 =(msftx(i,j)/msfty(i,j)) *rdx*mut(i,j)*(Tmpv1)

 g_ph_tend(i,k,j) =g_ph_tend(i,k,j) -g_Tmpv2
 ph_tend(i,k,j) =ph_tend(i,k,j) -Tmpv2

 ENDDO
 END IF

 END SUBROUTINE g_rhs_ph

 SUBROUTINE g_horizontal_pressure_gradient(ru_tend,g_ru_tend,rv_tend, &
 g_rv_tend,ph,g_ph,alt,g_alt,p,g_p,pb,al,g_al,php,g_php,cqu, &
 g_cqu,cqv,g_cqv,muu,g_muu,muv,g_muv,mu,g_mu,fnm,fnp,rdnw,cf1,cf2,cf3, &
 rdx,rdy,msfux,msfuy,msfvx,msfvy,msftx,msfty,config_flags,non_hydrostatic,top_lid,ids, &
 ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6
 TYPE(grid_config_rec_type) :: config_flags
 LOGICAL :: non_hydrostatic,top_lid
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ph,g_ph,alt,g_alt,al,g_al,p, &
 g_p,pb,php,g_php,cqu,g_cqu,cqv,g_cqv
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru_tend,g_ru_tend,rv_tend,g_rv_tend
 REAL,DIMENSION(ims:ime,jms:jme) :: muu,g_muu,muv,g_muv,mu,g_mu,msfux,msfuy, &
 msfvx,msfvy,msftx,msfty
 REAL,DIMENSION(kms:kme) :: rdnw,fnm,fnp
 REAL :: rdx,rdy,cf1,cf2,cf3
 INTEGER :: i,j,k,itf,jtf,ktf,i_start,j_start
 REAL,DIMENSION(ims:ime,kms:kme) :: dpn,g_dpn
 REAL :: dpx,g_dpx,dpy,g_dpy
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 itf =min(ite,ide-1)

 jtf =jte

 ktf =min(kte,kde-1)

 i_start =its

 j_start =jts

 IF( (config_flags%open_ys .or. specified .or.   &
         config_flags%nested .or. config_flags%polar ) .and. jts == jds ) j_start =jts+1

 IF( (config_flags%open_ye .or. specified .or.   &
         config_flags%nested .or. config_flags%polar ) .and. jte == jde ) jtf =jtf-1

 DO j =j_start,jtf

 IF( non_hydrostatic ) THEN

 k =1

 DO i =i_start,itf

 g_dpn(i,k) =.5*(cf1*(g_p(i,k,j-1) +g_p(i,k,j)) +cf2*(g_p(i,k+1,j-1) &
 +g_p(i,k+1,j)) +cf3*(g_p(i,k+2,j-1) +g_p(i,k+2,j)))
 dpn(i,k) =.5*(cf1*(p(i,k,j-1) +p(i,k,j)) +cf2*(p(i,k+1,j-1) +p(i,k+1,j)) &
 +cf3*(p(i,k+2,j-1) +p(i,k+2,j)))

 g_dpn(i,kde) =0.0
 dpn(i,kde) =0.

 ENDDO

 IF(top_lid) THEN

 DO i =i_start,itf

 g_dpn(i,kde) =.5*(cf1*(g_p(i,kde-1,j-1) +g_p(i,kde-1,j)) +cf2*(g_p(i,kde- &
 2,j-1) +g_p(i,kde-2,j)) +cf3*(g_p(i,kde-3,j-1) +g_p(i,kde-3,j)))
 dpn(i,kde) =.5*(cf1*(p(i,kde-1,j-1) +p(i,kde-1,j)) +cf2*(p(i,kde-2,j-1) &
 +p(i,kde-2,j)) +cf3*(p(i,kde-3,j-1) +p(i,kde-3,j)))

 ENDDO
 ENDIF

 DO k =2,ktf
 DO i =i_start,itf

 g_dpn(i,k) =.5*(fnm(k)*(g_p(i,k,j-1) +g_p(i,k,j)) +fnp(k)*(g_p(i,k-1,j-1) &
 +g_p(i,k-1,j)))
 dpn(i,k) =.5*(fnm(k)*(p(i,k,j-1) +p(i,k,j)) +fnp(k)*(p(i,k-1,j-1) +p(i,k-1,j)))

 ENDDO
 ENDDO

 DO K =1,ktf
 DO i =i_start,itf

 g_Tmpv1 =(alt(i,k,j) +alt(i,k,j-1))*(g_p(i,k,j) -g_p(i,k,j-1)) &
 +(g_alt(i,k,j) +g_alt(i,k,j-1))*(p(i,k,j) -p(i,k,j-1)) 
 Tmpv1 =(alt(i,k,j) +alt(i,k,j-1))*(p(i,k,j) -p(i,k,j-1))

 g_Tmpv2 =(msfvy(i,j)/msfvx(i,j)) *.5 *rdy*muv(i,j)*((g_ph(i,k+1,j) &
 -g_ph(i,k+1,j-1) +g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv1 +(g_al(i,k,j) &
 +g_al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1))) +(msfvy(i,j)/msfvx(i,j)) *.5 *rdy* &
 g_muv(i,j)*((ph(i,k+1,j) -ph(i,k+1,j-1) +ph(i,k,j) -ph(i,k,j-1)) +Tmpv1 +(al(i,k, &
 j) +al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1))) 
 Tmpv2 =(msfvy(i,j)/msfvx(i,j)) *.5 *rdy*muv(i,j)*((ph(i,k+1,j) -ph(i,k+1,j-1) &
 +ph(i,k,j) -ph(i,k,j-1)) +Tmpv1 +(al(i,k,j) +al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1)))

 g_dpy =g_Tmpv2
 dpy =Tmpv2

 g_Tmpv1 =(msfvy(i,j)/msfvx(i,j)) *rdy*(php(i,k,j) -php(i,k,j-1))*(rdnw(k) &
*(g_dpn(i,k+1) -g_dpn(i,k)) -.5*(g_mu(i,j-1) +g_mu(i,j))) +(msfvy(i,j) &
/msfvx(i,j)) *rdy*(g_php(i,k,j) -g_php(i,k,j-1))*(rdnw(k)*(dpn(i,k+1) &
 -dpn(i,k)) -.5*(mu(i,j-1) +mu(i,j))) 
 Tmpv1 =(msfvy(i,j)/msfvx(i,j)) *rdy*(php(i,k,j) -php(i,k,j-1))*(rdnw(k)*(dpn(i,k+1) &
 -dpn(i,k)) -.5*(mu(i,j-1) +mu(i,j)))

 g_dpy =g_dpy +g_Tmpv1
 dpy =dpy +Tmpv1

 g_Tmpv1 =cqv(i,k,j)*g_dpy +g_cqv(i,k,j)*dpy 
 Tmpv1 =cqv(i,k,j)*dpy

 g_rv_tend(i,k,j) =g_rv_tend(i,k,j) -g_Tmpv1
 rv_tend(i,k,j) =rv_tend(i,k,j) -Tmpv1

 ENDDO
 ENDDO
 ELSE

 DO K =1,ktf
 DO i =i_start,itf

 g_Tmpv1 =(alt(i,k,j) +alt(i,k,j-1))*(g_p(i,k,j) -g_p(i,k,j-1)) &
 +(g_alt(i,k,j) +g_alt(i,k,j-1))*(p(i,k,j) -p(i,k,j-1)) 
 Tmpv1 =(alt(i,k,j) +alt(i,k,j-1))*(p(i,k,j) -p(i,k,j-1))

 g_Tmpv2 =(msfvy(i,j)/msfvx(i,j)) *.5 *rdy*muv(i,j)*((g_ph(i,k+1,j) &
 -g_ph(i,k+1,j-1) +g_ph(i,k,j) -g_ph(i,k,j-1)) +g_Tmpv1 +(g_al(i,k,j) &
 +g_al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1))) +(msfvy(i,j)/msfvx(i,j)) *.5 *rdy* &
 g_muv(i,j)*((ph(i,k+1,j) -ph(i,k+1,j-1) +ph(i,k,j) -ph(i,k,j-1)) +Tmpv1 +(al(i,k, &
 j) +al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1))) 
 Tmpv2 =(msfvy(i,j)/msfvx(i,j)) *.5 *rdy*muv(i,j)*((ph(i,k+1,j) -ph(i,k+1,j-1) &
 +ph(i,k,j) -ph(i,k,j-1)) +Tmpv1 +(al(i,k,j) +al(i,k,j-1))*(pb(i,k,j)-pb(i,k,j-1)))

 g_dpy =g_Tmpv2
 dpy =Tmpv2

 g_Tmpv1 =cqv(i,k,j)*g_dpy +g_cqv(i,k,j)*dpy 
 Tmpv1 =cqv(i,k,j)*dpy

 g_rv_tend(i,k,j) =g_rv_tend(i,k,j) -g_Tmpv1
 rv_tend(i,k,j) =rv_tend(i,k,j) -Tmpv1

 ENDDO
 ENDDO
 END IF
 ENDDO

 itf =ite

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 i_start =its

 j_start =jts

 IF( (config_flags%open_xs .or. specified .or.   &
           config_flags%nested ) .and. its == ids ) i_start =its+1

 IF( (config_flags%open_xe .or. specified .or.   &
           config_flags%nested ) .and. ite == ide ) itf =itf-1

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) itf =ite

 DO j =j_start,jtf

 IF( non_hydrostatic ) THEN

 k =1

 DO i =i_start,itf

 g_dpn(i,k) =.5*(cf1*(g_p(i-1,k,j) +g_p(i,k,j)) +cf2*(g_p(i-1,k+1,j) &
 +g_p(i,k+1,j)) +cf3*(g_p(i-1,k+2,j) +g_p(i,k+2,j)))
 dpn(i,k) =.5*(cf1*(p(i-1,k,j) +p(i,k,j)) +cf2*(p(i-1,k+1,j) +p(i,k+1,j)) &
 +cf3*(p(i-1,k+2,j) +p(i,k+2,j)))

 g_dpn(i,kde) =0.0
 dpn(i,kde) =0.

 ENDDO

 IF(top_lid) THEN

 DO i =i_start,itf

 g_dpn(i,kde) =.5*(cf1*(g_p(i-1,kde-1,j) +g_p(i,kde-1,j)) +cf2*(g_p(i-1, &
 kde-2,j) +g_p(i,kde-2,j)) +cf3*(g_p(i-1,kde-3,j) +g_p(i,kde-3,j)))
 dpn(i,kde) =.5*(cf1*(p(i-1,kde-1,j) +p(i,kde-1,j)) +cf2*(p(i-1,kde-2,j) &
 +p(i,kde-2,j)) +cf3*(p(i-1,kde-3,j) +p(i,kde-3,j)))

 ENDDO
 ENDIF

 DO k =2,ktf
 DO i =i_start,itf

 g_dpn(i,k) =.5*(fnm(k)*(g_p(i-1,k,j) +g_p(i,k,j)) +fnp(k)*(g_p(i-1,k-1,j) &
 +g_p(i,k-1,j)))
 dpn(i,k) =.5*(fnm(k)*(p(i-1,k,j) +p(i,k,j)) +fnp(k)*(p(i-1,k-1,j) +p(i,k-1,j)))

 ENDDO
 ENDDO

 DO K =1,ktf
 DO i =i_start,itf

 g_Tmpv1 =(alt(i,k,j) +alt(i-1,k,j))*(g_p(i,k,j) -g_p(i-1,k,j)) &
 +(g_alt(i,k,j) +g_alt(i-1,k,j))*(p(i,k,j) -p(i-1,k,j)) 
 Tmpv1 =(alt(i,k,j) +alt(i-1,k,j))*(p(i,k,j) -p(i-1,k,j))

 g_Tmpv2 =(msfux(i,j)/msfuy(i,j)) *.5 *rdx*muu(i,j)*((g_ph(i,k+1,j) &
 -g_ph(i-1,k+1,j) +g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv1 +(g_al(i,k,j) &
 +g_al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j))) +(msfux(i,j)/msfuy(i,j)) *.5 *rdx* &
 g_muu(i,j)*((ph(i,k+1,j) -ph(i-1,k+1,j) +ph(i,k,j) -ph(i-1,k,j)) +Tmpv1 +(al(i,k, &
 j) +al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j))) 
 Tmpv2 =(msfux(i,j)/msfuy(i,j)) *.5 *rdx*muu(i,j)*((ph(i,k+1,j) -ph(i-1,k+1,j) &
 +ph(i,k,j) -ph(i-1,k,j)) +Tmpv1 +(al(i,k,j) +al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j)))

 g_dpx =g_Tmpv2
 dpx =Tmpv2

 g_Tmpv1 =(msfux(i,j)/msfuy(i,j)) *rdx*(php(i,k,j) -php(i-1,k,j))*(rdnw(k) &
*(g_dpn(i,k+1) -g_dpn(i,k)) -.5*(g_mu(i-1,j) +g_mu(i,j))) +(msfux(i,j) &
/msfuy(i,j)) *rdx*(g_php(i,k,j) -g_php(i-1,k,j))*(rdnw(k)*(dpn(i,k+1) &
 -dpn(i,k)) -.5*(mu(i-1,j) +mu(i,j))) 
 Tmpv1 =(msfux(i,j)/msfuy(i,j)) *rdx*(php(i,k,j) -php(i-1,k,j))*(rdnw(k)*(dpn(i,k+1) &
 -dpn(i,k)) -.5*(mu(i-1,j) +mu(i,j)))

 g_dpx =g_dpx +g_Tmpv1
 dpx =dpx +Tmpv1

 g_Tmpv1 =cqu(i,k,j)*g_dpx +g_cqu(i,k,j)*dpx 
 Tmpv1 =cqu(i,k,j)*dpx

 g_ru_tend(i,k,j) =g_ru_tend(i,k,j) -g_Tmpv1
 ru_tend(i,k,j) =ru_tend(i,k,j) -Tmpv1

 ENDDO
 ENDDO
 ELSE

 DO K =1,ktf
 DO i =i_start,itf

 g_Tmpv1 =(alt(i,k,j) +alt(i-1,k,j))*(g_p(i,k,j) -g_p(i-1,k,j)) &
 +(g_alt(i,k,j) +g_alt(i-1,k,j))*(p(i,k,j) -p(i-1,k,j)) 
 Tmpv1 =(alt(i,k,j) +alt(i-1,k,j))*(p(i,k,j) -p(i-1,k,j))

 g_Tmpv2 =(msfux(i,j)/msfuy(i,j)) *.5 *rdx*muu(i,j)*((g_ph(i,k+1,j) &
 -g_ph(i-1,k+1,j) +g_ph(i,k,j) -g_ph(i-1,k,j)) +g_Tmpv1 +(g_al(i,k,j) &
 +g_al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j))) +(msfux(i,j)/msfuy(i,j)) *.5 *rdx* &
 g_muu(i,j)*((ph(i,k+1,j) -ph(i-1,k+1,j) +ph(i,k,j) -ph(i-1,k,j)) +Tmpv1 +(al(i,k, &
 j) +al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j))) 
 Tmpv2 =(msfux(i,j)/msfuy(i,j)) *.5 *rdx*muu(i,j)*((ph(i,k+1,j) -ph(i-1,k+1,j) &
 +ph(i,k,j) -ph(i-1,k,j)) +Tmpv1 +(al(i,k,j) +al(i-1,k,j))*(pb(i,k,j)-pb(i-1,k,j)))

 g_dpx =g_Tmpv2
 dpx =Tmpv2

 g_Tmpv1 =cqu(i,k,j)*g_dpx +g_cqu(i,k,j)*dpx 
 Tmpv1 =cqu(i,k,j)*dpx

 g_ru_tend(i,k,j) =g_ru_tend(i,k,j) -g_Tmpv1
 ru_tend(i,k,j) =ru_tend(i,k,j) -Tmpv1

 ENDDO
 ENDDO
 END IF
 ENDDO

 END SUBROUTINE g_horizontal_pressure_gradient

 SUBROUTINE g_pg_buoy_w(rw_tend,g_rw_tend,p,g_p,cqw,g_cqw,mu,g_mu,mub, &
 rdnw,rdn,g,msftx,msfty,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts, &
 jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5,g_Tmpv5
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: p,g_p
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: cqw,g_cqw
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: rw_tend,g_rw_tend
 REAL,DIMENSION(ims:ime,jms:jme) :: mub,mu,g_mu,msftx,msfty
 REAL,DIMENSION(kms:kme) :: rdnw,rdn
 REAL :: g
 INTEGER :: itf,jtf,i,j,k
 REAL :: cq1,g_cq1,cq2,g_cq2

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 DO j =jts,jtf

 k =kde

 DO i =its,itf

 g_cq1 =-1.*(g_cqw(i,k-1,j))/((1. +cqw(i,k-1,j))*(1. +cqw(i,k-1,j)))
 cq1 =1./(1. +cqw(i,k-1,j))

 g_Tmpv1 =cqw(i,k-1,j)*g_cq1 +g_cqw(i,k-1,j)*cq1 
 Tmpv1 =cqw(i,k-1,j)*cq1

 g_cq2 =g_Tmpv1
 cq2 =Tmpv1

 g_Tmpv1 =cq1*2.*rdnw(k-1)*(-g_p(i,k-1,j)) +g_cq1*2.*rdnw(k-1)*(-p(i,k-1,j)) 
 Tmpv1 =cq1*2.*rdnw(k-1)*(-p(i,k-1,j))

 g_rw_tend(i,k,j) =g_rw_tend(i,k,j) +(1./msfty(i,j)) *g*(g_Tmpv1 -g_mu(i, &
 j) -g_cq2*mub(i,j))
 rw_tend(i,k,j) =rw_tend(i,k,j) +(1./msfty(i,j)) *g*(Tmpv1 -mu(i,j) -cq2*mub(i,j))

 ENDDO

 DO k =2,kde-1
 DO i =its,itf

 g_cq1 =-1.*(g_cqw(i,k,j))/((1. +cqw(i,k,j))*(1. +cqw(i,k,j)))
 cq1 =1./(1. +cqw(i,k,j))

 g_Tmpv1 =cqw(i,k,j)*g_cq1 +g_cqw(i,k,j)*cq1 
 Tmpv1 =cqw(i,k,j)*cq1

 g_cq2 =g_Tmpv1
 cq2 =Tmpv1

 g_cqw(i,k,j) =g_cq1
 cqw(i,k,j) =cq1

 g_Tmpv1 =cq1*rdn(k)*(g_p(i,k,j) -g_p(i,k-1,j)) +g_cq1*rdn(k)*(p(i,k,j) &
 -p(i,k-1,j)) 
 Tmpv1 =cq1*rdn(k)*(p(i,k,j) -p(i,k-1,j))

 g_rw_tend(i,k,j) =g_rw_tend(i,k,j) +(1./msfty(i,j)) *g*(g_Tmpv1 -g_mu(i, &
 j) -g_cq2*mub(i,j))
 rw_tend(i,k,j) =rw_tend(i,k,j) +(1./msfty(i,j)) *g*(Tmpv1 -mu(i,j) -cq2*mub(i,j))

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_pg_buoy_w

! Revised by Ning Pan, 2010-07-21
! SUBROUTINE g_w_damp(rw_tend,g_rw_tend,max_vert_cfl,g_max_vert_cfl, &
! max_horiz_cfl,g_max_horiz_cfl,u,g_u,v,g_v,ww,g_ww,w,g_w,mut,g_mut, &
 SUBROUTINE g_w_damp(rw_tend,g_rw_tend,max_vert_cfl, &
 max_horiz_cfl,u,g_u,v,g_v,ww,g_ww,w,g_w,mut,g_mut, &
 rdnw,rdx,rdy,msfux,msfuy,msfvx,msfvy,dt,config_flags,ids,ide,jds,jde,kds,kde,ims,ime, &
 jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 USE module_llxy
 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: u,g_u,v,g_v,ww,g_ww,w,g_w
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: rw_tend,g_rw_tend
! Revised by Ning Pan, 2010-07-21
! REAL :: max_vert_cfl,g_max_vert_cfl
! REAL :: max_horiz_cfl,g_max_horiz_cfl
 REAL :: max_vert_cfl
 REAL :: max_horiz_cfl
 REAL :: horiz_cfl,g_horiz_cfl
 REAL,DIMENSION(ims:ime,jms:jme) :: mut,g_mut
 REAL,DIMENSION(kms:kme) :: rdnw
 REAL :: dt
 REAL :: rdx,rdy
 REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy
 REAL,DIMENSION(ims:ime,jms:jme) :: msfvx,msfvy
! Revised by Ning Pan, 2010-07-21
! REAL :: vert_cfl,g_vert_cfl,cf_n,g_cf_n,cf_d,g_cf_d,maxdub,g_maxdub, &
! maxdeta,g_maxdeta
 REAL :: vert_cfl,g_vert_cfl,cf_n,g_cf_n,cf_d,g_cf_d,maxdub, &
 maxdeta
 INTEGER :: itf,jtf,i,j,k,maxi,maxj,maxk
 INTEGER :: some
 CHARACTER*512 :: temp
 CHARACTER (LEN=256) :: time_str
 CHARACTER (LEN=256) :: grid_str
 integer :: total
! Revised by Ning Pan, 2010-07-21
! REAL :: msfuxt,g_msfuxt,msfxffl,g_msfxffl
 REAL :: msfuxt,g_msfuxt,msfxffl,g_msfxffl

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 some =0

! g_max_vert_cfl =0.0  ! Remarked by Ning Pan, 2010-07-21
 max_vert_cfl =0.

! g_max_horiz_cfl =0.0  ! Remarked by Ning Pan, 2010-07-21
 max_horiz_cfl =0.

 total =0

 IF(config_flags%map_proj == PROJ_CASSINI ) THEN

!PRINT*, 'DELETED FOR COMPILING BY WALLS' ! Remarked by Ning Pan, 2010-07-21
!STOP  ! Remarked by Ning Pan, 2010-07-21
!g_msfxffl =-1.0*(-g_config_flags%fft_filter_lat*degrad*sin(config_flags%fft_fil &
!ter_lat*degrad))/(cos(config_flags%fft_filter_lat*degrad)*cos(config_flags%fft_filter &
!_lat*degrad))
 msfxffl =1.0/cos(config_flags%fft_filter_lat*degrad)

 END IF

 IF( config_flags%w_damping == 1 ) THEN

 DO j =jts,jtf
 DO k =2,kde-1
 DO i =its,itf
#if 1

 IF(config_flags%map_proj == PROJ_CASSINI ) THEN

! g_msfuxt =(0.0 +g_msfxffl -(0.0 -g_msfxffl)*sign(1.0, msfux(i,j) -(msfxffl)))*0.5  ! Remarked by Ning Pan, 2010-07-21
 msfuxt =min(msfux(i,j),msfxffl)

 ELSE

! g_msfuxt =0.0  ! Remarked by Ning Pan, 2010-07-21
 msfuxt =msfux(i,j)

 END IF

 g_Tmpv1 =(g_ww(i,k,j)*mut(i,j) -g_mut(i,j)*ww(i,k,j))/(mut(i,j)*mut(i,j)) 
 Tmpv1 =ww(i,k,j)/mut(i,j)

 g_vert_cfl =sign(1.0, Tmpv1*rdnw(k)*dt)*g_Tmpv1*rdnw(k)*dt
 vert_cfl =abs(Tmpv1*rdnw(k)*dt)

 IF( vert_cfl > max_vert_cfl ) THEN

! g_max_vert_cfl =g_vert_cfl  ! Remarked by Ning Pan, 2010-07-21
 max_vert_cfl =vert_cfl

 maxi =i

 maxj =j

 maxk =k

! g_maxdub =g_w(i,k,j)  ! Remarked by Ning Pan, 2010-07-21
 maxdub =w(i,k,j)

! g_maxdeta =0.0  ! Remarked by Ning Pan, 2010-07-21
 maxdeta =-1./rdnw(k)

 ENDIF

! Revised by Ning Pan, 2010-07-21
! g_Tmpv1 =u(i,k,j)*rdx*g_msfuxt +g_u(i,k,j)*rdx*msfuxt 
 g_Tmpv1 =g_u(i,k,j)*rdx*msfuxt 
 Tmpv1 =u(i,k,j)*rdx*msfuxt

 g_horiz_cfl =(sign(1.0, Tmpv1*dt)*g_Tmpv1*dt +sign(1.0, v(i,k,j)*rdy*msfvy(i,j) &
*dt)*g_v(i,k,j)*rdy*msfvy(i,j)*dt +(sign(1.0, Tmpv1*dt)*g_Tmpv1*dt -sign(1.0, &
 v(i,k,j)*rdy*msfvy(i,j)*dt)*g_v(i,k,j)*rdy*msfvy(i,j)*dt)*sign(1.0, abs(Tmpv1*dt) &
 -(abs(v(i,k,j)*rdy*msfvy(i,j)*dt))))*0.5
 horiz_cfl =max(abs(Tmpv1*dt),abs(v(i,k,j)*rdy*msfvy(i,j)*dt))

 IF(horiz_cfl > max_horiz_cfl) THEN

! g_max_horiz_cfl =g_horiz_cfl  ! Remarked by Ning Pan, 2010-07-21
 max_horiz_cfl =horiz_cfl

 endif

 IF(vert_cfl .gt. w_beta) THEN
#else

 g_cf_n =sign(1.0, ww(i,k,j)*rdnw(k)*dt)*g_ww(i,k,j)*rdnw(k)*dt
 cf_n =abs(ww(i,k,j)*rdnw(k)*dt)

 g_cf_d =sign(1.0, mut(i,j))*g_mut(i,j)
 cf_d =abs(mut(i,j))

 IF(cf_n .gt. cf_d*w_beta ) THEN
#endif

 WRITE (temp,*) i,j,k,' vert_cfl,w,d(eta)=',vert_cfl,w(i,k,j),-1./rdnw(k)
!This line is fail to be recognized
            CALL wrf_debug ( 100 , TRIM(temp) )

 if( vert_cfl > 2. ) some =some+1

 g_Tmpv1 =sign(1., w(i,k,j)) *w_alpha*(vert_cfl -w_beta)*g_mut(i,j) &
 +sign(1., w(i,k,j)) *w_alpha*(g_vert_cfl)*mut(i,j) 
 Tmpv1 =sign(1., w(i,k,j)) *w_alpha*(vert_cfl -w_beta)*mut(i,j)

 g_rw_tend(i,k,j) =g_rw_tend(i,k,j) -g_Tmpv1
 rw_tend(i,k,j) =rw_tend(i,k,j) -Tmpv1

 endif
 ENDDO
 ENDDO
 ENDDO
 ELSE
! Remark all the computation of perturbation because this part (w_damping=0) 
!   is just for print (w_damping=0). Ning Pan, 2010-07-21 
 DO j =jts,jtf
 DO k =2,kde-1
 DO i =its,itf
#if 1

 IF(config_flags%map_proj == PROJ_CASSINI ) THEN

! g_msfuxt =(0.0 +g_msfxffl -(0.0 -g_msfxffl)*sign(1.0, msfux(i,j) -(msfxffl)))*0.5 
 msfuxt =min(msfux(i,j),msfxffl)

 ELSE

! g_msfuxt =0.0
 msfuxt =msfux(i,j)

 END IF

! g_Tmpv1 =(g_ww(i,k,j)*mut(i,j) -g_mut(i,j)*ww(i,k,j))/(mut(i,j)*mut(i,j)) 
 Tmpv1 =ww(i,k,j)/mut(i,j)

! g_vert_cfl =sign(1.0, Tmpv1*rdnw(k)*dt)*g_Tmpv1*rdnw(k)*dt
 vert_cfl =abs(Tmpv1*rdnw(k)*dt)

 IF( vert_cfl > max_vert_cfl ) THEN

! g_max_vert_cfl =g_vert_cfl  ! Remarked by Ning Pan, 2010-07-21
 max_vert_cfl =vert_cfl

 maxi =i

 maxj =j

 maxk =k

! g_maxdub =g_w(i,k,j)
 maxdub =w(i,k,j)

! g_maxdeta =0.0
 maxdeta =-1./rdnw(k)

 ENDIF

! g_Tmpv1 =u(i,k,j)*rdx*g_msfuxt +g_u(i,k,j)*rdx*msfuxt 
 Tmpv1 =u(i,k,j)*rdx*msfuxt

! g_horiz_cfl =(sign(1.0, Tmpv1*dt)*g_Tmpv1*dt +sign(1.0, v(i,k,j)*rdy*msfvy(i,j) &
!*dt)*g_v(i,k,j)*rdy*msfvy(i,j)*dt +(sign(1.0, Tmpv1*dt)*g_Tmpv1*dt -sign(1.0, &
! v(i,k,j)*rdy*msfvy(i,j)*dt)*g_v(i,k,j)*rdy*msfvy(i,j)*dt)*sign(1.0, abs(Tmpv1*dt) &
! -(abs(v(i,k,j)*rdy*msfvy(i,j)*dt))))*0.5
 horiz_cfl =max(abs(Tmpv1*dt),abs(v(i,k,j)*rdy*msfvy(i,j)*dt))

 IF(horiz_cfl > max_horiz_cfl) THEN

! g_max_horiz_cfl =g_horiz_cfl
 max_horiz_cfl =horiz_cfl

 endif

 IF(vert_cfl .gt. w_beta) THEN
#else

! g_cf_n =sign(1.0, ww(i,k,j)*rdnw(k)*dt)*g_ww(i,k,j)*rdnw(k)*dt
 cf_n =abs(ww(i,k,j)*rdnw(k)*dt)

! g_cf_d =sign(1.0, mut(i,j))*g_mut(i,j)
 cf_d =abs(mut(i,j))

 IF(cf_n .gt. cf_d*w_beta ) THEN
#endif

 WRITE (temp,*) i,j,k,' vert_cfl,w,d(eta)=',vert_cfl,w(i,k,j),-1./rdnw(k)
!This line is fail to be recognized
            CALL wrf_debug ( 100 , TRIM(temp) )

 if( vert_cfl > 2. ) some =some+1
  endif
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF( some .GT. 0 ) THEN
!This line is fail to be recognized
      CALL get_current_time_string( time_str )
!This line is fail to be recognized
      CALL get_current_grid_name( grid_str )

 WRITE (temp,*) some,' points exceeded cfl=2 in domain '//Trim(grid_str) &
//' at time '//Trim(time_str)//' hours'
!This line is fail to be recognized
      CALL wrf_debug ( 0 , TRIM(temp) )

!REVISED BY WALLS
! WRITE (temp,*) 'MAX AT i,j,k: ',maxi,maxj,maxk,' vert_cfl,w,d(eta) &
!=',max_vert_cfl,maxdub,maxdeta
!This line is fail to be recognized
      CALL wrf_debug ( 0 , TRIM(temp) )
 ENDIF

 END SUBROUTINE g_w_damp

 SUBROUTINE g_horizontal_diffusion(name,field,g_field,tendency,g_tendency,mu, &
 g_mu,config_flags,msfux,msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty,khdif,xkmhd, &
 g_xkmhd,rdx,rdy,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 CHARACTER (LEN=1) :: name
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,xkmhd,g_xkmhd
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: mu,g_mu
 REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty
 REAL :: rdx,rdy,khdif

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
! Revised by Ning Pan, 2010-07-22
! REAL :: mrdx,g_mrdx,mkrdxm,g_mkrdxm,mkrdxp,g_mkrdxp,mrdy,g_mrdy,mkrdym, &
 REAL :: mrdx,mkrdxm,g_mkrdxm,mkrdxp,g_mkrdxp,mrdy,mkrdym, &
 g_mkrdym,mkrdyp,g_mkrdyp
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 IF(name .EQ. 'u') THEN

 i_start =its

 i_end =ite

 j_start =jts

 j_end =min(jte,jde-1)

 IF( config_flags%open_xs .or. specified ) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified ) i_end =min(ide-1,ite)

 IF( config_flags%open_ys .or. specified ) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified ) j_end =min(jde-2,jte)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =ite

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =(msftx(i-1,j)/msfty(i-1,j))*mu(i-1,j)*g_xkmhd(i-1,k,j) +(msftx(i-1,j) &
/msfty(i-1,j))*g_mu(i-1,j)*xkmhd(i-1,k,j) 
 Tmpv1 =(msftx(i-1,j)/msfty(i-1,j))*mu(i-1,j)*xkmhd(i-1,k,j)

 g_mkrdxm =g_Tmpv1*rdx
 mkrdxm =Tmpv1*rdx

 g_Tmpv1 =(msftx(i,j)/msfty(i,j))*mu(i,j)*g_xkmhd(i,k,j) +(msftx(i,j) &
/msfty(i,j))*g_mu(i,j)*xkmhd(i,k,j) 
 Tmpv1 =(msftx(i,j)/msfty(i,j))*mu(i,j)*xkmhd(i,k,j)

 g_mkrdxp =g_Tmpv1*rdx
 mkrdxp =Tmpv1*rdx

! g_mrdx =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdx =msfux(i,j) *msfuy(i,j) *rdx

 g_Tmpv1 =((msfuy(i,j)+msfuy(i,j-1))/(msfux(i,j)+msfux(i,j-1))) *0.25*(mu(i,j) &
 +mu(i,j-1) +mu(i-1,j-1) +mu(i-1,j))*0.25*(g_xkmhd(i,k,j) +g_xkmhd(i,k,j-1) &
 +g_xkmhd(i-1,k,j-1) +g_xkmhd(i-1,k,j)) +((msfuy(i,j)+msfuy(i,j-1))/(msfux(i,j) &
+msfux(i,j-1))) *0.25*(g_mu(i,j) +g_mu(i,j-1) +g_mu(i-1,j-1) +g_mu(i-1, &
 j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) +xkmhd(i-1,k,j-1) +xkmhd(i-1,k,j)) 
 Tmpv1 =((msfuy(i,j)+msfuy(i,j-1))/(msfux(i,j)+msfux(i,j-1))) *0.25*(mu(i,j) &
 +mu(i,j-1) +mu(i-1,j-1) +mu(i-1,j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) &
 +xkmhd(i-1,k,j-1) +xkmhd(i-1,k,j))

 g_mkrdym =g_Tmpv1*rdy
 mkrdym =Tmpv1*rdy

 g_Tmpv1 =((msfuy(i,j)+msfuy(i,j+1))/(msfux(i,j)+msfux(i,j+1))) *0.25*(mu(i,j) &
 +mu(i,j+1) +mu(i-1,j+1) +mu(i-1,j))*0.25*(g_xkmhd(i,k,j) +g_xkmhd(i,k,j+1) &
 +g_xkmhd(i-1,k,j+1) +g_xkmhd(i-1,k,j)) +((msfuy(i,j)+msfuy(i,j+1))/(msfux(i,j) &
+msfux(i,j+1))) *0.25*(g_mu(i,j) +g_mu(i,j+1) +g_mu(i-1,j+1) +g_mu(i-1, &
 j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j+1) +xkmhd(i-1,k,j+1) +xkmhd(i-1,k,j)) 
 Tmpv1 =((msfuy(i,j)+msfuy(i,j+1))/(msfux(i,j)+msfux(i,j+1))) *0.25*(mu(i,j) &
 +mu(i,j+1) +mu(i-1,j+1) +mu(i-1,j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j+1) &
 +xkmhd(i-1,k,j+1) +xkmhd(i-1,k,j))

 g_mkrdyp =g_Tmpv1*rdy
 mkrdyp =Tmpv1*rdy

! g_mrdy =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdy =msfux(i,j) *msfuy(i,j) *rdy

 g_Tmpv1 =mkrdxp*(g_field(i+1,k,j) -g_field(i,k,j)) +g_mkrdxp*(field(i+1, &
 k,j) -field(i,k,j)) 
 Tmpv1 =mkrdxp*(field(i+1,k,j) -field(i,k,j))

 g_Tmpv2 =mkrdxm*(g_field(i,k,j) -g_field(i-1,k,j)) +g_mkrdxm*(field(i,k, &
 j) -field(i-1,k,j)) 
 Tmpv2 =mkrdxm*(field(i,k,j) -field(i-1,k,j))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2) +g_mrdx*(Tmpv1 -Tmpv2) 
 g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2)
 Tmpv3 =mrdx*(Tmpv1 -Tmpv2)

 g_Tmpv4 =mkrdyp*(g_field(i,k,j+1) -g_field(i,k,j)) +g_mkrdyp*(field(i,k, &
 j+1) -field(i,k,j)) 
 Tmpv4 =mkrdyp*(field(i,k,j+1) -field(i,k,j))

 g_Tmpv5 =mkrdym*(g_field(i,k,j) -g_field(i,k,j-1)) +g_mkrdym*(field(i,k, &
 j) -field(i,k,j-1)) 
 Tmpv5 =mkrdym*(field(i,k,j) -field(i,k,j-1))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5) +g_mrdy*(Tmpv4 -Tmpv5) 
 g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5)
 Tmpv6 =mrdy*(Tmpv4 -Tmpv5)

 g_tendency(i,k,j) =g_tendency(i,k,j) +(g_Tmpv3 +g_Tmpv6)
 tendency(i,k,j) =tendency(i,k,j) +(Tmpv3 +Tmpv6)

 ENDDO
 ENDDO
 ENDDO
 ELSE IF(name .EQ. 'v') THEN

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =jte

 IF( config_flags%open_xs .or. specified ) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified ) i_end =min(ide-2,ite)

 IF( config_flags%open_ys .or. specified ) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified ) j_end =min(jde-1,jte)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =min(ite,ide-1)

 IF( config_flags%polar ) j_start =max(jds+1,jts)

 IF( config_flags%polar ) j_end =min(jde-1,jte)

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =((msfvx(i,j)+msfvx(i-1,j))/(msfvy(i,j)+msfvy(i-1,j))) *0.25*(mu(i,j) &
 +mu(i,j-1) +mu(i-1,j-1) +mu(i-1,j))*0.25*(g_xkmhd(i,k,j) +g_xkmhd(i,k,j-1) &
 +g_xkmhd(i-1,k,j-1) +g_xkmhd(i-1,k,j)) +((msfvx(i,j)+msfvx(i-1,j))/(msfvy(i,j) &
+msfvy(i-1,j))) *0.25*(g_mu(i,j) +g_mu(i,j-1) +g_mu(i-1,j-1) +g_mu(i-1, &
 j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) +xkmhd(i-1,k,j-1) +xkmhd(i-1,k,j)) 
 Tmpv1 =((msfvx(i,j)+msfvx(i-1,j))/(msfvy(i,j)+msfvy(i-1,j))) *0.25*(mu(i,j) &
 +mu(i,j-1) +mu(i-1,j-1) +mu(i-1,j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) &
 +xkmhd(i-1,k,j-1) +xkmhd(i-1,k,j))

 g_mkrdxm =g_Tmpv1*rdx
 mkrdxm =Tmpv1*rdx

 g_Tmpv1 =((msfvx(i,j)+msfvx(i+1,j))/(msfvy(i,j)+msfvy(i+1,j))) *0.25*(mu(i,j) &
 +mu(i,j-1) +mu(i+1,j-1) +mu(i+1,j))*0.25*(g_xkmhd(i,k,j) +g_xkmhd(i,k,j-1) &
 +g_xkmhd(i+1,k,j-1) +g_xkmhd(i+1,k,j)) +((msfvx(i,j)+msfvx(i+1,j))/(msfvy(i,j) &
+msfvy(i+1,j))) *0.25*(g_mu(i,j) +g_mu(i,j-1) +g_mu(i+1,j-1) +g_mu(i+1, &
 j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) +xkmhd(i+1,k,j-1) +xkmhd(i+1,k,j)) 
 Tmpv1 =((msfvx(i,j)+msfvx(i+1,j))/(msfvy(i,j)+msfvy(i+1,j))) *0.25*(mu(i,j) &
 +mu(i,j-1) +mu(i+1,j-1) +mu(i+1,j))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) &
 +xkmhd(i+1,k,j-1) +xkmhd(i+1,k,j))

 g_mkrdxp =g_Tmpv1*rdx
 mkrdxp =Tmpv1*rdx

! g_mrdx =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdx =msfvx(i,j) *msfvy(i,j) *rdx

 g_mkrdym =(msfty(i,j-1)/msftx(i,j-1))*g_xkmhd(i,k,j-1)*rdy
 mkrdym =(msfty(i,j-1)/msftx(i,j-1))*xkmhd(i,k,j-1)*rdy

 g_mkrdyp =(msfty(i,j)/msftx(i,j))*g_xkmhd(i,k,j)*rdy
 mkrdyp =(msfty(i,j)/msftx(i,j))*xkmhd(i,k,j)*rdy

! g_mrdy =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdy =msfvx(i,j) *msfvy(i,j) *rdy

 g_Tmpv1 =mkrdxp*(g_field(i+1,k,j) -g_field(i,k,j)) +g_mkrdxp*(field(i+1, &
 k,j) -field(i,k,j)) 
 Tmpv1 =mkrdxp*(field(i+1,k,j) -field(i,k,j))

 g_Tmpv2 =mkrdxm*(g_field(i,k,j) -g_field(i-1,k,j)) +g_mkrdxm*(field(i,k, &
 j) -field(i-1,k,j)) 
 Tmpv2 =mkrdxm*(field(i,k,j) -field(i-1,k,j))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2) +g_mrdx*(Tmpv1 -Tmpv2) 
 g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2)
 Tmpv3 =mrdx*(Tmpv1 -Tmpv2)

 g_Tmpv4 =mkrdyp*(g_field(i,k,j+1) -g_field(i,k,j)) +g_mkrdyp*(field(i,k, &
 j+1) -field(i,k,j)) 
 Tmpv4 =mkrdyp*(field(i,k,j+1) -field(i,k,j))

 g_Tmpv5 =mkrdym*(g_field(i,k,j) -g_field(i,k,j-1)) +g_mkrdym*(field(i,k, &
 j) -field(i,k,j-1)) 
 Tmpv5 =mkrdym*(field(i,k,j) -field(i,k,j-1))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5) +g_mrdy*(Tmpv4 -Tmpv5) 
 g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5)
 Tmpv6 =mrdy*(Tmpv4 -Tmpv5)

 g_tendency(i,k,j) =g_tendency(i,k,j) +(g_Tmpv3 +g_Tmpv6)
 tendency(i,k,j) =tendency(i,k,j) +(Tmpv3 +Tmpv6)

 ENDDO
 ENDDO
 ENDDO
 ELSE IF(name .EQ. 'w') THEN

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 IF( config_flags%open_xs .or. specified ) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified ) i_end =min(ide-2,ite)

 IF( config_flags%open_ys .or. specified ) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified ) j_end =min(jde-2,jte)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =min(ite,ide-1)

 DO j =j_start,j_end
 DO k =kts+1,ktf
 DO i =i_start,i_end

 g_Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.25*(mu(i,j) +mu(i-1,j) +mu(i,j) +mu(i-1,j)) &
*0.25*(g_xkmhd(i,k,j) +g_xkmhd(i-1,k,j) +g_xkmhd(i,k-1,j) +g_xkmhd(i-1,k- &
 1,j)) +(msfux(i,j)/msfuy(i,j)) *0.25*(g_mu(i,j) +g_mu(i-1,j) +g_mu(i,j) &
 +g_mu(i-1,j))*0.25*(xkmhd(i,k,j) +xkmhd(i-1,k,j) +xkmhd(i,k-1,j) +xkmhd(i-1,k-1,j)) 
 Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.25*(mu(i,j) +mu(i-1,j) +mu(i,j) +mu(i-1,j)) &
*0.25*(xkmhd(i,k,j) +xkmhd(i-1,k,j) +xkmhd(i,k-1,j) +xkmhd(i-1,k-1,j))

 g_mkrdxm =g_Tmpv1*rdx
 mkrdxm =Tmpv1*rdx

 g_Tmpv1 =(msfux(i+1,j)/msfuy(i+1,j)) *0.25*(mu(i+1,j) +mu(i,j) +mu(i+1,j) &
 +mu(i,j))*0.25*(g_xkmhd(i+1,k,j) +g_xkmhd(i,k,j) +g_xkmhd(i+1,k-1,j) &
 +g_xkmhd(i,k-1,j)) +(msfux(i+1,j)/msfuy(i+1,j)) *0.25*(g_mu(i+1,j) &
 +g_mu(i,j) +g_mu(i+1,j) +g_mu(i,j))*0.25*(xkmhd(i+1,k,j) +xkmhd(i,k,j) &
 +xkmhd(i+1,k-1,j) +xkmhd(i,k-1,j)) 
 Tmpv1 =(msfux(i+1,j)/msfuy(i+1,j)) *0.25*(mu(i+1,j) +mu(i,j) +mu(i+1,j) +mu(i,j)) &
*0.25*(xkmhd(i+1,k,j) +xkmhd(i,k,j) +xkmhd(i+1,k-1,j) +xkmhd(i,k-1,j))

 g_mkrdxp =g_Tmpv1*rdx
 mkrdxp =Tmpv1*rdx

! g_mrdx =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdx =msftx(i,j) *msfty(i,j) *rdx

 g_Tmpv1 =(msfvy(i,j) *msfvx_inv(i,j)) *0.25*(mu(i,j) +mu(i,j-1) +mu(i,j) &
 +mu(i,j-1))*0.25*(g_xkmhd(i,k,j) +g_xkmhd(i,k,j-1) +g_xkmhd(i,k-1,j) &
 +g_xkmhd(i,k-1,j-1)) +(msfvy(i,j) *msfvx_inv(i,j)) *0.25*(g_mu(i,j) &
 +g_mu(i,j-1) +g_mu(i,j) +g_mu(i,j-1))*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) &
 +xkmhd(i,k-1,j) +xkmhd(i,k-1,j-1)) 
 Tmpv1 =(msfvy(i,j) *msfvx_inv(i,j)) *0.25*(mu(i,j) +mu(i,j-1) +mu(i,j) +mu(i,j-1)) &
*0.25*(xkmhd(i,k,j) +xkmhd(i,k,j-1) +xkmhd(i,k-1,j) +xkmhd(i,k-1,j-1))

 g_mkrdym =g_Tmpv1*rdy
 mkrdym =Tmpv1*rdy

 g_Tmpv1 =(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.25*(mu(i,j+1) +mu(i,j) +mu(i,j+1) &
 +mu(i,j))*0.25*(g_xkmhd(i,k,j+1) +g_xkmhd(i,k,j) +g_xkmhd(i,k-1,j+1) &
 +g_xkmhd(i,k-1,j)) +(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.25*(g_mu(i,j+1) &
 +g_mu(i,j) +g_mu(i,j+1) +g_mu(i,j))*0.25*(xkmhd(i,k,j+1) +xkmhd(i,k,j) &
 +xkmhd(i,k-1,j+1) +xkmhd(i,k-1,j)) 
 Tmpv1 =(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.25*(mu(i,j+1) +mu(i,j) +mu(i,j+1) &
 +mu(i,j))*0.25*(xkmhd(i,k,j+1) +xkmhd(i,k,j) +xkmhd(i,k-1,j+1) +xkmhd(i,k-1,j))

 g_mkrdyp =g_Tmpv1*rdy
 mkrdyp =Tmpv1*rdy

! g_mrdy =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdy =msftx(i,j) *msfty(i,j) *rdy

 g_Tmpv1 =mkrdxp*(g_field(i+1,k,j) -g_field(i,k,j)) +g_mkrdxp*(field(i+1, &
 k,j) -field(i,k,j)) 
 Tmpv1 =mkrdxp*(field(i+1,k,j) -field(i,k,j))

 g_Tmpv2 =mkrdxm*(g_field(i,k,j) -g_field(i-1,k,j)) +g_mkrdxm*(field(i,k, &
 j) -field(i-1,k,j)) 
 Tmpv2 =mkrdxm*(field(i,k,j) -field(i-1,k,j))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2) +g_mrdx*(Tmpv1 -Tmpv2) 
 g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2)
 Tmpv3 =mrdx*(Tmpv1 -Tmpv2)

 g_Tmpv4 =mkrdyp*(g_field(i,k,j+1) -g_field(i,k,j)) +g_mkrdyp*(field(i,k, &
 j+1) -field(i,k,j)) 
 Tmpv4 =mkrdyp*(field(i,k,j+1) -field(i,k,j))

 g_Tmpv5 =mkrdym*(g_field(i,k,j) -g_field(i,k,j-1)) +g_mkrdym*(field(i,k, &
 j) -field(i,k,j-1)) 
 Tmpv5 =mkrdym*(field(i,k,j) -field(i,k,j-1))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5) +g_mrdy*(Tmpv4 -Tmpv5) 
 g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5)
 Tmpv6 =mrdy*(Tmpv4 -Tmpv5)

 g_tendency(i,k,j) =g_tendency(i,k,j) +(g_Tmpv3 +g_Tmpv6)
 tendency(i,k,j) =tendency(i,k,j) +(Tmpv3 +Tmpv6)

 ENDDO
 ENDDO
 ENDDO
 ELSE

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 IF( config_flags%open_xs .or. specified ) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified ) i_end =min(ide-2,ite)

 IF( config_flags%open_ys .or. specified ) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified ) j_end =min(jde-2,jte)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =min(ite,ide-1)

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i-1,k,j)) &
*0.5*(g_mu(i,j) +g_mu(i-1,j)) +(msfux(i,j)/msfuy(i,j)) *0.5*(g_xkmhd(i,k,j) &
 +g_xkmhd(i-1,k,j))*0.5*(mu(i,j) +mu(i-1,j)) 
 Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i-1,k,j))*0.5*(mu(i,j) +mu(i-1,j))

 g_mkrdxm =g_Tmpv1*rdx
 mkrdxm =Tmpv1*rdx

 g_Tmpv1 =(msfux(i+1,j)/msfuy(i+1,j)) *0.5*(xkmhd(i+1,k,j) +xkmhd(i,k,j)) &
*0.5*(g_mu(i+1,j) +g_mu(i,j)) +(msfux(i+1,j)/msfuy(i+1,j)) *0.5*(g_xkmhd(i+ &
 1,k,j) +g_xkmhd(i,k,j))*0.5*(mu(i+1,j) +mu(i,j)) 
 Tmpv1 =(msfux(i+1,j)/msfuy(i+1,j)) *0.5*(xkmhd(i+1,k,j) +xkmhd(i,k,j)) &
*0.5*(mu(i+1,j) +mu(i,j))

 g_mkrdxp =g_Tmpv1*rdx
 mkrdxp =Tmpv1*rdx

! g_mrdx =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdx =msftx(i,j) *msfty(i,j) *rdx

 g_Tmpv1 =(msfvy(i,j) *msfvx_inv(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i,k,j-1)) &
*0.5*(g_mu(i,j) +g_mu(i,j-1)) +(msfvy(i,j) *msfvx_inv(i,j)) *0.5*(g_xkmhd(i, &
 k,j) +g_xkmhd(i,k,j-1))*0.5*(mu(i,j) +mu(i,j-1)) 
 Tmpv1 =(msfvy(i,j) *msfvx_inv(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i,k,j-1))*0.5*(mu(i,j) &
 +mu(i,j-1))

 g_mkrdym =g_Tmpv1*rdy
 mkrdym =Tmpv1*rdy

 g_Tmpv1 =(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.5*(xkmhd(i,k,j+1) +xkmhd(i,k,j)) &
*0.5*(g_mu(i,j+1) +g_mu(i,j)) +(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.5*( &
 g_xkmhd(i,k,j+1) +g_xkmhd(i,k,j))*0.5*(mu(i,j+1) +mu(i,j)) 
 Tmpv1 =(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.5*(xkmhd(i,k,j+1) +xkmhd(i,k,j)) &
*0.5*(mu(i,j+1) +mu(i,j))

 g_mkrdyp =g_Tmpv1*rdy
 mkrdyp =Tmpv1*rdy

! g_mrdy =0.0  ! Remarked by Ning Pan, 2010-07-22
 mrdy =msftx(i,j) *msfty(i,j) *rdy

 g_Tmpv1 =mkrdxp*(g_field(i+1,k,j) -g_field(i,k,j)) +g_mkrdxp*(field(i+1, &
 k,j) -field(i,k,j)) 
 Tmpv1 =mkrdxp*(field(i+1,k,j) -field(i,k,j))

 g_Tmpv2 =mkrdxm*(g_field(i,k,j) -g_field(i-1,k,j)) +g_mkrdxm*(field(i,k, &
 j) -field(i-1,k,j)) 
 Tmpv2 =mkrdxm*(field(i,k,j) -field(i-1,k,j))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2) +g_mrdx*(Tmpv1 -Tmpv2) 
 g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2)
 Tmpv3 =mrdx*(Tmpv1 -Tmpv2)

 g_Tmpv4 =mkrdyp*(g_field(i,k,j+1) -g_field(i,k,j)) +g_mkrdyp*(field(i,k, &
 j+1) -field(i,k,j)) 
 Tmpv4 =mkrdyp*(field(i,k,j+1) -field(i,k,j))

 g_Tmpv5 =mkrdym*(g_field(i,k,j) -g_field(i,k,j-1)) +g_mkrdym*(field(i,k, &
 j) -field(i,k,j-1)) 
 Tmpv5 =mkrdym*(field(i,k,j) -field(i,k,j-1))

! Revised by Ning Pan, 2010-07-22
! g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5) +g_mrdy*(Tmpv4 -Tmpv5) 
 g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5)
 Tmpv6 =mrdy*(Tmpv4 -Tmpv5)

 g_tendency(i,k,j) =g_tendency(i,k,j) +(g_Tmpv3 +g_Tmpv6)
 tendency(i,k,j) =tendency(i,k,j) +(Tmpv3 +Tmpv6)

 ENDDO
 ENDDO
 ENDDO
 ENDIF

 END SUBROUTINE g_horizontal_diffusion

 SUBROUTINE g_horizontal_diffusion_3dmp(name,field,g_field,tendency, &
 g_tendency,mu,g_mu,config_flags,base_3d,msfux,msfuy,msfvx,msfvx_inv,msfvy, &
 msftx,msfty,khdif,xkmhd,g_xkmhd,rdx,rdy,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme, &
 kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 CHARACTER (LEN=1) :: name
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,xkmhd,g_xkmhd,base_3d
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: mu,g_mu
 REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvx_inv,msfvy,msftx,msfty
 REAL :: rdx,rdy,khdif

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
! Revised by Ning Pan, 2010-07-23 
! REAL :: mrdx,g_mrdx,mkrdxm,g_mkrdxm,mkrdxp,g_mkrdxp,mrdy,g_mrdy,mkrdym, &
 REAL :: mrdx,mkrdxm,g_mkrdxm,mkrdxp,g_mkrdxp,mrdy,mkrdym, &
 g_mkrdym,mkrdyp,g_mkrdyp
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 IF( config_flags%open_xs .or. specified ) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified ) i_end =min(ide-2,ite)

 IF( config_flags%open_ys .or. specified ) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified ) j_end =min(jde-2,jte)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =min(ite,ide-1)

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i-1,k,j)) &
*0.5*(g_mu(i,j) +g_mu(i-1,j)) +(msfux(i,j)/msfuy(i,j)) *0.5*(g_xkmhd(i,k,j) &
 +g_xkmhd(i-1,k,j))*0.5*(mu(i,j) +mu(i-1,j)) 
 Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i-1,k,j))*0.5*(mu(i,j) +mu(i-1,j))

 g_mkrdxm =g_Tmpv1*rdx
 mkrdxm =Tmpv1*rdx

 g_Tmpv1 =(msfux(i+1,j)/msfuy(i+1,j)) *0.5*(xkmhd(i+1,k,j) +xkmhd(i,k,j)) &
*0.5*(g_mu(i+1,j) +g_mu(i,j)) +(msfux(i+1,j)/msfuy(i+1,j)) *0.5*(g_xkmhd(i+ &
 1,k,j) +g_xkmhd(i,k,j))*0.5*(mu(i+1,j) +mu(i,j)) 
 Tmpv1 =(msfux(i+1,j)/msfuy(i+1,j)) *0.5*(xkmhd(i+1,k,j) +xkmhd(i,k,j)) &
*0.5*(mu(i+1,j) +mu(i,j))

 g_mkrdxp =g_Tmpv1*rdx
 mkrdxp =Tmpv1*rdx

! g_mrdx =0.0  ! Remarked by Ning Pan, 2010-07-23
 mrdx =msftx(i,j) *msfty(i,j) *rdx

 g_Tmpv1 =(msfvy(i,j) *msfvx_inv(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i,k,j-1)) &
*0.5*(g_mu(i,j) +g_mu(i,j-1)) +(msfvy(i,j) *msfvx_inv(i,j)) *0.5*(g_xkmhd(i, &
 k,j) +g_xkmhd(i,k,j-1))*0.5*(mu(i,j) +mu(i,j-1)) 
 Tmpv1 =(msfvy(i,j) *msfvx_inv(i,j)) *0.5*(xkmhd(i,k,j) +xkmhd(i,k,j-1))*0.5*(mu(i,j) &
 +mu(i,j-1))

 g_mkrdym =g_Tmpv1*rdy
 mkrdym =Tmpv1*rdy

 g_Tmpv1 =(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.5*(xkmhd(i,k,j+1) +xkmhd(i,k,j)) &
*0.5*(g_mu(i,j+1) +g_mu(i,j)) +(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.5*( &
 g_xkmhd(i,k,j+1) +g_xkmhd(i,k,j))*0.5*(mu(i,j+1) +mu(i,j)) 
 Tmpv1 =(msfvy(i,j+1) *msfvx_inv(i,j+1)) *0.5*(xkmhd(i,k,j+1) +xkmhd(i,k,j)) &
*0.5*(mu(i,j+1) +mu(i,j))

 g_mkrdyp =g_Tmpv1*rdy
 mkrdyp =Tmpv1*rdy

! g_mrdy =0.0  ! Remarked by Ning Pan, 2010-07-23
 mrdy =msftx(i,j) *msfty(i,j) *rdy

 g_Tmpv1 =mkrdxp*(g_field(i+1,k,j) -g_field(i,k,j)) +g_mkrdxp*(field(i+1, &
 k,j) -field(i,k,j) -base_3d(i+1,k,j) +base_3d(i,k,j)) 
 Tmpv1 =mkrdxp*(field(i+1,k,j) -field(i,k,j) -base_3d(i+1,k,j) +base_3d(i,k,j))

 g_Tmpv2 =mkrdxm*(g_field(i,k,j) -g_field(i-1,k,j)) +g_mkrdxm*(field(i,k, &
 j) -field(i-1,k,j) -base_3d(i,k,j) +base_3d(i-1,k,j)) 
 Tmpv2 =mkrdxm*(field(i,k,j) -field(i-1,k,j) -base_3d(i,k,j) +base_3d(i-1,k,j))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2) +g_mrdx*(Tmpv1 -Tmpv2) 
 g_Tmpv3 =mrdx*(g_Tmpv1 -g_Tmpv2)
 Tmpv3 =mrdx*(Tmpv1 -Tmpv2)

 g_Tmpv4 =mkrdyp*(g_field(i,k,j+1) -g_field(i,k,j)) +g_mkrdyp*(field(i,k, &
 j+1) -field(i,k,j) -base_3d(i,k,j+1) +base_3d(i,k,j)) 
 Tmpv4 =mkrdyp*(field(i,k,j+1) -field(i,k,j) -base_3d(i,k,j+1) +base_3d(i,k,j))

 g_Tmpv5 =mkrdym*(g_field(i,k,j) -g_field(i,k,j-1)) +g_mkrdym*(field(i,k, &
 j) -field(i,k,j-1) -base_3d(i,k,j) +base_3d(i,k,j-1)) 
 Tmpv5 =mkrdym*(field(i,k,j) -field(i,k,j-1) -base_3d(i,k,j) +base_3d(i,k,j-1))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5) +g_mrdy*(Tmpv4 -Tmpv5) 
 g_Tmpv6 =mrdy*(g_Tmpv4 -g_Tmpv5)
 Tmpv6 =mrdy*(Tmpv4 -Tmpv5)

 g_tendency(i,k,j) =g_tendency(i,k,j) +(g_Tmpv3 +g_Tmpv6)
 tendency(i,k,j) =tendency(i,k,j) +(Tmpv3 +Tmpv6)

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_horizontal_diffusion_3dmp

 SUBROUTINE g_vertical_diffusion(name,field,g_field,tendency,g_tendency, &
 config_flags,alt,g_alt,mut,g_mut,rdn,rdnw,kvdif,ids,ide,jds,jde,kds,kde,ims, &
 ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 CHARACTER (LEN=1) :: name
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,alt,g_alt
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: mut,g_mut
 REAL,DIMENSION(kms:kme) :: rdn,rdnw
 REAL :: kvdif

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
! REAL,DIMENSION(its:ite,jts:jte) :: vfluxm,g_vfluxm,vfluxp,g_vfluxp,zz,g_zz  ! Remarked by Ning Pan, 2010-07-23
 REAL,DIMENSION(its:ite,0:kte+1) :: vflux,g_vflux
! REAL :: rdz,g_rdz  ! Remarked by Ning Pan, 2010-07-23
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 IF(name .EQ. 'w') THEN

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 DO j =j_start,j_end
 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =(kvdif/alt(i,k,j))*rdnw(k)*(g_field(i,k+1,j) -g_field(i,k,j)) &
 +(-kvdif*g_alt(i,k,j)/(alt(i,k,j)*alt(i,k,j)))*rdnw(k)*(field(i,k+1,j) -field(i,k,j)) 
 Tmpv1 =(kvdif/alt(i,k,j))*rdnw(k)*(field(i,k+1,j) -field(i,k,j))

 g_vflux(i,k) =g_Tmpv1
 vflux(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO i =i_start,i_end

 g_vflux(i,ktf) =0.0
 vflux(i,ktf) =0.

 ENDDO

 DO k =kts+1,ktf
 DO i =i_start,i_end

 g_Tmpv1 =((-rdn(k) *g *g*g_mut(i,j)/(mut(i,j)*mut(i,j)))*(0.5*(alt(i,k,j) &
 +alt(i,k-1,j))) -(0.5*(g_alt(i,k,j) +g_alt(i,k-1,j)))*rdn(k) *g *g/mut(i,j)) &
/((0.5*(alt(i,k,j) +alt(i,k-1,j)))*(0.5*(alt(i,k,j) +alt(i,k-1,j)))) 
 Tmpv1 =rdn(k) *g *g/mut(i,j)/(0.5*(alt(i,k,j) +alt(i,k-1,j)))

 g_Tmpv2 =Tmpv1*(g_vflux(i,k) -g_vflux(i,k-1)) +g_Tmpv1*(vflux(i,k) -vflux(i,k-1)) 
 Tmpv2 =Tmpv1*(vflux(i,k) -vflux(i,k-1))

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_Tmpv2
 tendency(i,k,j) =tendency(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO
 ELSE IF(name .EQ. 'm') THEN

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 DO j =j_start,j_end
 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =kvdif *rdn(k+1)/(0.5*(alt(i,k,j) +alt(i,k+1,j)))*(g_field(i,k+1,j) &
 -g_field(i,k,j)) +(-kvdif *rdn(k+1)*(0.5*(g_alt(i,k,j) +g_alt(i,k+1,j))) &
/((0.5*(alt(i,k,j) +alt(i,k+1,j)))*(0.5*(alt(i,k,j) +alt(i,k+1,j)))))*(field(i,k+1,j) &
 -field(i,k,j)) 
 Tmpv1 =kvdif *rdn(k+1)/(0.5*(alt(i,k,j) +alt(i,k+1,j)))*(field(i,k+1,j) -field(i,k,j))

 g_vflux(i,k) =g_Tmpv1
 vflux(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO i =i_start,i_end

 g_vflux(i,0) =g_vflux(i,1)
 vflux(i,0) =vflux(i,1)

 ENDDO

 DO i =i_start,i_end

 g_vflux(i,ktf) =0.0
 vflux(i,ktf) =0.

 ENDDO

 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =((-g *g*g_mut(i,j)/(mut(i,j)*mut(i,j)))*alt(i,k,j) -g_alt(i,k,j) &
*g *g/mut(i,j))/(alt(i,k,j)*alt(i,k,j)) 
 Tmpv1 =g *g/mut(i,j)/alt(i,k,j)

 g_Tmpv2 =Tmpv1*rdnw(k)*(g_vflux(i,k) -g_vflux(i,k-1)) +g_Tmpv1*rdnw(k) &
*(vflux(i,k) -vflux(i,k-1)) 
 Tmpv2 =Tmpv1*rdnw(k)*(vflux(i,k) -vflux(i,k-1))

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_Tmpv2
 tendency(i,k,j) =tendency(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO
 ENDIF

 END SUBROUTINE g_vertical_diffusion

 SUBROUTINE g_vertical_diffusion_mp(field,g_field,tendency,g_tendency, &
 config_flags,base,alt,g_alt,mut,g_mut,rdn,rdnw,kvdif,ids,ide,jds,jde,kds,kde, &
 ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,alt,g_alt
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: mut,g_mut
 REAL,DIMENSION(kms:kme) :: rdn,rdnw,base
 REAL :: kvdif

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
 REAL,DIMENSION(its:ite,0:kte+1) :: vflux,g_vflux
 REAL :: rdz,g_rdz
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 DO j =j_start,j_end
 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =kvdif *rdn(k+1)/(0.5*(alt(i,k,j) +alt(i,k+1,j)))*(g_field(i,k+1,j) &
 -g_field(i,k,j)) +(-kvdif *rdn(k+1)*(0.5*(g_alt(i,k,j) +g_alt(i,k+1,j))) &
/((0.5*(alt(i,k,j) +alt(i,k+1,j)))*(0.5*(alt(i,k,j) +alt(i,k+1,j)))))*(field(i,k+1,j) &
 -field(i,k,j) -base(k+1) +base(k)) 
 Tmpv1 =kvdif *rdn(k+1)/(0.5*(alt(i,k,j) +alt(i,k+1,j)))*(field(i,k+1,j) &
 -field(i,k,j) -base(k+1) +base(k))

 g_vflux(i,k) =g_Tmpv1
 vflux(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO i =i_start,i_end

 g_vflux(i,0) =g_vflux(i,1)
 vflux(i,0) =vflux(i,1)

 ENDDO

 DO i =i_start,i_end

 g_vflux(i,ktf) =0.0
 vflux(i,ktf) =0.

 ENDDO

 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =((-g *g*g_mut(i,j)/(mut(i,j)*mut(i,j)))*alt(i,k,j) -g_alt(i,k,j) &
*g *g/mut(i,j))/(alt(i,k,j)*alt(i,k,j)) 
 Tmpv1 =g *g/mut(i,j)/alt(i,k,j)

 g_Tmpv2 =Tmpv1*rdnw(k)*(g_vflux(i,k) -g_vflux(i,k-1)) +g_Tmpv1*rdnw(k) &
*(vflux(i,k) -vflux(i,k-1)) 
 Tmpv2 =Tmpv1*rdnw(k)*(vflux(i,k) -vflux(i,k-1))

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_Tmpv2
 tendency(i,k,j) =tendency(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_vertical_diffusion_mp

 SUBROUTINE g_vertical_diffusion_3dmp(field,g_field,tendency,g_tendency, &
 config_flags,base_3d,alt,g_alt,mut,g_mut,rdn,rdnw,kvdif,ids,ide,jds,jde,kds, &
 kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,alt,g_alt,base_3d
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: mut,g_mut
 REAL,DIMENSION(kms:kme) :: rdn,rdnw
 REAL :: kvdif

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
 REAL,DIMENSION(its:ite,0:kte+1) :: vflux,g_vflux
! REAL :: rdz,g_rdz  ! Remarked by Ning Pan, 2010-07-23
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 DO j =j_start,j_end
 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =kvdif *rdn(k+1)/(0.5*(alt(i,k,j) +alt(i,k+1,j)))*(g_field(i,k+1,j) &
 -g_field(i,k,j)) +(-kvdif *rdn(k+1)*(0.5*(g_alt(i,k,j) +g_alt(i,k+1,j))) &
/((0.5*(alt(i,k,j) +alt(i,k+1,j)))*(0.5*(alt(i,k,j) +alt(i,k+1,j)))))*(field(i,k+1,j) &
 -field(i,k,j) -base_3d(i,k+1,j) +base_3d(i,k,j)) 
 Tmpv1 =kvdif *rdn(k+1)/(0.5*(alt(i,k,j) +alt(i,k+1,j)))*(field(i,k+1,j) &
 -field(i,k,j) -base_3d(i,k+1,j) +base_3d(i,k,j))

 g_vflux(i,k) =g_Tmpv1
 vflux(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO i =i_start,i_end

 g_vflux(i,0) =g_vflux(i,1)
 vflux(i,0) =vflux(i,1)

 ENDDO

 DO i =i_start,i_end

 g_vflux(i,ktf) =0.0
 vflux(i,ktf) =0.

 ENDDO

 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =((-g *g*g_mut(i,j)/(mut(i,j)*mut(i,j)))*alt(i,k,j) -g_alt(i,k,j) &
*g *g/mut(i,j))/(alt(i,k,j)*alt(i,k,j)) 
 Tmpv1 =g *g/mut(i,j)/alt(i,k,j)

 g_Tmpv2 =Tmpv1*rdnw(k)*(g_vflux(i,k) -g_vflux(i,k-1)) +g_Tmpv1*rdnw(k) &
*(vflux(i,k) -vflux(i,k-1)) 
 Tmpv2 =Tmpv1*rdnw(k)*(vflux(i,k) -vflux(i,k-1))

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_Tmpv2
 tendency(i,k,j) =tendency(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_vertical_diffusion_3dmp

 SUBROUTINE g_vertical_diffusion_u(field,g_field,tendency,g_tendency, &
 config_flags,u_base,alt,g_alt,muu,g_muu,rdn,rdnw,kvdif,ids,ide,jds,jde,kds,kde, &
 ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,alt,g_alt
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: muu,g_muu
 REAL,DIMENSION(kms:kme) :: rdn,rdnw,u_base
 REAL :: kvdif

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
 REAL,DIMENSION(its:ite,0:kte+1) :: vflux,g_vflux
 REAL :: rdz,g_rdz,zz,g_zz
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =ite

 j_start =jts

 j_end =min(jte,jde-1)

 IF( config_flags%open_xs .or. specified ) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified ) i_end =min(ide-1,ite)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =ite

 DO j =j_start,j_end
 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =kvdif *rdn(k+1)/(0.25*(alt(i,k,j) +alt(i-1,k,j) +alt(i,k+1,j) &
 +alt(i-1,k+1,j)))*(g_field(i,k+1,j) -g_field(i,k,j)) +(-kvdif *rdn(k+1) &
*(0.25*(g_alt(i,k,j) +g_alt(i-1,k,j) +g_alt(i,k+1,j) +g_alt(i-1,k+1,j))) &
/((0.25*(alt(i,k,j) +alt(i-1,k,j) +alt(i,k+1,j) +alt(i-1,k+1,j)))*(0.25*(alt(i,k,j) &
 +alt(i-1,k,j) +alt(i,k+1,j) +alt(i-1,k+1,j)))))*(field(i,k+1,j) -field(i,k,j) &
 -u_base(k+1) +u_base(k)) 
 Tmpv1 =kvdif *rdn(k+1)/(0.25*(alt(i,k,j) +alt(i-1,k,j) +alt(i,k+1,j) +alt(i-1,k+1, &
 j)))*(field(i,k+1,j) -field(i,k,j) -u_base(k+1) +u_base(k))

 g_vflux(i,k) =g_Tmpv1
 vflux(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO i =i_start,i_end

 g_vflux(i,0) =g_vflux(i,1)
 vflux(i,0) =vflux(i,1)

 ENDDO

 DO i =i_start,i_end

 g_vflux(i,ktf) =0.0
 vflux(i,ktf) =0.

 ENDDO

 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =((-g *g *rdnw(k)*g_muu(i,j)/(muu(i,j)*muu(i,j)))*(0.5*(alt(i-1,k,j) &
 +alt(i,k,j))) -(0.5*(g_alt(i-1,k,j) +g_alt(i,k,j)))*g *g *rdnw(k)/muu(i,j)) &
/((0.5*(alt(i-1,k,j) +alt(i,k,j)))*(0.5*(alt(i-1,k,j) +alt(i,k,j)))) 
 Tmpv1 =g *g *rdnw(k)/muu(i,j)/(0.5*(alt(i-1,k,j) +alt(i,k,j)))

 g_Tmpv2 =Tmpv1*(g_vflux(i,k) -g_vflux(i,k-1)) +g_Tmpv1*(vflux(i,k) -vflux(i,k-1)) 
 Tmpv2 =Tmpv1*(vflux(i,k) -vflux(i,k-1))

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_Tmpv2
 tendency(i,k,j) =tendency(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_vertical_diffusion_u

 SUBROUTINE g_vertical_diffusion_v(field,g_field,tendency,g_tendency, &
 config_flags,v_base,alt,g_alt,muv,g_muv,rdn,rdnw,kvdif,ids,ide,jds,jde,kds,kde, &
 ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field,alt,g_alt
 REAL,DIMENSION(kms:kme) :: rdn,rdnw,v_base
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,jms:jme) :: muv,g_muv
 REAL :: kvdif

 INTEGER :: i,j,k,itf,jtf,ktf,jm1
 INTEGER :: i_start,i_end,j_start,j_end
 REAL,DIMENSION(its:ite,0:kte+1) :: vflux,g_vflux
! REAL :: rdz,g_rdz,zz,g_zz  ! Remarked by Ning Pan, 2010-07-23
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 IF( config_flags%open_ys .or. specified ) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified ) j_end =min(jde-1,jte)

 DO j =j_start,j_end

 jm1 =j-1

 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =kvdif *rdn(k+1)/(0.25*(alt(i,k,j) +alt(i,k,jm1) +alt(i,k+1,j) &
 +alt(i,k+1,jm1)))*(g_field(i,k+1,j) -g_field(i,k,j)) +(-kvdif *rdn(k+1) &
*(0.25*(g_alt(i,k,j) +g_alt(i,k,jm1) +g_alt(i,k+1,j) +g_alt(i,k+1,jm1))) &
/((0.25*(alt(i,k,j) +alt(i,k,jm1) +alt(i,k+1,j) +alt(i,k+1,jm1)))*(0.25*(alt(i,k,j) &
 +alt(i,k,jm1) +alt(i,k+1,j) +alt(i,k+1,jm1)))))*(field(i,k+1,j) -field(i,k,j) &
 -v_base(k+1) +v_base(k)) 
 Tmpv1 =kvdif *rdn(k+1)/(0.25*(alt(i,k,j) +alt(i,k,jm1) +alt(i,k+1,j) +alt(i,k+1, &
 jm1)))*(field(i,k+1,j) -field(i,k,j) -v_base(k+1) +v_base(k))

 g_vflux(i,k) =g_Tmpv1
 vflux(i,k) =Tmpv1

 ENDDO
 ENDDO

 DO i =i_start,i_end

 g_vflux(i,0) =g_vflux(i,1)
 vflux(i,0) =vflux(i,1)

 ENDDO

 DO i =i_start,i_end

 g_vflux(i,ktf) =0.0
 vflux(i,ktf) =0.

 ENDDO

 DO k =kts,ktf-1
 DO i =i_start,i_end

 g_Tmpv1 =((-g *g *rdnw(k)*g_muv(i,j)/(muv(i,j)*muv(i,j)))*(0.5*(alt(i,k,jm1) &
 +alt(i,k,j))) -(0.5*(g_alt(i,k,jm1) +g_alt(i,k,j)))*g *g *rdnw(k)/muv(i,j)) &
/((0.5*(alt(i,k,jm1) +alt(i,k,j)))*(0.5*(alt(i,k,jm1) +alt(i,k,j)))) 
 Tmpv1 =g *g *rdnw(k)/muv(i,j)/(0.5*(alt(i,k,jm1) +alt(i,k,j)))

 g_Tmpv2 =Tmpv1*(g_vflux(i,k) -g_vflux(i,k-1)) +g_Tmpv1*(vflux(i,k) -vflux(i,k-1)) 
 Tmpv2 =Tmpv1*(vflux(i,k) -vflux(i,k-1))

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_Tmpv2
 tendency(i,k,j) =tendency(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_vertical_diffusion_v

SUBROUTINE g_calculate_full ( rfield, g_rfield, rfieldb, rfieldp, g_rfieldp, &
                              ids, ide, jds, jde, kds, kde, &
                              ims, ime, jms, jme, kms, kme, &
                              its, ite, jts, jte, kts, kte )

   IMPLICIT NONE
   
   ! Input data
   
   INTEGER ,      INTENT(IN   ) :: ids, ide, jds, jde, kds, kde, &
                                   ims, ime, jms, jme, kms, kme, &
                                   its, ite, jts, jte, kts, kte 
   
   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(IN   ) :: g_rfieldp
   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(IN   ) :: rfieldb, &
                                                                      rfieldp

   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(OUT  ) :: g_rfield
   REAL , DIMENSION( ims:ime , kms:kme , jms:jme ) , INTENT(OUT  ) :: rfield
   
   ! Local indices.
   
   INTEGER :: i, j, k, itf, jtf, ktf
   
!<DESCRIPTION>
!
!  calculate_full
!  calculates full 3D field from pertubation and base field.
!
!</DESCRIPTION>

   itf=MIN(ite,ide-1)
   jtf=MIN(jte,jde-1)
   ktf=MIN(kte,kde-1)

   DO j=jts,jtf
   DO k=kts,ktf
   DO i=its,itf
      g_rfield(i,k,j)=g_rfieldp(i,k,j)
      rfield(i,k,j)=rfieldb(i,k,j)+rfieldp(i,k,j)
   ENDDO
   ENDDO
   ENDDO

END SUBROUTINE g_calculate_full

 SUBROUTINE g_coriolis(ru,g_ru,rv,g_rv,rw,g_rw,ru_tend,g_ru_tend, &
 rv_tend,g_rv_tend,rw_tend,g_rw_tend,config_flags,msftx,msfty,msfux,msfuy,msfvx, &
 msfvy,f,e,sina,cosa,fzm,fzp,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite, &
 jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6,Tmpv7,g_Tmpv7,Tmpv8,g_Tmpv8,Tmpv9,g_Tmpv9
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru_tend,g_ru_tend,rv_tend,g_rv_tend, &
 rw_tend,g_rw_tend
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru,g_ru,rv,g_rv,rw,g_rw
 REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty
 REAL,DIMENSION(ims:ime,jms:jme) :: f,e,sina,cosa
 REAL,DIMENSION(kms:kme) :: fzm,fzp

 INTEGER :: i,j,k,ktf
 INTEGER :: i_start,i_end,j_start,j_end
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =ite

 IF( config_flags%open_xs .or. specified .or.   &
        config_flags%nested) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified .or.   &
        config_flags%nested) i_end =min(ide-1,ite)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =ite

 DO j =jts,min(jte,jde-1)
 DO k =kts,ktf
 DO i =i_start,i_end

 g_ru_tend(i,k,j) =g_ru_tend(i,k,j) +(msfux(i,j)/msfuy(i,j)) *0.5 *(f(i,j) &
+f(i-1,j)) *0.25*(g_rv(i-1,k,j+1) +g_rv(i,k,j+1) +g_rv(i-1,k,j) &
 +g_rv(i,k,j)) -0.5 *(e(i,j)+e(i-1,j)) *0.5 *(cosa(i,j)+cosa(i-1,j)) &
 *0.25*(g_rw(i-1,k+1,j) +g_rw(i-1,k,j) +g_rw(i,k+1,j) +g_rw(i,k,j))
 ru_tend(i,k,j) =ru_tend(i,k,j) +(msfux(i,j)/msfuy(i,j)) *0.5 *(f(i,j)+f(i-1,j)) &
 *0.25*(rv(i-1,k,j+1) +rv(i,k,j+1) +rv(i-1,k,j) +rv(i,k,j)) -0.5 *(e(i,j)+e(i-1,j)) &
 *0.5 *(cosa(i,j)+cosa(i-1,j)) *0.25*(rw(i-1,k+1,j) +rw(i-1,k,j) +rw(i,k+1,j) +rw(i,k,j))

 ENDDO
 ENDDO

! boundary loops for coriolis not needed for open bdy  (commented out 20100611 XZ`
! IF( (config_flags%open_xs) .and. (its == ids) ) THEN

! DO k =kts,ktf

! g_ru_tend(its,k,j) =g_ru_tend(its,k,j) +(msfux(its,j)/msfuy(its,j)) &
! *0.5 *(f(its,j)+f(its,j)) *0.25*(g_rv(its,k,j+1) +g_rv(its,k,j+1) &
! +g_rv(its,k,j) +g_rv(its,k,j)) -0.5 *(e(its,j)+e(its,j)) *0.5 *(cosa(its,j) &
!+cosa(its,j)) *0.25*(g_rw(its,k+1,j) +g_rw(its,k,j) +g_rw(its,k+1,j) &
! +g_rw(its,k,j))
! ru_tend(its,k,j) =ru_tend(its,k,j) +(msfux(its,j)/msfuy(its,j)) *0.5 *(f(its,j) &
!+f(its,j)) *0.25*(rv(its,k,j+1) +rv(its,k,j+1) +rv(its,k,j) +rv(its,k,j)) &
! -0.5 *(e(its,j)+e(its,j)) *0.5 *(cosa(its,j)+cosa(its,j)) *0.25*(rw(its,k+1,j) &
! +rw(its,k,j) +rw(its,k+1,j) +rw(its,k,j))
 
! ENDDO
! ENDIF

! IF( (config_flags%open_xe) .and. (ite == ide) ) THEN

! DO k =kts,ktf

! g_ru_tend(ite,k,j) =g_ru_tend(ite,k,j) +(msfux(ite,j)/msfuy(ite,j)) &
! *0.5 *(f(ite-1,j)+f(ite-1,j)) *0.25*(g_rv(ite-1,k,j+1) +g_rv(ite-1,k,j+1) &
! +g_rv(ite-1,k,j) +g_rv(ite-1,k,j)) -0.5 *(e(ite-1,j)+e(ite-1,j)) &
! *0.5 *(cosa(ite-1,j)+cosa(ite-1,j)) *0.25*(g_rw(ite-1,k+1,j) +g_rw(ite-1,k,j) &
! +g_rw(ite-1,k+1,j) +g_rw(ite-1,k,j))
! ru_tend(ite,k,j) =ru_tend(ite,k,j) +(msfux(ite,j)/msfuy(ite,j)) *0.5 *(f(ite-1,j) &
!+f(ite-1,j)) *0.25*(rv(ite-1,k,j+1) +rv(ite-1,k,j+1) +rv(ite-1,k,j) +rv(ite-1,k,j)) &
! -0.5 *(e(ite-1,j)+e(ite-1,j)) *0.5 *(cosa(ite-1,j)+cosa(ite-1,j)) *0.25*(rw(ite-1,k+ &
! 1,j) +rw(ite-1,k,j) +rw(ite-1,k+1,j) +rw(ite-1,k,j))
!
! ENDDO
! ENDIF
 ENDDO

 j_start =jts

 j_end =jte

 IF( config_flags%open_ys .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) j_end =min(jde-1,jte)

! boundary loops for coriolis not needed for open bdy  (commented out 20100611 XZ)
! IF( (config_flags%open_ys) .and. (jts == jds) ) THEN

! DO k =kts,ktf
! DO i =its,min(ide-1,ite)

! g_rv_tend(i,k,jts) =g_rv_tend(i,k,jts) -(msfvy(i,jts)/msfvx(i,jts)) &
! *0.5 *(f(i,jts)+f(i,jts)) *0.25*(g_ru(i,k,jts) +g_ru(i+1,k,jts) +g_ru(i,k, &
! jts) +g_ru(i+1,k,jts)) +(msfvy(i,jts)/msfvx(i,jts)) *0.5 *(e(i,jts)+e(i,jts)) &
! *0.5 *(sina(i,jts)+sina(i,jts)) *0.25*(g_rw(i,k+1,jts) +g_rw(i,k,jts) &
! +g_rw(i,k+1,jts) +g_rw(i,k,jts))
! rv_tend(i,k,jts) =rv_tend(i,k,jts) -(msfvy(i,jts)/msfvx(i,jts)) *0.5 *(f(i,jts) &
!+f(i,jts)) *0.25*(ru(i,k,jts) +ru(i+1,k,jts) +ru(i,k,jts) +ru(i+1,k,jts)) &
! +(msfvy(i,jts)/msfvx(i,jts)) *0.5 *(e(i,jts)+e(i,jts)) *0.5 *(sina(i,jts) &
!+sina(i,jts)) *0.25*(rw(i,k+1,jts) +rw(i,k,jts) +rw(i,k+1,jts) +rw(i,k,jts))

! ENDDO
! ENDDO
! ENDIF

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =its,min(ide-1,ite)

 g_rv_tend(i,k,j) =g_rv_tend(i,k,j) -(msfvy(i,j)/msfvx(i,j)) *0.5 *(f(i,j) &
+f(i,j-1)) *0.25*(g_ru(i,k,j) +g_ru(i+1,k,j) +g_ru(i,k,j-1) +g_ru(i+1,k, &
 j-1)) +(msfvy(i,j)/msfvx(i,j)) *0.5 *(e(i,j)+e(i,j-1)) *0.5 *(sina(i,j)+sina(i,j-1)) &
 *0.25*(g_rw(i,k+1,j-1) +g_rw(i,k,j-1) +g_rw(i,k+1,j) +g_rw(i,k,j))
 rv_tend(i,k,j) =rv_tend(i,k,j) -(msfvy(i,j)/msfvx(i,j)) *0.5 *(f(i,j)+f(i,j-1)) &
 *0.25*(ru(i,k,j) +ru(i+1,k,j) +ru(i,k,j-1) +ru(i+1,k,j-1)) +(msfvy(i,j)/msfvx(i,j)) &
 *0.5 *(e(i,j)+e(i,j-1)) *0.5 *(sina(i,j)+sina(i,j-1)) *0.25*(rw(i,k+1,j-1) &
 +rw(i,k,j-1) +rw(i,k+1,j) +rw(i,k,j))

 ENDDO
 ENDDO
 ENDDO

! boundary loops for coriolis not needed for open bdy  (commented out 20100611 XZ)
! IF( (config_flags%open_ye) .and. (jte == jde) ) THEN

! DO k =kts,ktf
! DO i =its,min(ide-1,ite)

! g_rv_tend(i,k,jte) =g_rv_tend(i,k,jte) -(msfvy(i,jte)/msfvx(i,jte)) &
! *0.5 *(f(i,jte-1)+f(i,jte-1)) *0.25*(g_ru(i,k,jte-1) +g_ru(i+1,k,jte-1) &
! +g_ru(i,k,jte-1) +g_ru(i+1,k,jte-1)) +(msfvy(i,jte)/msfvx(i,jte)) &
! *0.5 *(e(i,jte-1)+e(i,jte-1)) *0.5 *(sina(i,jte-1)+sina(i,jte-1)) *0.25*(g_rw(i, &
! k+1,jte-1) +g_rw(i,k,jte-1) +g_rw(i,k+1,jte-1) +g_rw(i,k,jte-1))
! rv_tend(i,k,jte) =rv_tend(i,k,jte) -(msfvy(i,jte)/msfvx(i,jte)) *0.5 *(f(i,jte-1) &
!+f(i,jte-1)) *0.25*(ru(i,k,jte-1) +ru(i+1,k,jte-1) +ru(i,k,jte-1) +ru(i+1,k,jte-1)) &
! +(msfvy(i,jte)/msfvx(i,jte)) *0.5 *(e(i,jte-1)+e(i,jte-1)) *0.5 *(sina(i,jte-1) &
!+sina(i,jte-1)) *0.25*(rw(i,k+1,jte-1) +rw(i,k,jte-1) +rw(i,k+1,jte-1) +rw(i,k,jte-1))

! ENDDO
! ENDDO
! ENDIF

 DO j =jts,min(jte,jde-1)
 DO k =kts+1,ktf
 DO i =its,min(ite,ide-1)

 g_rw_tend(i,k,j) =g_rw_tend(i,k,j) +e(i,j)*(cosa(i,j) *0.5*(fzm(k) &
*(g_ru(i,k,j) +g_ru(i+1,k,j)) +fzp(k)*(g_ru(i,k-1,j) +g_ru(i+1,k-1,j))) &
 -(msftx(i,j)/msfty(i,j)) *sina(i,j) *0.5*(fzm(k)*(g_rv(i,k,j) +g_rv(i,k,j+1)) &
 +fzp(k)*(g_rv(i,k-1,j) +g_rv(i,k-1,j+1))))
 rw_tend(i,k,j) =rw_tend(i,k,j) +e(i,j)*(cosa(i,j) *0.5*(fzm(k)*(ru(i,k,j) &
 +ru(i+1,k,j)) +fzp(k)*(ru(i,k-1,j) +ru(i+1,k-1,j))) -(msftx(i,j)/msfty(i,j)) &
 *sina(i,j) *0.5*(fzm(k)*(rv(i,k,j) +rv(i,k,j+1)) +fzp(k)*(rv(i,k-1,j) +rv(i,k-1,j+1))))

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_coriolis

 SUBROUTINE g_perturbation_coriolis(ru_in,g_ru_in,rv_in,g_rv_in,rw,g_rw, &
 ru_tend,g_ru_tend,rv_tend,g_rv_tend,rw_tend,g_rw_tend,config_flags,u_base, &
 v_base,z_base,muu,g_muu,muv,g_muv,phb,ph,g_ph,msftx,msfty,msfux,msfuy,msfvx, &
 msfvy,f,e,sina,cosa,fzm,fzp,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite, &
 jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6,Tmpv7,g_Tmpv7,Tmpv8,g_Tmpv8,Tmpv9,g_Tmpv9
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru_tend,g_ru_tend,rv_tend,g_rv_tend, &
 rw_tend,g_rw_tend
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru_in,g_ru_in,rv_in,g_rv_in,rw, &
 g_rw,ph,g_ph,phb
 REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty
 REAL,DIMENSION(ims:ime,jms:jme) :: f,e,sina,cosa
 REAL,DIMENSION(ims:ime,jms:jme) :: muu,g_muu,muv,g_muv
 REAL,DIMENSION(kms:kme) :: fzm,fzp
 REAL,DIMENSION(kms:kme) :: u_base,v_base,z_base

 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru,g_ru,rv,g_rv
 REAL :: z_at_u,g_z_at_u,z_at_v,g_z_at_v,wkp1,g_wkp1,wk,g_wk,wkm1,g_wkm1

 INTEGER :: i,j,k,ktf
 INTEGER :: i_start,i_end,j_start,j_end
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 ktf =min(kte,kde-1)

 i_start =its

 i_end =ite

 IF( config_flags%open_xs .or. specified .or.   &
        config_flags%nested) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified .or.   &
        config_flags%nested) i_end =min(ide-1,ite)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =ite

 DO j =jts,min(jte,jde-1) +1
 DO k =kts+1,ktf-1
 DO i =i_start-1,i_end

 g_z_at_v =0.25*(g_ph(i,k,j) +g_ph(i,k+1,j) +g_ph(i,k,j-1) +g_ph(i,k+1,j-1))/g
 z_at_v =0.25*(phb(i,k,j)+phb(i,k+1,j)+phb(i,k,j-1)+phb(i,k+1,j-1) +ph(i,k,j) &
 +ph(i,k+1,j) +ph(i,k,j-1) +ph(i,k+1,j-1))/g

 g_wkp1 =(0.0 +((0.0 +g_z_at_v +(0.0 -g_z_at_v)*sign(1.0, 0. -(z_at_v - &
 z_base(k))))*0.5/(z_base(k+1)-z_base(k))) -(0.0 -((0.0 +g_z_at_v +(0.0 - &
 g_z_at_v)*sign(1.0, 0. -(z_at_v -z_base(k))))*0.5/(z_base(k+1)-z_base(k)))) &
*sign(1.0, 1. -(max(0.,z_at_v -z_base(k))/(z_base(k+1)-z_base(k)))))*0.5
 wkp1 =min(1.,max(0.,z_at_v -z_base(k))/(z_base(k+1)-z_base(k)))

!REVISED BY WALLS
!g_wkm1 =(0.0 +((0.0 +g_z_at_v +(0.0 +g_z_at_v)*sign(1.0, 0. -(z_base(k) &
! Revised by Ning Pan, 2010-07-24
! g_wkm1 =(0.0 +((0.0 +g_z_at_v +(0.0 +g_z_at_v)*sign(1.0, 0. -(z_base(k) &
! -z_at_v)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 +g_z_at_v +(0.0 + &
! g_z_at_v)*sign(1.0, 0. -(z_base(k) -z_at_v)))*0.5/(z_base(k)-z_base(k-1)))) &
!*sign(1.0,! 1. -(max(0.,z_base(k) -z_at_v)/(z_base(k)-z_base(k-1)))))*0.5
 g_wkm1 =(0.0 +((0.0 -g_z_at_v +(0.0 +g_z_at_v)*sign(1.0, 0. -(z_base(k) &
 -z_at_v)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 -g_z_at_v +(0.0 + &
 g_z_at_v)*sign(1.0, 0. -(z_base(k) -z_at_v)))*0.5/(z_base(k)-z_base(k-1)))) &
*sign(1.0, 1. -(max(0.,z_base(k) -z_at_v)/(z_base(k)-z_base(k-1)))))*0.5
 wkm1 =min(1.,max(0.,z_base(k) -z_at_v)/(z_base(k)-z_base(k-1)))

 g_wk =-g_wkp1 -g_wkm1
 wk =1. -wkp1 -wkm1

 g_Tmpv1 =muv(i,j)*(g_wkm1*v_base(k-1) +g_wk*v_base(k) +g_wkp1*v_base(k+ &
 1)) +g_muv(i,j)*(wkm1*v_base(k-1) +wk*v_base(k) +wkp1*v_base(k+1)) 
 Tmpv1 =muv(i,j)*(wkm1*v_base(k-1) +wk*v_base(k) +wkp1*v_base(k+1))

 g_rv(i,k,j) =g_rv_in(i,k,j) -g_Tmpv1
 rv(i,k,j) =rv_in(i,k,j) -Tmpv1

 ENDDO
 ENDDO
 ENDDO

 DO j =jts,min(jte,jde-1) +1
 DO i =i_start-1,i_end

 k =kts

 g_z_at_v =0.25*(g_ph(i,k,j) +g_ph(i,k+1,j) +g_ph(i,k,j-1) +g_ph(i,k+1,j-1))/g
 z_at_v =0.25*(phb(i,k,j)+phb(i,k+1,j)+phb(i,k,j-1)+phb(i,k+1,j-1) +ph(i,k,j) &
 +ph(i,k+1,j) +ph(i,k,j-1) +ph(i,k+1,j-1))/g

 g_wkp1 =(0.0 +((0.0 +g_z_at_v +(0.0 -g_z_at_v)*sign(1.0, 0. -(z_at_v - &
 z_base(k))))*0.5/(z_base(k+1)-z_base(k))) -(0.0 -((0.0 +g_z_at_v +(0.0 - &
 g_z_at_v)*sign(1.0, 0. -(z_at_v -z_base(k))))*0.5/(z_base(k+1)-z_base(k)))) &
*sign(1.0, 1. -(max(0.,z_at_v -z_base(k))/(z_base(k+1)-z_base(k)))))*0.5
 wkp1 =min(1.,max(0.,z_at_v -z_base(k))/(z_base(k+1)-z_base(k)))

 g_wk =-g_wkp1
 wk =1. -wkp1

 g_Tmpv1 =muv(i,j)*(g_wk*v_base(k) +g_wkp1*v_base(k+1)) +g_muv(i,j) &
*(wk*v_base(k) +wkp1*v_base(k+1)) 
 Tmpv1 =muv(i,j)*(wk*v_base(k) +wkp1*v_base(k+1))

 g_rv(i,k,j) =g_rv_in(i,k,j) -g_Tmpv1
 rv(i,k,j) =rv_in(i,k,j) -Tmpv1

 k =ktf

 g_z_at_v =0.25*(g_ph(i,k,j) +g_ph(i,k+1,j) +g_ph(i,k,j-1) +g_ph(i,k+1,j-1))/g
 z_at_v =0.25*(phb(i,k,j)+phb(i,k+1,j)+phb(i,k,j-1)+phb(i,k+1,j-1) +ph(i,k,j) &
 +ph(i,k+1,j) +ph(i,k,j-1) +ph(i,k+1,j-1))/g

! Revised by Ning Pan, 2010-07-24
! g_wkm1 =(0.0 +((0.0 +g_z_at_v +(0.0 +g_z_at_v)*sign(1.0, 0. -(z_base(k) &
! -z_at_v)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 +g_z_at_v +(0.0 + &
! g_z_at_v)*sign(1.0, 0. -(z_base(k) -z_at_v)))*0.5/(z_base(k)-z_base(k-1)))) &
!*sign(1.0,! 1. -(max(0.,z_base(k) -z_at_v)/(z_base(k)-z_base(k-1)))))*0.5
 g_wkm1 =(0.0 +((0.0 -g_z_at_v +(0.0 +g_z_at_v)*sign(1.0, 0. -(z_base(k) &
 -z_at_v)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 -g_z_at_v +(0.0 + &
 g_z_at_v)*sign(1.0, 0. -(z_base(k) -z_at_v)))*0.5/(z_base(k)-z_base(k-1)))) &
*sign(1.0, 1. -(max(0.,z_base(k) -z_at_v)/(z_base(k)-z_base(k-1)))))*0.5
 wkm1 =min(1.,max(0.,z_base(k) -z_at_v)/(z_base(k)-z_base(k-1)))

 g_wk =-g_wkm1
 wk =1. -wkm1

 g_Tmpv1 =muv(i,j)*(g_wkm1*v_base(k-1) +g_wk*v_base(k)) +g_muv(i,j) &
*(wkm1*v_base(k-1) +wk*v_base(k)) 
 Tmpv1 =muv(i,j)*(wkm1*v_base(k-1) +wk*v_base(k))

 g_rv(i,k,j) =g_rv_in(i,k,j) -g_Tmpv1
 rv(i,k,j) =rv_in(i,k,j) -Tmpv1

 ENDDO
 ENDDO

 DO j =jts,min(jte,jde-1)
 DO k =kts,ktf
 DO i =i_start,i_end

 g_ru_tend(i,k,j) =g_ru_tend(i,k,j) +(msfux(i,j)/msfuy(i,j)) *0.5 *(f(i,j) &
+f(i-1,j)) *0.25*(g_rv(i-1,k,j+1) +g_rv(i,k,j+1) +g_rv(i-1,k,j) &
 +g_rv(i,k,j)) -0.5 *(e(i,j)+e(i-1,j)) *0.5 *(cosa(i,j)+cosa(i-1,j)) &
 *0.25*(g_rw(i-1,k+1,j) +g_rw(i-1,k,j) +g_rw(i,k+1,j) +g_rw(i,k,j))
 ru_tend(i,k,j) =ru_tend(i,k,j) +(msfux(i,j)/msfuy(i,j)) *0.5 *(f(i,j)+f(i-1,j)) &
 *0.25*(rv(i-1,k,j+1) +rv(i,k,j+1) +rv(i-1,k,j) +rv(i,k,j)) -0.5 *(e(i,j)+e(i-1,j)) &
 *0.5 *(cosa(i,j)+cosa(i-1,j)) *0.25*(rw(i-1,k+1,j) +rw(i-1,k,j) +rw(i,k+1,j) +rw(i,k,j))

 ENDDO
 ENDDO

! boundary loops for perturbation coriolis is needed for open bdy  (20110307 XZ)
 IF( (config_flags%open_xs) .and. (its == ids) ) THEN

 DO k =kts,ktf

 g_ru_tend(its,k,j) =g_ru_tend(its,k,j) +(msfux(its,j)/msfuy(its,j)) &
 *0.5 *(f(its,j)+f(its,j)) *0.25*(g_rv(its,k,j+1) +g_rv(its,k,j+1) &
 +g_rv(its,k,j) +g_rv(its,k,j)) -0.5 *(e(its,j)+e(its,j)) *0.5 *(cosa(its,j) &
+cosa(its,j)) *0.25*(g_rw(its,k+1,j) +g_rw(its,k,j) +g_rw(its,k+1,j) &
 +g_rw(its,k,j))
 ru_tend(its,k,j) =ru_tend(its,k,j) +(msfux(its,j)/msfuy(its,j)) *0.5 *(f(its,j) &
+f(its,j)) *0.25*(rv(its,k,j+1) +rv(its,k,j+1) +rv(its,k,j) +rv(its,k,j)) &
 -0.5 *(e(its,j)+e(its,j)) *0.5 *(cosa(its,j)+cosa(its,j)) *0.25*(rw(its,k+1,j) &
 +rw(its,k,j) +rw(its,k+1,j) +rw(its,k,j))

 ENDDO
 ENDIF

 IF( (config_flags%open_xe) .and. (ite == ide) ) THEN

 DO k =kts,ktf

 g_ru_tend(ite,k,j) =g_ru_tend(ite,k,j) +(msfux(ite,j)/msfuy(ite,j)) &
 *0.5 *(f(ite-1,j)+f(ite-1,j)) *0.25*(g_rv(ite-1,k,j+1) +g_rv(ite-1,k,j+1) &
 +g_rv(ite-1,k,j) +g_rv(ite-1,k,j)) -0.5 *(e(ite-1,j)+e(ite-1,j)) &
 *0.5 *(cosa(ite-1,j)+cosa(ite-1,j)) *0.25*(g_rw(ite-1,k+1,j) +g_rw(ite-1,k,j) &
 +g_rw(ite-1,k+1,j) +g_rw(ite-1,k,j))
 ru_tend(ite,k,j) =ru_tend(ite,k,j) +(msfux(ite,j)/msfuy(ite,j)) *0.5 *(f(ite-1,j) &
+f(ite-1,j)) *0.25*(rv(ite-1,k,j+1) +rv(ite-1,k,j+1) +rv(ite-1,k,j) +rv(ite-1,k,j)) &
 -0.5 *(e(ite-1,j)+e(ite-1,j)) *0.5 *(cosa(ite-1,j)+cosa(ite-1,j)) *0.25*(rw(ite-1,k+ &
 1,j) +rw(ite-1,k,j) +rw(ite-1,k+1,j) +rw(ite-1,k,j))

 ENDDO
 ENDIF

 ENDDO

 j_start =jts

 j_end =jte

 IF( config_flags%open_ys .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) j_end =min(jde-1,jte)

 DO j =j_start-1,j_end
 DO k =kts+1,ktf-1
 DO i =its,min(ite,ide-1) +1

 g_z_at_u =0.25*(g_ph(i,k,j) +g_ph(i,k+1,j) +g_ph(i-1,k,j) +g_ph(i-1,k+1,j))/g
 z_at_u =0.25*(phb(i,k,j)+phb(i,k+1,j)+phb(i-1,k,j)+phb(i-1,k+1,j) +ph(i,k,j) &
 +ph(i,k+1,j) +ph(i-1,k,j) +ph(i-1,k+1,j))/g

 g_wkp1 =(0.0 +((0.0 +g_z_at_u +(0.0 -g_z_at_u)*sign(1.0, 0. -(z_at_u - &
 z_base(k))))*0.5/(z_base(k+1)-z_base(k))) -(0.0 -((0.0 +g_z_at_u +(0.0 - &
 g_z_at_u)*sign(1.0, 0. -(z_at_u -z_base(k))))*0.5/(z_base(k+1)-z_base(k)))) &
*sign(1.0, 1. -(max(0.,z_at_u -z_base(k))/(z_base(k+1)-z_base(k)))))*0.5
 wkp1 =min(1.,max(0.,z_at_u -z_base(k))/(z_base(k+1)-z_base(k)))

! Revised by Ning Pan, 2010-07-24
! g_wkm1 =(0.0 +((0.0 +g_z_at_u +(0.0 +g_z_at_u)*sign(1.0, 0. -(z_base(k) &
! -z_at_u)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 +g_z_at_u +(0.0 + &
! g_z_at_u)*sign(1.0, 0. -(z_base(k) -z_at_u)))*0.5/(z_base(k)-z_base(k-1)))) &
!*sign(1.0,! 1. -(max(0.,z_base(k) -z_at_u)/(z_base(k)-z_base(k-1)))))*0.5
 g_wkm1 =(0.0 +((0.0 -g_z_at_u +(0.0 +g_z_at_u)*sign(1.0, 0. -(z_base(k) &
 -z_at_u)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 -g_z_at_u +(0.0 + &
 g_z_at_u)*sign(1.0, 0. -(z_base(k) -z_at_u)))*0.5/(z_base(k)-z_base(k-1)))) &
*sign(1.0, 1. -(max(0.,z_base(k) -z_at_u)/(z_base(k)-z_base(k-1)))))*0.5
 wkm1 =min(1.,max(0.,z_base(k) -z_at_u)/(z_base(k)-z_base(k-1)))

 g_wk =-g_wkp1 -g_wkm1
 wk =1. -wkp1 -wkm1

 g_Tmpv1 =muu(i,j)*(g_wkm1*u_base(k-1) +g_wk*u_base(k) +g_wkp1*u_base(k+ &
 1)) +g_muu(i,j)*(wkm1*u_base(k-1) +wk*u_base(k) +wkp1*u_base(k+1)) 
 Tmpv1 =muu(i,j)*(wkm1*u_base(k-1) +wk*u_base(k) +wkp1*u_base(k+1))

 g_ru(i,k,j) =g_ru_in(i,k,j) -g_Tmpv1
 ru(i,k,j) =ru_in(i,k,j) -Tmpv1

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start-1,j_end
 DO i =its,min(ite,ide-1) +1

 k =kts

 g_z_at_u =0.25*(g_ph(i,k,j) +g_ph(i,k+1,j) +g_ph(i-1,k,j) +g_ph(i-1,k+1,j))/g
 z_at_u =0.25*(phb(i,k,j)+phb(i,k+1,j)+phb(i-1,k,j)+phb(i-1,k+1,j) +ph(i,k,j) &
 +ph(i,k+1,j) +ph(i-1,k,j) +ph(i-1,k+1,j))/g

 g_wkp1 =(0.0 +((0.0 +g_z_at_u +(0.0 -g_z_at_u)*sign(1.0, 0. -(z_at_u - &
 z_base(k))))*0.5/(z_base(k+1)-z_base(k))) -(0.0 -((0.0 +g_z_at_u +(0.0 - &
 g_z_at_u)*sign(1.0, 0. -(z_at_u -z_base(k))))*0.5/(z_base(k+1)-z_base(k)))) &
*sign(1.0, 1. -(max(0.,z_at_u -z_base(k))/(z_base(k+1)-z_base(k)))))*0.5
 wkp1 =min(1.,max(0.,z_at_u -z_base(k))/(z_base(k+1)-z_base(k)))

 g_wk =-g_wkp1
 wk =1. -wkp1

 g_Tmpv1 =muu(i,j)*(g_wk*u_base(k) +g_wkp1*u_base(k+1)) +g_muu(i,j) &
*(wk*u_base(k) +wkp1*u_base(k+1)) 
 Tmpv1 =muu(i,j)*(wk*u_base(k) +wkp1*u_base(k+1))

 g_ru(i,k,j) =g_ru_in(i,k,j) -g_Tmpv1
 ru(i,k,j) =ru_in(i,k,j) -Tmpv1

 k =ktf

 g_z_at_u =0.25*(g_ph(i,k,j) +g_ph(i,k+1,j) +g_ph(i-1,k,j) +g_ph(i-1,k+1,j))/g
 z_at_u =0.25*(phb(i,k,j)+phb(i,k+1,j)+phb(i-1,k,j)+phb(i-1,k+1,j) +ph(i,k,j) &
 +ph(i,k+1,j) +ph(i-1,k,j) +ph(i-1,k+1,j))/g

! Revised by Ning Pan, 2010-07-24
! g_wkm1 =(0.0 +((0.0 +g_z_at_u +(0.0 +g_z_at_u)*sign(1.0, 0. -(z_base(k) &
! -z_at_u)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 +g_z_at_u +(0.0 + &
! g_z_at_u)*sign(1.0, 0. -(z_base(k) -z_at_u)))*0.5/(z_base(k)-z_base(k-1)))) &
!*sign(1.0,! 1. -(max(0.,z_base(k) -z_at_u)/(z_base(k)-z_base(k-1)))))*0.5
 g_wkm1 =(0.0 +((0.0 -g_z_at_u +(0.0 +g_z_at_u)*sign(1.0, 0. -(z_base(k) &
 -z_at_u)))*0.5/(z_base(k)-z_base(k-1))) -(0.0 -((0.0 -g_z_at_u +(0.0 + &
 g_z_at_u)*sign(1.0, 0. -(z_base(k) -z_at_u)))*0.5/(z_base(k)-z_base(k-1)))) &
*sign(1.0, 1. -(max(0.,z_base(k) -z_at_u)/(z_base(k)-z_base(k-1)))))*0.5
 wkm1 =min(1.,max(0.,z_base(k) -z_at_u)/(z_base(k)-z_base(k-1)))

 g_wk =-g_wkm1
 wk =1. -wkm1

 g_Tmpv1 =muu(i,j)*(g_wkm1*u_base(k-1) +g_wk*u_base(k)) +g_muu(i,j) &
*(wkm1*u_base(k-1) +wk*u_base(k)) 
 Tmpv1 =muu(i,j)*(wkm1*u_base(k-1) +wk*u_base(k))

 g_ru(i,k,j) =g_ru_in(i,k,j) -g_Tmpv1
 ru(i,k,j) =ru_in(i,k,j) -Tmpv1

 ENDDO
 ENDDO

! boundary loops for perturbation coriolis is needed for open bdy  (20110301 XZ)
 IF( (config_flags%open_ys) .and. (jts == jds) ) THEN

 DO k =kts,ktf
 DO i =its,min(ide-1,ite)

 g_rv_tend(i,k,jts) =g_rv_tend(i,k,jts) -(msfvy(i,jts)/msfvx(i,jts)) &
 *0.5 *(f(i,jts)+f(i,jts)) *0.25*(g_ru(i,k,jts) +g_ru(i+1,k,jts) +g_ru(i,k, &
 jts) +g_ru(i+1,k,jts)) +(msfvy(i,jts)/msfvx(i,jts)) *0.5 *(e(i,jts)+e(i,jts)) &
 *0.5 *(sina(i,jts)+sina(i,jts)) *0.25*(g_rw(i,k+1,jts) +g_rw(i,k,jts) &
 +g_rw(i,k+1,jts) +g_rw(i,k,jts))
 rv_tend(i,k,jts) =rv_tend(i,k,jts) -(msfvy(i,jts)/msfvx(i,jts)) *0.5 *(f(i,jts) &
+f(i,jts)) *0.25*(ru(i,k,jts) +ru(i+1,k,jts) +ru(i,k,jts) +ru(i+1,k,jts)) &
 +(msfvy(i,jts)/msfvx(i,jts)) *0.5 *(e(i,jts)+e(i,jts)) *0.5 *(sina(i,jts) &
+sina(i,jts)) *0.25*(rw(i,k+1,jts) +rw(i,k,jts) +rw(i,k+1,jts) +rw(i,k,jts))

 ENDDO
 ENDDO
 ENDIF

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =its,min(ide-1,ite)

 g_rv_tend(i,k,j) =g_rv_tend(i,k,j) -(msfvy(i,j)/msfvx(i,j)) *0.5 *(f(i,j) &
+f(i,j-1)) *0.25*(g_ru(i,k,j) +g_ru(i+1,k,j) +g_ru(i,k,j-1) +g_ru(i+1,k, &
 j-1)) +(msfvy(i,j)/msfvx(i,j)) *0.5 *(e(i,j)+e(i,j-1)) *0.5 *(sina(i,j)+sina(i,j-1)) &
 *0.25*(g_rw(i,k+1,j-1) +g_rw(i,k,j-1) +g_rw(i,k+1,j) +g_rw(i,k,j))
 rv_tend(i,k,j) =rv_tend(i,k,j) -(msfvy(i,j)/msfvx(i,j)) *0.5 *(f(i,j)+f(i,j-1)) &
 *0.25*(ru(i,k,j) +ru(i+1,k,j) +ru(i,k,j-1) +ru(i+1,k,j-1)) +(msfvy(i,j)/msfvx(i,j)) &
 *0.5 *(e(i,j)+e(i,j-1)) *0.5 *(sina(i,j)+sina(i,j-1)) *0.25*(rw(i,k+1,j-1) &
 +rw(i,k,j-1) +rw(i,k+1,j) +rw(i,k,j))

 ENDDO
 ENDDO
 ENDDO

! boundary loops for perturbation coriolis is needed for open bdy  (20110307 XZ)
 IF( (config_flags%open_ye) .and. (jte == jde) ) THEN

 DO k =kts,ktf
 DO i =its,min(ide-1,ite)

 g_rv_tend(i,k,jte) =g_rv_tend(i,k,jte) -(msfvy(i,jte)/msfvx(i,jte)) &
 *0.5 *(f(i,jte-1)+f(i,jte-1)) *0.25*(g_ru(i,k,jte-1) +g_ru(i+1,k,jte-1) &
 +g_ru(i,k,jte-1) +g_ru(i+1,k,jte-1)) +(msfvy(i,jte)/msfvx(i,jte)) &
 *0.5 *(e(i,jte-1)+e(i,jte-1)) *0.5 *(sina(i,jte-1)+sina(i,jte-1)) *0.25*(g_rw(i, &
 k+1,jte-1) +g_rw(i,k,jte-1) +g_rw(i,k+1,jte-1) +g_rw(i,k,jte-1))
 rv_tend(i,k,jte) =rv_tend(i,k,jte) -(msfvy(i,jte)/msfvx(i,jte)) *0.5 *(f(i,jte-1) &
+f(i,jte-1)) *0.25*(ru(i,k,jte-1) +ru(i+1,k,jte-1) +ru(i,k,jte-1) +ru(i+1,k,jte-1)) &
 +(msfvy(i,jte)/msfvx(i,jte)) *0.5 *(e(i,jte-1)+e(i,jte-1)) *0.5 *(sina(i,jte-1) &
+sina(i,jte-1)) *0.25*(rw(i,k+1,jte-1) +rw(i,k,jte-1) +rw(i,k+1,jte-1) +rw(i,k,jte-1))

 ENDDO
 ENDDO
 ENDIF

 DO j =jts,min(jte,jde-1)
 DO k =kts+1,ktf
 DO i =its,min(ite,ide-1)

 g_rw_tend(i,k,j) =g_rw_tend(i,k,j) +e(i,j)*(cosa(i,j) *0.5*(fzm(k) &
*(g_ru(i,k,j) +g_ru(i+1,k,j)) +fzp(k)*(g_ru(i,k-1,j) +g_ru(i+1,k-1,j))) &
 -(msftx(i,j)/msfty(i,j)) *sina(i,j) *0.5*(fzm(k)*(g_rv(i,k,j) +g_rv(i,k,j+1)) &
 +fzp(k)*(g_rv(i,k-1,j) +g_rv(i,k-1,j+1))))
 rw_tend(i,k,j) =rw_tend(i,k,j) +e(i,j)*(cosa(i,j) *0.5*(fzm(k)*(ru(i,k,j) &
 +ru(i+1,k,j)) +fzp(k)*(ru(i,k-1,j) +ru(i+1,k-1,j))) -(msftx(i,j)/msfty(i,j)) &
 *sina(i,j) *0.5*(fzm(k)*(rv(i,k,j) +rv(i,k,j+1)) +fzp(k)*(rv(i,k-1,j) +rv(i,k-1,j+1))))

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_perturbation_coriolis

 SUBROUTINE g_curvature(ru,g_ru,rv,g_rv,rw,g_rw,u,g_u,v,g_v,w, &
 g_w,ru_tend,g_ru_tend,rv_tend,g_rv_tend,rw_tend,g_rw_tend,config_flags, &
! Revised by Ning Pan, 2010-07-22: xlat is a constant array
! msfux,msfuy,msfvx,msfvy,msftx,msfty,xlat,g_xlat,fzm,fzp,rdx,rdy,ids,ide,jds,jde, &
 msfux,msfuy,msfvx,msfvy,msftx,msfty,xlat,fzm,fzp,rdx,rdy,ids,ide,jds,jde, &
 kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3,Tmpv4,g_Tmpv4,Tmpv5, &
 g_Tmpv5,Tmpv6,g_Tmpv6,Tmpv7,g_Tmpv7,Tmpv8,g_Tmpv8,Tmpv9,g_Tmpv9, &
 Tmpv10,g_Tmpv10,Tmpv11,g_Tmpv11,Tmpv12,g_Tmpv12
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru_tend,g_ru_tend,rv_tend,g_rv_tend, &
 rw_tend,g_rw_tend
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru,g_ru,rv,g_rv,rw,g_rw,u,g_u, &
 v,g_v,w,g_w
! Revised by Ning Pan, 2010-07-22
! REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty,xlat,g_xlat
 REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty,xlat
 REAL,DIMENSION(kms:kme) :: fzm,fzp
 REAL :: rdx,rdy

 INTEGER :: i,j,k,itf,jtf,ktf
 INTEGER :: i_start,i_end,j_start,j_end
 REAL,DIMENSION(its-1:ite,kts:kte,jts-1:jte) :: vxgm,g_vxgm
 LOGICAL :: specified

 specified =.false.

 if(config_flags%specified .or. config_flags%nested) specified =.true.

 itf =min(ite,ide-1)

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 i_start =its-1

 i_end =ite

 j_start =jts-1

 j_end =jte

 IF( ( config_flags%open_xs .or. specified .or.   &
        config_flags%nested) .and. (its == ids) ) i_start =its

 IF( ( config_flags%open_xe .or. specified .or.   &
        config_flags%nested) .and. (ite == ide) ) i_end =ite-1

 IF( ( config_flags%open_ys .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) .and. (jts == jds) ) j_start =jts

 IF( ( config_flags%open_ye .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) .and. (jte == jde) ) j_end =jte-1

 IF( config_flags%periodic_x ) i_start =its-1

 IF( config_flags%periodic_x ) i_end =ite

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =i_start,i_end

 g_vxgm(i,k,j) =0.5*(g_u(i,k,j) +g_u(i+1,k,j))*(msfvx(i,j+1)-msfvx(i,j)) &
*rdy -0.5*(g_v(i,k,j) +g_v(i,k,j+1))*(msfuy(i+1,j)-msfuy(i,j))*rdx
 vxgm(i,k,j) =0.5*(u(i,k,j) +u(i+1,k,j))*(msfvx(i,j+1)-msfvx(i,j))*rdy -0.5*(v(i,k,j) &
 +v(i,k,j+1))*(msfuy(i+1,j)-msfuy(i,j))*rdx

 ENDDO
 ENDDO
 ENDDO

 IF( ( config_flags%open_xs .or. (specified .AND. .NOT. config_flags%periodic_x) &
 .or.   &
        config_flags%nested) .and. (its == ids) ) THEN

 DO j =jts,jte-1
 DO k =kts,ktf

 g_vxgm(its-1,k,j) =g_vxgm(its,k,j)
 vxgm(its-1,k,j) =vxgm(its,k,j)

 ENDDO
 ENDDO
 ENDIF

 IF( ( config_flags%open_xe .or. (specified .AND. .NOT. config_flags%periodic_x) &
 .or.   &
        config_flags%nested) .and. (ite == ide) ) THEN

 DO j =jts,jte-1
 DO k =kts,ktf

 g_vxgm(ite,k,j) =g_vxgm(ite-1,k,j)
 vxgm(ite,k,j) =vxgm(ite-1,k,j)

 ENDDO
 ENDDO
 ENDIF

 IF( ( config_flags%open_ys .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) .and. (jts == jds) ) THEN

 DO k =kts,ktf
 DO i =its-1,ite

 g_vxgm(i,k,jts-1) =g_vxgm(i,k,jts)
 vxgm(i,k,jts-1) =vxgm(i,k,jts)

 ENDDO
 ENDDO
 ENDIF

 IF( ( config_flags%open_ye .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) .and. (jte == jde) ) THEN

 DO k =kts,ktf
 DO i =its-1,ite

 g_vxgm(i,k,jte) =g_vxgm(i,k,jte-1)
 vxgm(i,k,jte) =vxgm(i,k,jte-1)

 ENDDO
 ENDDO
 ENDIF

 i_start =its

 IF( config_flags%open_xs .or. specified .or.   &
        config_flags%nested) i_start =max(ids+1,its)

 IF( config_flags%open_xe .or. specified .or.   &
        config_flags%nested) i_end =min(ide-1,ite)

 IF( config_flags%periodic_x ) i_start =its

 IF( config_flags%periodic_x ) i_end =ite

 IF((config_flags%map_proj == 6) .OR. (config_flags%polar)) THEN

 DO j =jts,min(jde-1,jte)
 DO k =kts,ktf
 DO i =i_start,i_end

! Revised by Ning Pan, 2010-07-22
! g_Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.25*(rv(i-1,k,j+1) +rv(i,k,j+1) +rv(i-1,k,j) &
! +rv(i,k,j))*g_xlat(i,j)*degrad/(cos(xlat(i,j)*degrad)*cos(xlat(i,j)*degrad)) &
! +(msfux(i,j)/msfuy(i,j)) *0.25*(g_rv(i-1,k,j+1) +g_rv(i,k,j+1) +g_rv(i-1,k, &
! j) +g_rv(i,k,j))*tan(xlat(i,j)*degrad) 
 g_Tmpv1 = &
 (msfux(i,j)/msfuy(i,j)) *0.25*(g_rv(i-1,k,j+1) +g_rv(i,k,j+1) +g_rv(i-1,k, &
 j) +g_rv(i,k,j))*tan(xlat(i,j)*degrad) 
 Tmpv1 =(msfux(i,j)/msfuy(i,j)) *0.25*(rv(i-1,k,j+1) +rv(i,k,j+1) +rv(i-1,k,j) &
 +rv(i,k,j))*tan(xlat(i,j)*degrad)

 g_Tmpv2 =u(i,k,j)*reradius*(g_Tmpv1 -0.25*(g_rw(i-1,k+1,j) +g_rw(i-1,k, &
 j) +g_rw(i,k+1,j) +g_rw(i,k,j))) +g_u(i,k,j)*reradius*(Tmpv1 -0.25*(rw(i-1, &
 k+1,j) +rw(i-1,k,j) +rw(i,k+1,j) +rw(i,k,j))) 
 Tmpv2 =u(i,k,j)*reradius*(Tmpv1 -0.25*(rw(i-1,k+1,j) +rw(i-1,k,j) +rw(i,k+1,j) +rw(i,k,j)))

 g_ru_tend(i,k,j) =g_ru_tend(i,k,j) +g_Tmpv2
 ru_tend(i,k,j) =ru_tend(i,k,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO

 ELSE

 DO j =jts,min(jde-1,jte)
 DO k =kts,ktf
 DO i =i_start,i_end

 g_Tmpv1 =0.5*(vxgm(i,k,j) +vxgm(i-1,k,j))*0.25*(g_rv(i-1,k,j+1) +g_rv(i,k, &
 j+1) +g_rv(i-1,k,j) +g_rv(i,k,j)) +0.5*(g_vxgm(i,k,j) +g_vxgm(i-1,k,j)) &
*0.25*(rv(i-1,k,j+1) +rv(i,k,j+1) +rv(i-1,k,j) +rv(i,k,j)) 
 Tmpv1 =0.5*(vxgm(i,k,j) +vxgm(i-1,k,j))*0.25*(rv(i-1,k,j+1) +rv(i,k,j+1) &
 +rv(i-1,k,j) +rv(i,k,j))

 g_Tmpv2 =u(i,k,j)*reradius*0.25*(g_rw(i-1,k+1,j) +g_rw(i-1,k,j) &
 +g_rw(i,k+1,j) +g_rw(i,k,j)) +g_u(i,k,j)*reradius*0.25*(rw(i-1,k+1,j) &
 +rw(i-1,k,j) +rw(i,k+1,j) +rw(i,k,j)) 
 Tmpv2 =u(i,k,j)*reradius*0.25*(rw(i-1,k+1,j) +rw(i-1,k,j) +rw(i,k+1,j) +rw(i,k,j))

 g_ru_tend(i,k,j) =g_ru_tend(i,k,j) +g_Tmpv1 -g_Tmpv2
 ru_tend(i,k,j) =ru_tend(i,k,j) +Tmpv1 -Tmpv2

 ENDDO
 ENDDO
 ENDDO
 END IF

 j_start =jts

 IF( config_flags%open_ys .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) j_start =max(jds+1,jts)

 IF( config_flags%open_ye .or. specified .or.   &
        config_flags%nested .or. config_flags%polar) j_end =min(jde-1,jte)

 IF((config_flags%map_proj == 6) .OR. (config_flags%polar)) THEN

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =its,min(ite,ide-1)

! Revised by Ning Pan, 2010-07-22
! g_Tmpv1 =0.25*(u(i,k,j) +u(i+1,k,j) +u(i,k,j-1) +u(i+1,k,j-1))*(g_xlat(i,j) &
! +g_xlat(i,j-1))*0.5*degrad/(cos((xlat(i,j) +xlat(i,j-1))*0.5*degrad) &
!*cos((xlat(i,j)! +xlat(i,j-1))*0.5*degrad)) +0.25*(g_u(i,k,j) +g_u(i+1,k,j) &
! +g_u(i,k,j-1) +g_u(i+1,k,j-1))*tan((xlat(i,j) +xlat(i,j-1))*0.5*degrad) 
 g_Tmpv1 =  &
 0.25*(g_u(i,k,j) +g_u(i+1,k,j) &
 +g_u(i,k,j-1) +g_u(i+1,k,j-1))*tan((xlat(i,j) +xlat(i,j-1))*0.5*degrad) 
 Tmpv1 =0.25*(u(i,k,j) +u(i+1,k,j) +u(i,k,j-1) +u(i+1,k,j-1))*tan((xlat(i,j) &
 +xlat(i,j-1))*0.5*degrad)

 g_Tmpv2 =Tmpv1*0.25*(g_ru(i,k,j) +g_ru(i+1,k,j) +g_ru(i,k,j-1) &
 +g_ru(i+1,k,j-1)) +g_Tmpv1*0.25*(ru(i,k,j) +ru(i+1,k,j) +ru(i,k,j-1) +ru(i+1,k,j-1)) 
 Tmpv2 =Tmpv1*0.25*(ru(i,k,j) +ru(i+1,k,j) +ru(i,k,j-1) +ru(i+1,k,j-1))

 g_Tmpv3 =v(i,k,j)*0.25*(g_rw(i,k+1,j-1) +g_rw(i,k,j-1) +g_rw(i,k+1,j) &
 +g_rw(i,k,j)) +g_v(i,k,j)*0.25*(rw(i,k+1,j-1) +rw(i,k,j-1) +rw(i,k+1,j) +rw(i,k,j)) 
 Tmpv3 =v(i,k,j)*0.25*(rw(i,k+1,j-1) +rw(i,k,j-1) +rw(i,k+1,j) +rw(i,k,j))

 g_rv_tend(i,k,j) =g_rv_tend(i,k,j) -(msfvy(i,j)/msfvx(i,j)) *reradius*( &
 g_Tmpv2 +g_Tmpv3)
 rv_tend(i,k,j) =rv_tend(i,k,j) -(msfvy(i,j)/msfvx(i,j)) *reradius*(Tmpv2 +Tmpv3)

 ENDDO
 ENDDO
 ENDDO

 ELSE

 DO j =j_start,j_end
 DO k =kts,ktf
 DO i =its,min(ite,ide-1)

 g_Tmpv1 =0.5*(vxgm(i,k,j) +vxgm(i,k,j-1))*0.25*(g_ru(i,k,j) +g_ru(i+1,k,j) &
 +g_ru(i,k,j-1) +g_ru(i+1,k,j-1)) +0.5*(g_vxgm(i,k,j) +g_vxgm(i,k,j-1)) &
*0.25*(ru(i,k,j) +ru(i+1,k,j) +ru(i,k,j-1) +ru(i+1,k,j-1)) 
 Tmpv1 =0.5*(vxgm(i,k,j) +vxgm(i,k,j-1))*0.25*(ru(i,k,j) +ru(i+1,k,j) +ru(i,k,j-1) &
 +ru(i+1,k,j-1))

 g_Tmpv2 =(msfvy(i,j)/msfvx(i,j))*v(i,k,j)*reradius*0.25*(g_rw(i,k+1,j-1) &
 +g_rw(i,k,j-1) +g_rw(i,k+1,j) +g_rw(i,k,j)) +(msfvy(i,j)/msfvx(i,j)) &
*g_v(i,k,j)*reradius*0.25*(rw(i,k+1,j-1) +rw(i,k,j-1) +rw(i,k+1,j) +rw(i,k,j)) 
 Tmpv2 =(msfvy(i,j)/msfvx(i,j))*v(i,k,j)*reradius*0.25*(rw(i,k+1,j-1) +rw(i,k,j-1) &
 +rw(i,k+1,j) +rw(i,k,j))

 g_rv_tend(i,k,j) =g_rv_tend(i,k,j) -g_Tmpv1 -g_Tmpv2
 rv_tend(i,k,j) =rv_tend(i,k,j) -Tmpv1 -Tmpv2

 ENDDO
 ENDDO
 ENDDO
 END IF

 DO j =jts,min(jte,jde-1)
 DO k =max(2,kts),ktf
 DO i =its,min(ite,ide-1)

 g_Tmpv1 =0.5*(fzm(k)*(ru(i,k,j) +ru(i+1,k,j)) +fzp(k)*(ru(i,k-1,j) +ru(i+1,k-1, &
 j)))*0.5*(fzm(k)*(g_u(i,k,j) +g_u(i+1,k,j)) +fzp(k)*(g_u(i,k-1,j) &
 +g_u(i+1,k-1,j))) +0.5*(fzm(k)*(g_ru(i,k,j) +g_ru(i+1,k,j)) +fzp(k) &
*(g_ru(i,k-1,j) +g_ru(i+1,k-1,j)))*0.5*(fzm(k)*(u(i,k,j) +u(i+1,k,j)) +fzp(k) &
*(u(i,k-1,j) +u(i+1,k-1,j))) 
 Tmpv1 =0.5*(fzm(k)*(ru(i,k,j) +ru(i+1,k,j)) +fzp(k)*(ru(i,k-1,j) +ru(i+1,k-1,j))) &
*0.5*(fzm(k)*(u(i,k,j) +u(i+1,k,j)) +fzp(k)*(u(i,k-1,j) +u(i+1,k-1,j)))

 g_Tmpv2 =(msftx(i,j)/msfty(i,j)) *0.5*(fzm(k)*(rv(i,k,j) +rv(i,k,j+1)) +fzp(k) &
*(rv(i,k-1,j) +rv(i,k-1,j+1)))*0.5*(fzm(k)*(g_v(i,k,j) +g_v(i,k,j+1)) +fzp(k) &
*(g_v(i,k-1,j) +g_v(i,k-1,j+1))) +(msftx(i,j)/msfty(i,j)) *0.5*(fzm(k) &
*(g_rv(i,k,j) +g_rv(i,k,j+1)) +fzp(k)*(g_rv(i,k-1,j) +g_rv(i,k-1,j+1))) &
*0.5*(fzm(k)*(v(i,k,j) +v(i,k,j+1)) +fzp(k)*(v(i,k-1,j) +v(i,k-1,j+1))) 
 Tmpv2 =(msftx(i,j)/msfty(i,j)) *0.5*(fzm(k)*(rv(i,k,j) +rv(i,k,j+1)) +fzp(k) &
*(rv(i,k-1,j) +rv(i,k-1,j+1)))*0.5*(fzm(k)*(v(i,k,j) +v(i,k,j+1)) +fzp(k)*(v(i,k-1,j) &
 +v(i,k-1,j+1)))

 g_rw_tend(i,k,j) =g_rw_tend(i,k,j) +reradius*(g_Tmpv1 +g_Tmpv2)
 rw_tend(i,k,j) =rw_tend(i,k,j) +reradius*(Tmpv1 +Tmpv2)

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_curvature

 SUBROUTINE g_zero_tend(tendency,g_tendency,ids,ide,jds,jde,kds,kde,ims,ime,jms, &
 jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency

 INTEGER :: i,j,k,itf,jtf,ktf

 DO j =jts,jte
 DO k =kts,kte
 DO i =its,ite

 g_tendency(i,k,j) =0.0
 tendency(i,k,j) =0.

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_zero_tend

 SUBROUTINE g_zero_pole(field,g_field,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme, &
 kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field

 INTEGER :: i,k

 IF(jts == jds) THEN

 DO k =kts,kte
 DO i =its-1,ite+1

 g_field(i,k,jts) =0.0
 field(i,k,jts) =0.

 ENDDO
 ENDDO
 END IF

 IF(jte == jde) THEN

 DO k =kts,kte
 DO i =its-1,ite+1

 g_field(i,k,jte) =0.0
 field(i,k,jte) =0.

 ENDDO
 ENDDO
 END IF

 END SUBROUTINE g_zero_pole

 SUBROUTINE g_pole_point_bc(field,g_field,ids,ide,jds,jde,kds,kde,ims,ime,jms, &
 jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field

 INTEGER :: i,k

 IF(jts == jds) THEN

 DO k =kts,kte
 DO i =its,ite

 g_field(i,k,jts) =g_field(i,k,jts+1)
 field(i,k,jts) =field(i,k,jts+1)

 ENDDO
 ENDDO
 END IF

 IF(jte == jde) THEN

 DO k =kts,kte
 DO i =its,ite

 g_field(i,k,jte) =g_field(i,k,jte-1)
 field(i,k,jte) =field(i,k,jte-1)

 ENDDO
 ENDDO
 END IF

 END SUBROUTINE g_pole_point_bc

 SUBROUTINE g_phy_prep(config_flags,mu,g_mu,muu,g_muu,muv,g_muv,u,g_u, &
 v,g_v,p,g_p,pb,alt,g_alt,ph,g_ph,phb,t,g_t,tsk,g_tsk,moist, &
 g_moist,n_moist,rho,g_rho,th_phy,g_th_phy,p_phy,g_p_phy,pi_phy, &
 g_pi_phy,u_phy,g_u_phy,v_phy,g_v_phy,p8w,g_p8w,t_phy,g_t_phy,t8w, &
 g_t8w,z,g_z,z_at_w,g_z_at_w,dz8w,g_dz8w,p_hyd,g_p_hyd,p_hyd_w, &
! Revised by Ning Pan, 2010-08-30
! g_p_hyd_w,fzm,fzp,znw,p_top,g_p_top,RTHRATEN,RTHBLTEN,RUBLTEN,RVBLTEN,RQVBLTEN, &
 g_p_hyd_w,fzm,fzp,znw,p_top,RTHRATEN,RTHBLTEN,RUBLTEN,RVBLTEN,RQVBLTEN, &
 RQCBLTEN,RQIBLTEN,RUCUTEN,RVCUTEN,RTHCUTEN,RQVCUTEN,RQCCUTEN,RQRCUTEN,RQICUTEN,RQSCUTEN, &
 RUSHTEN,RVSHTEN,RTHSHTEN,RQVSHTEN,RQCSHTEN,RQRSHTEN,RQISHTEN,RQSSHTEN,RQGSHTEN,RTHFTEN,RQVFTEN, &
 RUNDGDTEN,RVNDGDTEN,RTHNDGDTEN,RPHNDGDTEN,RQVNDGDTEN,RMUNDGDTEN,ids,ide,jds, &
 jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 INTEGER :: n_moist
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme,n_moist) :: moist,g_moist
 REAL,DIMENSION(ims:ime,jms:jme) :: TSK,g_TSK,mu,g_mu,muu,g_muu,muv,g_muv
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: u_phy,g_u_phy,v_phy,g_v_phy,pi_phy, &
 g_pi_phy,p_phy,g_p_phy,p8w,g_p8w,t_phy,g_t_phy,th_phy,g_th_phy,t8w, &
 g_t8w,rho,g_rho,z,g_z,dz8w,g_dz8w,z_at_w,g_z_at_w
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: p_hyd,g_p_hyd,p_hyd_w,g_p_hyd_w
! Revised by Ning Pan, 2010-08-30
! REAL :: p_top,g_p_top
 REAL :: p_top
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: pb,p,g_p,u,g_u,v,g_v,alt, &
 g_alt,ph,g_ph,phb,t,g_t
 REAL,DIMENSION(kms:kme) :: fzm,fzp
 REAL,DIMENSION(kms:kme) :: znw
   REAL,  DIMENSION( ims:ime , kms:kme, jms:jme ) :: RTHRATEN
   REAL,  DIMENSION( ims:ime , kms:kme, jms:jme )                    &
                          ::                                RUCUTEN, &
                                                            RVCUTEN, &
                                                           RTHCUTEN, &
                                                           RQVCUTEN, &
                                                           RQCCUTEN, &
                                                           RQRCUTEN, &
                                                           RQICUTEN, &
                                                           RQSCUTEN, &
                                                            RUSHTEN, &
                                                            RVSHTEN, &
                                                           RTHSHTEN, &
                                                           RQVSHTEN, &
                                                           RQCSHTEN, &
                                                           RQRSHTEN, &
                                                           RQISHTEN, &
                                                           RQSSHTEN, &
                                                           RQGSHTEN

   REAL,  DIMENSION( ims:ime, kms:kme, jms:jme )                     &
                          ::                                RUBLTEN, &
                                                            RVBLTEN, &
                                                           RTHBLTEN, &
                                                           RQVBLTEN, &
                                                           RQCBLTEN, &
                                                           RQIBLTEN

   REAL,  DIMENSION( ims:ime, kms:kme, jms:jme )                     &
                          ::                                RTHFTEN, &
                                                            RQVFTEN

   REAL,  DIMENSION( ims:ime, kms:kme, jms:jme )                     &
                          ::                                RUNDGDTEN, &
                                                            RVNDGDTEN, &
                                                           RTHNDGDTEN, &
                                                           RPHNDGDTEN, &
                                                           RQVNDGDTEN

   REAL,  DIMENSION( ims:ime, jms:jme )                              &
                          ::                               RMUNDGDTEN
 INTEGER :: i_start,i_end,j_start,j_end,k_start,k_end,i_startu,j_startv
 INTEGER :: i,j,k
 REAL :: w1,g_w1,w2,g_w2,z0,g_z0,z1,g_z1,z2,g_z2
 REAL :: e_vapor,g_e_vapor

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 k_start =kts

 k_end =min(kte,kde-1)

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end

 g_th_phy(i,k,j) =g_t(i,k,j)
 th_phy(i,k,j) =t(i,k,j) +t0

 g_p_phy(i,k,j) =g_p(i,k,j)
 p_phy(i,k,j) =p(i,k,j) +pb(i,k,j)

 g_pi_phy(i,k,j) =rcp*(g_p_phy(i,k,j)/p1000mb)*(p_phy(i,k,j)/p1000mb)**(rcp -1.0)
 pi_phy(i,k,j) =(p_phy(i,k,j)/p1000mb)**rcp

 g_Tmpv1 =th_phy(i,k,j)*g_pi_phy(i,k,j) +g_th_phy(i,k,j)*pi_phy(i,k,j) 
 Tmpv1 =th_phy(i,k,j)*pi_phy(i,k,j)

 g_t_phy(i,k,j) =g_Tmpv1
 t_phy(i,k,j) =Tmpv1

 g_Tmpv1 =1./alt(i,k,j)*(g_moist(i,k,j,P_QV)) +(-1.*g_alt(i,k,j)/(alt(i,k,j) &
 *alt(i,k,j)))*(1. +moist(i,k,j,P_QV)) 
 Tmpv1 =1./alt(i,k,j)*(1. +moist(i,k,j,P_QV))

 g_rho(i,k,j) =g_Tmpv1
 rho(i,k,j) =Tmpv1

 g_u_phy(i,k,j) =0.5*(g_u(i,k,j) +g_u(i+1,k,j))
 u_phy(i,k,j) =0.5*(u(i,k,j) +u(i+1,k,j))

 g_v_phy(i,k,j) =0.5*(g_v(i,k,j) +g_v(i,k,j+1))
 v_phy(i,k,j) =0.5*(v(i,k,j) +v(i,k,j+1))

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =k_start,kte
 DO i =i_start,i_end

 g_z_at_w(i,k,j) =(g_ph(i,k,j))/g
 z_at_w(i,k,j) =(phb(i,k,j) +ph(i,k,j))/g

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =k_start,kte-1
 DO i =i_start,i_end

 g_dz8w(i,k,j) =g_z_at_w(i,k+1,j) -g_z_at_w(i,k,j)
 dz8w(i,k,j) =z_at_w(i,k+1,j) -z_at_w(i,k,j)

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO i =i_start,i_end

 g_dz8w(i,kte,j) =0.0
 dz8w(i,kte,j) =0.

 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end

 g_z(i,k,j) =0.5*(g_z_at_w(i,k,j) +g_z_at_w(i,k+1,j))
 z(i,k,j) =0.5*(z_at_w(i,k,j) +z_at_w(i,k+1,j))

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =2,k_end
 DO i =i_start,i_end

 g_p8w(i,k,j) =fzm(k)*g_p_phy(i,k,j) +fzp(k)*g_p_phy(i,k-1,j)
 p8w(i,k,j) =fzm(k)*p_phy(i,k,j) +fzp(k)*p_phy(i,k-1,j)

 g_t8w(i,k,j) =fzm(k)*g_t_phy(i,k,j) +fzp(k)*g_t_phy(i,k-1,j)
 t8w(i,k,j) =fzm(k)*t_phy(i,k,j) +fzp(k)*t_phy(i,k-1,j)

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO i =i_start,i_end

 g_z0 =g_z_at_w(i,1,j)
 z0 =z_at_w(i,1,j)

 g_z1 =g_z(i,1,j)
 z1 =z(i,1,j)

 g_z2 =g_z(i,2,j)
 z2 =z(i,2,j)

 g_Tmpv1 =((g_z0 -g_z2)*(z1 -z2) -(g_z1 -g_z2)*(z0 -z2))/((z1 -z2)*(z1 -z2)) 
 Tmpv1 =(z0 -z2)/(z1 -z2)

 g_w1 =g_Tmpv1
 w1 =Tmpv1

 g_w2 =-g_w1
 w2 =1. -w1

 g_Tmpv1 =w1*g_p_phy(i,1,j) +g_w1*p_phy(i,1,j) 
 Tmpv1 =w1*p_phy(i,1,j)

 g_Tmpv2 =w2*g_p_phy(i,2,j) +g_w2*p_phy(i,2,j) 
 Tmpv2 =w2*p_phy(i,2,j)

 g_p8w(i,1,j) =g_Tmpv1 +g_Tmpv2
 p8w(i,1,j) =Tmpv1 +Tmpv2

 g_Tmpv1 =w1*g_t_phy(i,1,j) +g_w1*t_phy(i,1,j) 
 Tmpv1 =w1*t_phy(i,1,j)

 g_Tmpv2 =w2*g_t_phy(i,2,j) +g_w2*t_phy(i,2,j) 
 Tmpv2 =w2*t_phy(i,2,j)

 g_t8w(i,1,j) =g_Tmpv1 +g_Tmpv2
 t8w(i,1,j) =Tmpv1 +Tmpv2

 g_z0 =g_z_at_w(i,kte,j)
 z0 =z_at_w(i,kte,j)

 g_z1 =g_z(i,k_end,j)
 z1 =z(i,k_end,j)

 g_z2 =g_z(i,k_end-1,j)
 z2 =z(i,k_end-1,j)

 g_Tmpv1 =((g_z0 -g_z2)*(z1 -z2) -(g_z1 -g_z2)*(z0 -z2))/((z1 -z2)*(z1 -z2)) 
 Tmpv1 =(z0 -z2)/(z1 -z2)

 g_w1 =g_Tmpv1
 w1 =Tmpv1

 g_w2 =-g_w1
 w2 =1. -w1

 g_Tmpv1 =w1*g_p_phy(i,kde-1,j)/p_phy(i,kde-1,j) +g_w1*log(p_phy(i,kde-1,j)) 
 Tmpv1 =w1*log(p_phy(i,kde-1,j))

 g_Tmpv2 =w2*g_p_phy(i,kde-2,j)/p_phy(i,kde-2,j) +g_w2*log(p_phy(i,kde-2,j)) 
 Tmpv2 =w2*log(p_phy(i,kde-2,j))

 g_p8w(i,kde,j) =(g_Tmpv1 +g_Tmpv2)*exp(Tmpv1 +Tmpv2)
 p8w(i,kde,j) =exp(Tmpv1 +Tmpv2)

 g_Tmpv1 =w1*g_t_phy(i,kde-1,j) +g_w1*t_phy(i,kde-1,j) 
 Tmpv1 =w1*t_phy(i,kde-1,j)

 g_Tmpv2 =w2*g_t_phy(i,kde-2,j) +g_w2*t_phy(i,kde-2,j) 
 Tmpv2 =w2*t_phy(i,kde-2,j)

 g_t8w(i,kde,j) =g_Tmpv1 +g_Tmpv2
 t8w(i,kde,j) =Tmpv1 +Tmpv2

 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO i =i_start,i_end

! Revised by Ning Pan, 2010-08-30
! g_p_hyd_w(i,kte,j) =g_p_top
 g_p_hyd_w(i,kte,j) =0.0
 p_hyd_w(i,kte,j) =p_top

 ENDDO
 ENDDO

 g_e_vapor =0.0
 e_vapor =0.

 DO j =j_start,j_end
 DO k =kte-1,k_start,-1
 DO i =i_start,i_end

 g_Tmpv1 =1./alt(i,k,j)*(g_moist(i,k,j,P_QV)) +(-1.*g_alt(i,k,j)/(alt(i,k,j) &
 *alt(i,k,j)))*(1. +moist(i,k,j,P_QV)) 
 Tmpv1 =1./alt(i,k,j)*(1. +moist(i,k,j,P_QV))

 g_Tmpv2 =Tmpv1*g*g_dz8w(i,k,j) +g_Tmpv1*g*dz8w(i,k,j) 
 Tmpv2 =Tmpv1*g*dz8w(i,k,j)

 g_p_hyd_w(i,k,j) =g_p_hyd_w(i,k+1,j) +g_Tmpv2
 p_hyd_w(i,k,j) =p_hyd_w(i,k+1,j) +Tmpv2

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end

 g_p_hyd(i,k,j) =0.5*(g_p_hyd_w(i,k,j) +g_p_hyd_w(i,k+1,j))
 p_hyd(i,k,j) =0.5*(p_hyd_w(i,k,j) +p_hyd_w(i,k+1,j))

 ENDDO
 ENDDO
 ENDDO

!!!!! Need to code TL of the following statements when construction TL of PHYSICS
 IF(config_flags%ra_lw_physics .gt. 0 .or. config_flags%ra_sw_physics .gt. 0) THEN

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RTHRATEN(I,K,J) =RTHRATEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(config_flags%cu_physics .gt. 0) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RUCUTEN(I,K,J) =RUCUTEN(I,K,J)/mu(I,J)
 RVCUTEN(I,K,J) =RVCUTEN(I,K,J)/mu(I,J)
 RTHCUTEN(I,K,J) =RTHCUTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO

 IF(P_QV .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RQVCUTEN(I,K,J) =RQVCUTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(P_QC .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RQCCUTEN(I,K,J) =RQCCUTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(P_QR .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RQRCUTEN(I,K,J) =RQRCUTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(P_QI .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RQICUTEN(I,K,J) =RQICUTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(P_QS .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RQSCUTEN(I,K,J) =RQSCUTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF
 ENDIF

   IF (config_flags%shcu_physics .gt. 0) THEN

      DO J=j_start,j_end
      DO I=i_start,i_end
      DO K=k_start,k_end
         RUSHTEN(I,K,J) =RUSHTEN(I,K,J)/mu(I,J)
         RVSHTEN(I,K,J) =RVSHTEN(I,K,J)/mu(I,J)
         RTHSHTEN(I,K,J)=RTHSHTEN(I,K,J)/mu(I,J)
      ENDDO
      ENDDO
      ENDDO

      IF (P_QV .ge. PARAM_FIRST_SCALAR)THEN
         DO J=j_start,j_end
         DO I=i_start,i_end
         DO K=k_start,k_end
            RQVSHTEN(I,K,J)=RQVSHTEN(I,K,J)/mu(I,J)
         ENDDO
         ENDDO
         ENDDO
      ENDIF

      IF (P_QC .ge. PARAM_FIRST_SCALAR)THEN
         DO J=j_start,j_end
         DO I=i_start,i_end
         DO K=k_start,k_end
            RQCSHTEN(I,K,J)=RQCSHTEN(I,K,J)/mu(I,J)
         ENDDO
         ENDDO
         ENDDO
      ENDIF

      IF (P_QR .ge. PARAM_FIRST_SCALAR)THEN
         DO J=j_start,j_end
         DO I=i_start,i_end
         DO K=k_start,k_end
            RQRSHTEN(I,K,J)=RQRSHTEN(I,K,J)/mu(I,J)
         ENDDO
         ENDDO
         ENDDO
      ENDIF

      IF (P_QI .ge. PARAM_FIRST_SCALAR)THEN
         DO J=j_start,j_end
         DO I=i_start,i_end
         DO K=k_start,k_end
            RQISHTEN(I,K,J)=RQISHTEN(I,K,J)/mu(I,J)
         ENDDO
         ENDDO
         ENDDO
      ENDIF

      IF(P_QS .ge. PARAM_FIRST_SCALAR)THEN
         DO J=j_start,j_end
         DO I=i_start,i_end
         DO K=k_start,k_end
            RQSSHTEN(I,K,J)=RQSSHTEN(I,K,J)/mu(I,J)
         ENDDO
         ENDDO
         ENDDO
      ENDIF

      IF(P_QG .ge. PARAM_FIRST_SCALAR)THEN
         DO J=j_start,j_end
         DO I=i_start,i_end
         DO K=k_start,k_end
            RQGSHTEN(I,K,J)=RQGSHTEN(I,K,J)/mu(I,J)
         ENDDO
         ENDDO
         ENDDO
      ENDIF

   ENDIF

 IF(config_flags%bl_pbl_physics .gt. 0) THEN

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RUBLTEN(I,K,J) =RUBLTEN(I,K,J)/mu(I,J)

 RVBLTEN(I,K,J) =RVBLTEN(I,K,J)/mu(I,J)

 RTHBLTEN(I,K,J) =RTHBLTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO

 IF(P_QV .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RQVBLTEN(I,K,J) =RQVBLTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(P_QC .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RQCBLTEN(I,K,J) =RQCBLTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF

 IF(P_QI .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RQIBLTEN(I,K,J) =RQIBLTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF
 ENDIF

 IF(( config_flags%cu_physics == GDSCHEME ) .OR.      &
    ( config_flags%cu_physics == G3SCHEME ) .OR.      &
    ( config_flags%cu_physics == KFETASCHEME ) .OR. &
      config_flags%cu_physics == TIEDTKESCHEME ) THEN  ! Tiedtke and NSAS

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RTHFTEN(I,K,J) =RTHFTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO

 IF(P_QV .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO I =i_start,i_end
 DO K =k_start,k_end

 RQVFTEN(I,K,J) =RQVFTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF
 END IF

 IF(config_flags%grid_fdda .gt. 0) THEN

 i_startu =max(its,ids+1)

 j_startv =max(jts,jds+1)

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_startu,i_end

 RUNDGDTEN(I,K,J) =RUNDGDTEN(I,K,J)/muu(I,J)
 ENDDO
 ENDDO
 ENDDO

 DO J =j_startv,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RVNDGDTEN(I,K,J) =RVNDGDTEN(I,K,J)/muv(I,J)
 ENDDO
 ENDDO
 ENDDO

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RTHNDGDTEN(I,K,J) =RTHNDGDTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO

 IF(config_flags%grid_fdda .EQ. 2) THEN

 DO J =j_start,j_end
 DO K =k_start,kte
 DO I =i_start,i_end

 RPHNDGDTEN(I,K,J) =RPHNDGDTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ELSE IF(config_flags%grid_fdda .EQ. 1) THEN

 IF(P_QV .ge. PARAM_FIRST_SCALAR) THEN

 DO J =j_start,j_end
 DO K =k_start,k_end
 DO I =i_start,i_end

 RQVNDGDTEN(I,K,J) =RQVNDGDTEN(I,K,J)/mu(I,J)
 ENDDO
 ENDDO
 ENDDO
 ENDIF
 ENDIF
 ENDIF

 END SUBROUTINE g_phy_prep

 SUBROUTINE g_moist_physics_prep_em(t_new,g_t_new,t_old,g_t_old,t0,rho, &
 g_rho,al,g_al,alb,p,g_p,p8w,g_p8w,p0,pb,ph,g_ph,phb,th_phy, &
 g_th_phy,pii,g_pii,pf,g_pf,z,g_z,z_at_w,g_z_at_w,dz8w,g_dz8w,dt, &
 h_diabatic,g_h_diabatic,config_flags,fzm,fzp,ids,ide,jds,jde,kds,kde,ims,ime,jms, &
 jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde
 INTEGER :: ims,ime,jms,jme,kms,kme
 INTEGER :: its,ite,jts,jte,kts,kte
 REAL :: dt
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: al,g_al,alb,p,g_p,pb,ph,g_ph,phb
 REAL,DIMENSION(kms:kme) :: fzm,fzp
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: rho,g_rho,th_phy,g_th_phy,pii, &
 g_pii,pf,g_pf,z,g_z,z_at_w,g_z_at_w,dz8w,g_dz8w,p8w,g_p8w
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: h_diabatic,g_h_diabatic
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: t_new,g_t_new,t_old,g_t_old
 REAL :: t0,p0
 REAL :: z0,g_z0,z1,g_z1,z2,g_z2,w1,g_w1,w2,g_w2
 INTEGER :: i_start,i_end,j_start,j_end,k_start,k_end
 INTEGER :: i,j,k

 i_start =its
 i_end =min(ite,ide-1)
 j_start =jts
 j_end =min(jte,jde-1)
 k_start =kts
 k_end =min(kte,kde-1)

 DO j =j_start,j_end
 DO k =k_start,kte
 DO i =i_start,i_end

 g_z_at_w(i,k,j) =(g_ph(i,k,j))/g
 z_at_w(i,k,j) =(ph(i,k,j) +phb(i,k,j))/g

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =k_start,kte-1
 DO i =i_start,i_end

 g_dz8w(i,k,j) =g_z_at_w(i,k+1,j) -g_z_at_w(i,k,j)
 dz8w(i,k,j) =z_at_w(i,k+1,j) -z_at_w(i,k,j)

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO i =i_start,i_end

 g_dz8w(i,kte,j) =0.0
 dz8w(i,kte,j) =0.

 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end
#ifdef REVERT

 g_t_new(i,k,j) =g_t_new(i,k,j) -g_h_diabatic(i,k,j)*dt
 t_new(i,k,j) =t_new(i,k,j) -h_diabatic(i,k,j)*dt

#endif

 g_th_phy(i,k,j) =g_t_new(i,k,j)
 th_phy(i,k,j) =t_new(i,k,j) +t0

 g_h_diabatic(i,k,j) =g_th_phy(i,k,j)
 h_diabatic(i,k,j) =th_phy(i,k,j)

 g_rho(i,k,j) =-1.*(g_al(i,k,j))/((al(i,k,j) +alb(i,k,j))*(al(i,k,j) +alb(i,k,j)))
 rho(i,k,j) =1./(al(i,k,j) +alb(i,k,j))

 g_pii(i,k,j) =rcp*((g_p(i,k,j))/p0)*((p(i,k,j) +pb(i,k,j))/p0)**(rcp -1.0)
 pii(i,k,j) =((p(i,k,j) +pb(i,k,j))/p0)**rcp

 g_z(i,k,j) =0.5*(g_z_at_w(i,k,j) +g_z_at_w(i,k+1,j))
 z(i,k,j) =0.5*(z_at_w(i,k,j) +z_at_w(i,k+1,j))

 g_pf(i,k,j) =g_p(i,k,j)
 pf(i,k,j) =p(i,k,j) +pb(i,k,j)

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO k =2,k_end
 DO i =i_start,i_end

 g_p8w(i,k,j) =fzm(k)*g_pf(i,k,j) +fzp(k)*g_pf(i,k-1,j)
 p8w(i,k,j) =fzm(k)*pf(i,k,j) +fzp(k)*pf(i,k-1,j)

 ENDDO
 ENDDO
 ENDDO

 DO j =j_start,j_end
 DO i =i_start,i_end

 g_z0 =g_z_at_w(i,1,j)
 z0 =z_at_w(i,1,j)

 g_z1 =g_z(i,1,j)
 z1 =z(i,1,j)

 g_z2 =g_z(i,2,j)
 z2 =z(i,2,j)

 g_Tmpv1 =((g_z0 -g_z2)*(z1 -z2) -(g_z1 -g_z2)*(z0 -z2))/((z1 -z2)*(z1 -z2)) 
 Tmpv1 =(z0 -z2)/(z1 -z2)

 g_w1 =g_Tmpv1
 w1 =Tmpv1

 g_w2 =-g_w1
 w2 =1. -w1

 g_Tmpv1 =w1*g_pf(i,1,j) +g_w1*pf(i,1,j) 
 Tmpv1 =w1*pf(i,1,j)

 g_Tmpv2 =w2*g_pf(i,2,j) +g_w2*pf(i,2,j) 
 Tmpv2 =w2*pf(i,2,j)

 g_p8w(i,1,j) =g_Tmpv1 +g_Tmpv2
 p8w(i,1,j) =Tmpv1 +Tmpv2

 g_z0 =g_z_at_w(i,kte,j)
 z0 =z_at_w(i,kte,j)

 g_z1 =g_z(i,k_end,j)
 z1 =z(i,k_end,j)

 g_z2 =g_z(i,k_end-1,j)
 z2 =z(i,k_end-1,j)

 g_Tmpv1 =((g_z0 -g_z2)*(z1 -z2) -(g_z1 -g_z2)*(z0 -z2))/((z1 -z2)*(z1 -z2)) 
 Tmpv1 =(z0 -z2)/(z1 -z2)

 g_w1 =g_Tmpv1
 w1 =Tmpv1

 g_w2 =-g_w1
 w2 =1. -w1

 g_Tmpv1 =w1*g_pf(i,kde-1,j)/pf(i,kde-1,j) +g_w1*log(pf(i,kde-1,j)) 
 Tmpv1 =w1*log(pf(i,kde-1,j))

 g_Tmpv2 =w2*g_pf(i,kde-2,j)/pf(i,kde-2,j) +g_w2*log(pf(i,kde-2,j)) 
 Tmpv2 =w2*log(pf(i,kde-2,j))

 g_p8w(i,kde,j) =(g_Tmpv1 +g_Tmpv2)*exp(Tmpv1 +Tmpv2)
 p8w(i,kde,j) =exp(Tmpv1 +Tmpv2)

 ENDDO
 ENDDO

 END SUBROUTINE g_moist_physics_prep_em

! corrected by zzma 01/04/2011, added WRF_DFI_RADAR option

 SUBROUTINE g_moist_physics_finish_em(t_new,g_t_new,t_old,g_t_old,t0,mut, &
 g_mut,th_phy,g_th_phy,h_diabatic,g_h_diabatic,dt,config_flags,  &
#if ( WRF_DFI_RADAR == 1 )
 dfi_tten_rad, g_dfi_tten_rad,dfi_stage,  &
#endif
 ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite, &
 jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 TYPE(grid_config_rec_type) :: config_flags
 INTEGER :: ids,ide,jds,jde,kds,kde
 INTEGER :: ims,ime,jms,jme,kms,kme
 INTEGER :: its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: t_new,g_t_new,t_old,g_t_old,th_phy, &
 g_th_phy,h_diabatic,g_h_diabatic
#if ( WRF_DFI_RADAR == 1 )
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme), OPTIONAL :: dfi_tten_rad,g_dfi_tten_rad
 INTEGER, OPTIONAL :: dfi_stage
 REAL :: dfi_tten_max, old_max
 REAL :: g_dfi_tten_max, g_old_max

#endif
 REAL mpten,g_mpten,mptenmax,g_mptenmax,mptenmin,g_mptenmin
 REAL,DIMENSION(ims:ime,jms:jme) :: mut,g_mut
 REAL :: t0,dt
 INTEGER :: i_start,i_end,j_start,j_end,k_start,k_end
 INTEGER :: i,j,k,imax,jmax,imin,jmin

 i_start =its

 i_end =min(ite,ide-1)

 j_start =jts

 j_end =min(jte,jde-1)

 k_start =kts

 k_end =min(kte,kde-1)
#if ( WRF_DFI_RADAR == 1 )

 IF(config_flags%dfi_radar == 1 .and. PRESENT(dfi_stage) .and.  dfi_stage ==DFI_FWD .and. PRESENT(dfi_tten_rad) ) THEN

 WRITE (wrf_err_message,*) 'Add radar tendency: i_start,j_start: ',i_start,j_start
!This! line is fail to be recognized
!              CALL wrf_debug ( 50 , TRIM(wrf_err_message) )
 endif

 g_dfi_tten_max =0.0
 dfi_tten_max =-999

 g_old_max =0.0
 old_max =-999

#endif

 IF( config_flags%no_mp_heating .eq. 0 ) THEN

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end

 g_mpten =g_th_phy(i,k,j) -g_h_diabatic(i,k,j)
 mpten =th_phy(i,k,j) -h_diabatic(i,k,j)

#if ( WRF_DFI_RADAR == 1 )

! g_mpten =(g_config_flags%mp_tend_lim*dt +g_mpten -(g_config_flags%mp_tend_lim*dt -g_mpten)*sign(1.0, config_flags%mp_tend_lim*dt -(mpten)))*0.5
 g_mpten =min(config_flags%mp_tend_lim*dt,g_mpten)
 mpten =min(config_flags%mp_tend_lim*dt,mpten)

! g_mpten =(-g_config_flags%mp_tend_lim*dt +g_mpten +(-g_config_flags%mp_tend_lim*dt -g_mpten)*sign(1.0, -config_flags%mp_tend_lim*dt -(mpten)))*0.5
 g_mpten =max(-config_flags%mp_tend_lim*dt,g_mpten)
 mpten =max(-config_flags%mp_tend_lim*dt,mpten)

 IF(config_flags%dfi_radar == 1 .and. PRESENT(dfi_stage) .and.    &
           dfi_stage == DFI_FWD .and. PRESENT(dfi_tten_rad) .and.        &
  dfi_tten_rad(i,k,j) >= 1.0e-7 .and. dfi_tten_rad(i,k,j) <= 10.   &
  .and. k < k_end ) THEN

 IF(dfi_tten_rad(i,k,j) > mpten ) THEN

 g_t_new(i,k,j) =g_t_new(i,k,j) +(g_dfi_tten_rad(i,k,j))
 t_new(i,k,j) =t_new(i,k,j) +(dfi_tten_rad(i,k,j))

 else

 g_t_new(i,k,j) =g_t_new(i,k,j) +g_mpten
 t_new(i,k,j) =t_new(i,k,j) +mpten

 endif
 else

 g_t_new(i,k,j) =g_t_new(i,k,j) +g_mpten
 t_new(i,k,j) =t_new(i,k,j) +mpten

 endif
#else

 g_t_new(i,k,j) =g_t_new(i,k,j) +g_mpten
 t_new(i,k,j) =t_new(i,k,j) +mpten

#endif

 g_h_diabatic(i,k,j) =(g_th_phy(i,k,j) -g_h_diabatic(i,k,j))/dt
 h_diabatic(i,k,j) =(th_phy(i,k,j) -h_diabatic(i,k,j))/dt

 ENDDO
 ENDDO
 ENDDO
 ELSE

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end

 g_h_diabatic(i,k,j) =0.0
 h_diabatic(i,k,j) =0.

 ENDDO
 ENDDO
 ENDDO
 ENDIF

 END SUBROUTINE g_moist_physics_finish_em

SUBROUTINE g_init_module_big_step

 END SUBROUTINE g_init_module_big_step

 SUBROUTINE g_set_tend(field,g_field,field_adv_tend,g_field_adv_tend,msf, &
! Revised by Ning Pan, 2010-07-19
! g_msf,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)
 ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field_adv_tend,g_field_adv_tend
! Revised by Ning Pan, 2010-07-19
! REAL,DIMENSION(ims:ime,jms:jme) :: msf,g_msf
 REAL,DIMENSION(ims:ime,jms:jme) :: msf,g_msf

 INTEGER :: i,j,k,itf,jtf,ktf

 jtf =min(jte,jde-1)

 ktf =min(kte,kde-1)

 itf =min(ite,ide-1)

 DO j =jts,jtf
 DO k =kts,ktf
 DO i =its,itf

! Revised by Ning Pan, 2010-07-19
! g_Tmpv1 =field_adv_tend(i,k,j)*g_msf(i,j) +g_field_adv_tend(i,k,j)*msf(i,j) 
 g_Tmpv1 =g_field_adv_tend(i,k,j)*msf(i,j) 
 Tmpv1 =field_adv_tend(i,k,j)*msf(i,j)

 g_field(i,k,j) =g_Tmpv1
 field(i,k,j) =Tmpv1

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_set_tend

 SUBROUTINE g_rk_rayleigh_damp(ru_tendf,g_ru_tendf,rv_tendf,g_rv_tendf, &
 rw_tendf,g_rw_tendf,t_tendf,g_t_tendf,u,g_u,v,g_v,w,g_w,t,g_t, &
! Revised by Ning Pan, 2010-07-23
! t_init,g_t_init,mut,g_mut,muu,g_muu,muv,g_muv,ph,g_ph,phb,g_phb, &
! u_base,g_u_base,v_base,g_v_base,t_base,g_t_base,z_base,g_z_base,dampcoef, &
! g_dampcoef,zdamp,g_zdamp,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its, &
 t_init,mut,g_mut,muu,g_muu,muv,g_muv,ph,g_ph,phb, &
 u_base,v_base,t_base,z_base,dampcoef, &
 zdamp,ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its, &
 ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: ru_tendf,g_ru_tendf,rv_tendf, &
 g_rv_tendf,rw_tendf,g_rw_tendf,t_tendf,g_t_tendf
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: u,g_u,v,g_v,w,g_w,t,g_t, &
! Revised by Ning Pan, 2010-07-23
! t_init,g_t_init,ph,g_ph,phb,g_phb
 t_init,ph,g_ph,phb
 REAL,DIMENSION(ims:ime,jms:jme) :: mut,g_mut,muu,g_muu,muv,g_muv
! Revised by Ning Pan, 2010-07-23
! REAL,DIMENSION(kms:kme) :: u_base,g_u_base,v_base,g_v_base,t_base,g_t_base, &
! z_base,g_z_base
 REAL,DIMENSION(kms:kme) :: u_base,v_base,t_base,z_base
! REAL :: dampcoef,g_dampcoef,zdamp,g_zdamp
 REAL :: dampcoef,zdamp
 INTEGER :: i_start,i_end,j_start,j_end,k_start,k_end,i,j,k,ktf,k1,k2
! Revised by Ning Pan, 2010-07-23
! REAL :: pii,g_pii,dcoef,g_dcoef,z,g_z,ztop,g_ztop
 REAL :: pii,dcoef,g_dcoef,z,g_z,ztop,g_ztop
! REAL :: wkp1,g_wkp1,wk,g_wk,wkm1,g_wkm1  ! Remarked by Ning Pan, 2010-07-23
 REAL,DIMENSION(kms:kme) :: z00,g_z00,u00,g_u00,v00,g_v00,t00,g_t00

! g_pii =0.0  ! Remarked by Ning Pan, 2010-07-23
 pii =2.0 *Asin(1.0)

 ktf =min(kte,kde-1)

 DO j =jts,min(jte,jde-1)
 DO i =its,min(ite,ide)

! Revised by Ning Pan, 2010-07-23
! g_ztop =0.5*(g_phb(i,kde,j) +g_phb(i-1,kde,j) +g_ph(i,kde,j) &
! +g_ph(i-1,kde,j))/g
 g_ztop =0.5*(g_ph(i,kde,j) +g_ph(i-1,kde,j))/g
 ztop =0.5*(phb(i,kde,j) +phb(i-1,kde,j) +ph(i,kde,j) +ph(i-1,kde,j))/g

 k1 =ktf

 g_z =g_ztop
 z =ztop

!This line is fail to be recognized
       DO WHILE( z >= (ztop-zdamp) )

! Revised by Ning Pan, 2010-07-23
! g_z =0.25*(g_phb(i,k1,j) +g_phb(i,k1+1,j) +g_phb(i-1,k1,j) +g_phb(i-1, &
! k1+1,j) +g_ph(i,k1,j) +g_ph(i,k1+1,j) +g_ph(i-1,k1,j) +g_ph(i-1,k1+1,j))/g
 g_z =0.25*(g_ph(i,k1,j) +g_ph(i,k1+1,j) +g_ph(i-1,k1,j) +g_ph(i-1,k1+1,j))/g
 z =0.25*(phb(i,k1,j) +phb(i,k1+1,j) +phb(i-1,k1,j) +phb(i-1,k1+1,j) +ph(i,k1,j) &
 +ph(i,k1+1,j) +ph(i-1,k1,j) +ph(i-1,k1+1,j))/g

 g_z00(k1) =g_z
 z00(k1) =z

 k1 =k1-1
 ENDDO

 k1 =k1+2

 DO k =k1,ktf

 k2 =ktf

 DO WHILE(z_base(k2) .gt. z00(k))

 k2 =k2-1
 ENDDO

 IF(k2+1.gt.ktf) THEN

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =(u_base(k2) -u_base(k2-1))*(g_z00(k) -g_z_base(k2)) +(g_u_base( &
! k2) -g_u_base(k2-1))*(z00(k) -z_base(k2)) 
 g_Tmpv1 =(u_base(k2) -u_base(k2-1))*g_z00(k)
 Tmpv1 =(u_base(k2) -u_base(k2-1))*(z00(k) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv2 =(g_Tmpv1*(z_base(k2) -z_base(k2-1)) -(g_z_base(k2) -g_z_base( &
! k2-1))*Tmpv1)/((z_base(k2) -z_base(k2-1))*(z_base(k2) -z_base(k2-1))) 
 g_Tmpv2 =g_Tmpv1/(z_base(k2) -z_base(k2-1))
 Tmpv2 =Tmpv1/(z_base(k2) -z_base(k2-1))

! Revised by Ning Pan, 2010-07-23
! g_u00(k) =g_u_base(k2) +g_Tmpv2
 g_u00(k) =g_Tmpv2
 u00(k) =u_base(k2) +Tmpv2

 else

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =(u_base(k2+1) -u_base(k2))*(g_z00(k) -g_z_base(k2)) +(g_u_base( &
! k2+1) -g_u_base(k2))*(z00(k) -z_base(k2)) 
 g_Tmpv1 =(u_base(k2+1) -u_base(k2))*g_z00(k)
 Tmpv1 =(u_base(k2+1) -u_base(k2))*(z00(k) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv2 =(g_Tmpv1*(z_base(k2+1) -z_base(k2)) -(g_z_base(k2+1) &
! -g_z_base(k2))*Tmpv1)/((z_base(k2+1) -z_base(k2))*(z_base(k2+1) -z_base(k2))) 
 g_Tmpv2 =g_Tmpv1/(z_base(k2+1) -z_base(k2))
 Tmpv2 =Tmpv1/(z_base(k2+1) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_u00(k) =g_u_base(k2) +g_Tmpv2
 g_u00(k) =g_Tmpv2
 u00(k) =u_base(k2) +Tmpv2

 endif
 ENDDO

 DO k =k1,ktf

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =((g_ztop -g_z00(k))*zdamp -g_zdamp*(ztop -z00(k)))/(zdamp*zdamp) 
 g_Tmpv1 =(g_ztop -g_z00(k))/zdamp
 Tmpv1 =(ztop -z00(k))/zdamp

 g_dcoef =-(0.0 +g_Tmpv1 -(0.0 -g_Tmpv1)*sign(1.0, 1.0 -(Tmpv1)))*0.5
 dcoef =1.0 -min(1.0,Tmpv1)

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =0.5*pii*g_dcoef +0.5*g_pii*dcoef 
 g_Tmpv1 =0.5*pii*g_dcoef
 Tmpv1 =0.5*pii*dcoef

 g_dcoef =2.0*(g_Tmpv1*cos(Tmpv1))*(sin(Tmpv1))
 dcoef =(sin(Tmpv1))**2

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =dcoef*g_dampcoef +g_dcoef*dampcoef 
 g_Tmpv1 =g_dcoef*dampcoef 
 Tmpv1 =dcoef*dampcoef

 g_Tmpv2 =muu(i,j)*(g_Tmpv1) +g_muu(i,j)*(Tmpv1) 
 Tmpv2 =muu(i,j)*(Tmpv1)

 g_Tmpv3 =Tmpv2*(g_u(i,k,j) -g_u00(k)) +g_Tmpv2*(u(i,k,j) -u00(k)) 
 Tmpv3 =Tmpv2*(u(i,k,j) -u00(k))

 g_ru_tendf(i,k,j) =g_ru_tendf(i,k,j) -g_Tmpv3
 ru_tendf(i,k,j) =ru_tendf(i,k,j) -Tmpv3

 ENDDO
 ENDDO
 ENDDO

 DO j =jts,min(jte,jde)
 DO i =its,min(ite,ide-1)

! Revised by Ning Pan, 2010-07-23
! g_ztop =0.5*(g_phb(i,kde,j) +g_phb(i,kde,j-1) +g_ph(i,kde,j) &
! +g_ph(i,kde,j-1))/g
 g_ztop =0.5*(g_ph(i,kde,j) +g_ph(i,kde,j-1))/g
 ztop =0.5*(phb(i,kde,j) +phb(i,kde,j-1) +ph(i,kde,j) +ph(i,kde,j-1))/g

 k1 =ktf

 g_z =g_ztop
 z =ztop

!This line is fail to be recognized
       DO WHILE( z >= (ztop-zdamp) )

! Revised by Ning Pan, 2010-07-23
! g_z =0.25*(g_phb(i,k1,j) +g_phb(i,k1+1,j) +g_phb(i,k1,j-1) +g_phb(i, &
! k1+1,j-1) +g_ph(i,k1,j) +g_ph(i,k1+1,j) +g_ph(i,k1,j-1) +g_ph(i,k1+1,j-1))/g
 g_z =0.25*(g_ph(i,k1,j) +g_ph(i,k1+1,j) +g_ph(i,k1,j-1) +g_ph(i,k1+1,j-1))/g
 z =0.25*(phb(i,k1,j) +phb(i,k1+1,j) +phb(i,k1,j-1) +phb(i,k1+1,j-1) +ph(i,k1,j) &
 +ph(i,k1+1,j) +ph(i,k1,j-1) +ph(i,k1+1,j-1))/g

 g_z00(k1) =g_z
 z00(k1) =z

 k1 =k1-1
 ENDDO

 k1 =k1+2

 DO k =k1,ktf

 k2 =ktf

 DO WHILE(z_base(k2) .gt. z00(k))

 k2 =k2-1
 ENDDO

 IF(k2+1.gt.ktf) THEN

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =(v_base(k2) -v_base(k2-1))*(g_z00(k) -g_z_base(k2)) +(g_v_base( &
! k2) -g_v_base(k2-1))*(z00(k) -z_base(k2)) 
 g_Tmpv1 =(v_base(k2) -v_base(k2-1))*g_z00(k)
 Tmpv1 =(v_base(k2) -v_base(k2-1))*(z00(k) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv2 =(g_Tmpv1*(z_base(k2) -z_base(k2-1)) -(g_z_base(k2) -g_z_base( &
! k2-1))*Tmpv1)/((z_base(k2) -z_base(k2-1))*(z_base(k2) -z_base(k2-1))) 
 g_Tmpv2 =g_Tmpv1/(z_base(k2) -z_base(k2-1))
 Tmpv2 =Tmpv1/(z_base(k2) -z_base(k2-1))

! Revised by Ning Pan, 2010-07-23
! g_v00(k) =g_v_base(k2) +g_Tmpv2
 g_v00(k) =g_Tmpv2
 v00(k) =v_base(k2) +Tmpv2

 else

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =(v_base(k2+1) -v_base(k2))*(g_z00(k) -g_z_base(k2)) +(g_v_base( &
! k2+1) -g_v_base(k2))*(z00(k) -z_base(k2)) 
 g_Tmpv1 =(v_base(k2+1) -v_base(k2))*g_z00(k)
 Tmpv1 =(v_base(k2+1) -v_base(k2))*(z00(k) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv2 =(g_Tmpv1*(z_base(k2+1) -z_base(k2)) -(g_z_base(k2+1) &
! -g_z_base(k2))*Tmpv1)/((z_base(k2+1) -z_base(k2))*(z_base(k2+1) -z_base(k2))) 
 g_Tmpv2 =g_Tmpv1/(z_base(k2+1) -z_base(k2))
 Tmpv2 =Tmpv1/(z_base(k2+1) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_v00(k) =g_v_base(k2) +g_Tmpv2
 g_v00(k) =g_Tmpv2
 v00(k) =v_base(k2) +Tmpv2

 endif
 ENDDO

 DO k =k1,ktf

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =((g_ztop -g_z00(k))*zdamp -g_zdamp*(ztop -z00(k)))/(zdamp*zdamp) 
 g_Tmpv1 =(g_ztop -g_z00(k))/zdamp
 Tmpv1 =(ztop -z00(k))/zdamp

 g_dcoef =-(0.0 +g_Tmpv1 -(0.0 -g_Tmpv1)*sign(1.0, 1.0 -(Tmpv1)))*0.5
 dcoef =1.0 -min(1.0,Tmpv1)

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =0.5*pii*g_dcoef +0.5*g_pii*dcoef 
 g_Tmpv1 =0.5*pii*g_dcoef
 Tmpv1 =0.5*pii*dcoef

 g_dcoef =2.0*(g_Tmpv1*cos(Tmpv1))*(sin(Tmpv1))
 dcoef =(sin(Tmpv1))**2

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =dcoef*g_dampcoef +g_dcoef*dampcoef 
 g_Tmpv1 =g_dcoef*dampcoef 
 Tmpv1 =dcoef*dampcoef

 g_Tmpv2 =muv(i,j)*(g_Tmpv1) +g_muv(i,j)*(Tmpv1) 
 Tmpv2 =muv(i,j)*(Tmpv1)

 g_Tmpv3 =Tmpv2*(g_v(i,k,j) -g_v00(k)) +g_Tmpv2*(v(i,k,j) -v00(k)) 
 Tmpv3 =Tmpv2*(v(i,k,j) -v00(k))

 g_rv_tendf(i,k,j) =g_rv_tendf(i,k,j) -g_Tmpv3
 rv_tendf(i,k,j) =rv_tendf(i,k,j) -Tmpv3

 ENDDO
 ENDDO
 ENDDO

 DO j =jts,min(jte,jde-1)
 DO i =its,min(ite,ide-1)

! Revised by Ning Pan, 2010-07-23
! g_ztop =(g_phb(i,kde,j) +g_ph(i,kde,j))/g
 g_ztop =g_ph(i,kde,j)/g
 ztop =(phb(i,kde,j) +ph(i,kde,j))/g

 DO k =kts,min(kte,kde)

! Revised by Ning Pan, 2010-07-23
! g_z =(g_phb(i,k,j) +g_ph(i,k,j))/g
 g_z =g_ph(i,k,j)/g
 z =(phb(i,k,j) +ph(i,k,j))/g

 IF( z >= (ztop-zdamp) ) THEN

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =((g_ztop -g_z)*zdamp -g_zdamp*(ztop -z))/(zdamp*zdamp) 
 g_Tmpv1 =(g_ztop -g_z)/zdamp
 Tmpv1 =(ztop -z)/zdamp

 g_dcoef =-(0.0 +g_Tmpv1 -(0.0 -g_Tmpv1)*sign(1.0, 1.0 -(Tmpv1)))*0.5
 dcoef =1.0 -min(1.0,Tmpv1)

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =0.5*pii*g_dcoef +0.5*g_pii*dcoef 
 g_Tmpv1 =0.5*pii*g_dcoef
 Tmpv1 =0.5*pii*dcoef

 g_dcoef =2.0*(g_Tmpv1*cos(Tmpv1))*(sin(Tmpv1))
 dcoef =(sin(Tmpv1))**2

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =dcoef*g_dampcoef +g_dcoef*dampcoef 
 g_Tmpv1 =g_dcoef*dampcoef 
 Tmpv1 =dcoef*dampcoef

 g_Tmpv2 =mut(i,j)*(g_Tmpv1) +g_mut(i,j)*(Tmpv1) 
 Tmpv2 =mut(i,j)*(Tmpv1)

 g_Tmpv3 =Tmpv2*g_w(i,k,j) +g_Tmpv2*w(i,k,j) 
 Tmpv3 =Tmpv2*w(i,k,j)

 g_rw_tendf(i,k,j) =g_rw_tendf(i,k,j) -g_Tmpv3
 rw_tendf(i,k,j) =rw_tendf(i,k,j) -Tmpv3

 END IF
 ENDDO
 ENDDO
 ENDDO

 DO j =jts,min(jte,jde-1)
 DO i =its,min(ite,ide-1)

! Revised by Ning Pan, 2010-07-23
! g_ztop =(g_phb(i,kde,j) +g_ph(i,kde,j))/g
 g_ztop =g_ph(i,kde,j)/g
 ztop =(phb(i,kde,j) +ph(i,kde,j))/g

 k1 =ktf

 g_z =g_ztop
 z =ztop

!This line is fail to be recognized
       DO WHILE( z >= (ztop-zdamp) )

! Revised by Ning Pan, 2010-07-23
! g_z =0.5*(g_phb(i,k1,j) +g_phb(i,k1+1,j) +g_ph(i,k1,j) +g_ph(i,k1+1,j))/g
 g_z =0.5*(g_ph(i,k1,j) +g_ph(i,k1+1,j))/g
 z =0.5*(phb(i,k1,j) +phb(i,k1+1,j) +ph(i,k1,j) +ph(i,k1+1,j))/g

 g_z00(k1) =g_z
 z00(k1) =z

 k1 =k1-1
 ENDDO

 k1 =k1+2

 DO k =k1,ktf

 k2 =ktf

 DO WHILE(z_base(k2) .gt. z00(k))

 k2 =k2-1
 ENDDO

 IF(k2+1.gt.ktf) THEN

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =(t_base(k2) -t_base(k2-1))*(g_z00(k) -g_z_base(k2)) +(g_t_base( &
! k2) -g_t_base(k2-1))*(z00(k) -z_base(k2)) 
 g_Tmpv1 =(t_base(k2) -t_base(k2-1))*g_z00(k)
 Tmpv1 =(t_base(k2) -t_base(k2-1))*(z00(k) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv2 =(g_Tmpv1*(z_base(k2) -z_base(k2-1)) -(g_z_base(k2) -g_z_base( &
! k2-1))*Tmpv1)/((z_base(k2) -z_base(k2-1))*(z_base(k2) -z_base(k2-1))) 
 g_Tmpv2 =g_Tmpv1/(z_base(k2) -z_base(k2-1))
 Tmpv2 =Tmpv1/(z_base(k2) -z_base(k2-1))

! Revised by Ning Pan, 2010-07-23
! g_t00(k) =g_t_base(k2) +g_Tmpv2
 g_t00(k) =g_Tmpv2
 t00(k) =t_base(k2) +Tmpv2

 else

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =(t_base(k2+1) -t_base(k2))*(g_z00(k) -g_z_base(k2)) +(g_t_base( &
! k2+1) -g_t_base(k2))*(z00(k) -z_base(k2)) 
 g_Tmpv1 =(t_base(k2+1) -t_base(k2))*g_z00(k)
 Tmpv1 =(t_base(k2+1) -t_base(k2))*(z00(k) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_Tmpv2 =(g_Tmpv1*(z_base(k2+1) -z_base(k2)) -(g_z_base(k2+1) &
! -g_z_base(k2))*Tmpv1)/((z_base(k2+1) -z_base(k2))*(z_base(k2+1) -z_base(k2))) 
 g_Tmpv2 =g_Tmpv1/(z_base(k2+1) -z_base(k2))
 Tmpv2 =Tmpv1/(z_base(k2+1) -z_base(k2))

! Revised by Ning Pan, 2010-07-23
! g_t00(k) =g_t_base(k2) +g_Tmpv2
 g_t00(k) =g_Tmpv2
 t00(k) =t_base(k2) +Tmpv2

 endif
 ENDDO

 DO k =k1,ktf

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =((g_ztop -g_z00(k))*zdamp -g_zdamp*(ztop -z00(k)))/(zdamp*zdamp) 
 g_Tmpv1 =(g_ztop -g_z00(k))/zdamp
 Tmpv1 =(ztop -z00(k))/zdamp

 g_dcoef =-(0.0 +g_Tmpv1 -(0.0 -g_Tmpv1)*sign(1.0, 1.0 -(Tmpv1)))*0.5
 dcoef =1.0 -min(1.0,Tmpv1)

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =0.5*pii*g_dcoef +0.5*g_pii*dcoef 
 g_Tmpv1 =0.5*pii*g_dcoef
 Tmpv1 =0.5*pii*dcoef

 g_dcoef =2.0*(g_Tmpv1*cos(Tmpv1))*(sin(Tmpv1))
 dcoef =(sin(Tmpv1))**2

! Revised by Ning Pan, 2010-07-23
! g_Tmpv1 =dcoef*g_dampcoef +g_dcoef*dampcoef 
 g_Tmpv1 =g_dcoef*dampcoef 
 Tmpv1 =dcoef*dampcoef

 g_Tmpv2 =mut(i,j)*(g_Tmpv1) +g_mut(i,j)*(Tmpv1) 
 Tmpv2 =mut(i,j)*(Tmpv1)

 g_Tmpv3 =Tmpv2*(g_t(i,k,j) -g_t00(k)) +g_Tmpv2*(t(i,k,j) -t00(k)) 
 Tmpv3 =Tmpv2*(t(i,k,j) -t00(k))

 g_t_tendf(i,k,j) =g_t_tendf(i,k,j) -g_Tmpv3
 t_tendf(i,k,j) =t_tendf(i,k,j) -Tmpv3

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_rk_rayleigh_damp

 SUBROUTINE g_sixth_order_diffusion(name,field,g_field,tendency,g_tendency, &
! Revised by Ning Pan, 2010-07-23
! mu,g_mu,dt,g_dt,config_flags,diff_6th_opt,diff_6th_factor,g_diff_6th_factor, &
 mu,g_mu,dt,config_flags,diff_6th_opt,diff_6th_factor, &
 ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

 IMPLICIT NONE

 REAL :: Tmpv1,g_Tmpv1,Tmpv2,g_Tmpv2,Tmpv3,g_Tmpv3
 INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
 TYPE(grid_config_rec_type) :: config_flags
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,g_tendency
 REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,g_field
 REAL,DIMENSION(ims:ime,jms:jme) :: mu,g_mu
! Revised by Ning Pan, 2010-07-23
! REAL :: dt,g_dt
! REAL :: diff_6th_factor,g_diff_6th_factor
 REAL :: dt
 REAL :: diff_6th_factor
 INTEGER :: diff_6th_opt
 CHARACTER (LEN=1) :: name
 INTEGER :: i,j,k,i_start,i_end,j_start,j_end,k_start,k_end,ktf
 REAL :: dflux_x_p0,g_dflux_x_p0,dflux_y_p0,g_dflux_y_p0,dflux_x_p1, &
 g_dflux_x_p1,dflux_y_p1,g_dflux_y_p1,tendency_x,g_tendency_x,tendency_y, &
! Revised by Ning Pan, 2010-07-23
! g_tendency_y,mu_avg_p0,g_mu_avg_p0,mu_avg_p1,g_mu_avg_p1,diff_6th_coef, &
! g_diff_6th_coef
 g_tendency_y,mu_avg_p0,g_mu_avg_p0,mu_avg_p1,g_mu_avg_p1,diff_6th_coef
 LOGICAL :: specified

! Remarked by Ning Pan, 2010-07-23
! g_Tmpv1 =(g_diff_6th_factor*0.015625*(2.0*dt) -(2.0*g_dt)*diff_6th_factor* &
! 0.015625)/((2.0*dt)*(2.0*dt)) 
 Tmpv1 =diff_6th_factor*0.015625/(2.0*dt)

! Remarked by Ning Pan, 2010-07-23
! g_diff_6th_coef =g_Tmpv1
 diff_6th_coef =Tmpv1

 ktf =min(kte,kde-1)

 IF( name .EQ. 'u' ) THEN

 i_start =its

 i_end =ite

 j_start =jts

 j_end =min(jde-1,jte)

 k_start =kts

 k_end =ktf
 ELSE IF( name .EQ. 'v' ) THEN

 i_start =its

 i_end =min(ide-1,ite)

 j_start =jts

 j_end =jte

 k_start =kts

 k_end =ktf
 ELSE IF( name .EQ. 'w' ) THEN

 i_start =its

 i_end =min(ide-1,ite)

 j_start =jts

 j_end =min(jde-1,jte)

 k_start =kts+1

 k_end =ktf
 ELSE

 i_start =its

 i_end =min(ide-1,ite)

 j_start =jts

 j_end =min(jde-1,jte)

 k_start =kts

 k_end =ktf
 ENDIF

 DO j =j_start,j_end
 DO k =k_start,k_end
 DO i =i_start,i_end

 g_dflux_x_p0 =(10.0*(g_field(i,k,j) -g_field(i-1,k,j)) -5.0*(g_field(i+1, &
 k,j) -g_field(i-2,k,j)) +(g_field(i+2,k,j) -g_field(i-3,k,j)))
 dflux_x_p0 =(10.0*(field(i,k,j) -field(i-1,k,j)) -5.0*(field(i+1,k,j) -field(i-2,k, &
 j)) +(field(i+2,k,j) -field(i-3,k,j)))

 g_dflux_x_p1 =(10.0*(g_field(i+1,k,j) -g_field(i,k,j)) -5.0*(g_field(i+2, &
 k,j) -g_field(i-1,k,j)) +(g_field(i+3,k,j) -g_field(i-2,k,j)))
 dflux_x_p1 =(10.0*(field(i+1,k,j) -field(i,k,j)) -5.0*(field(i+2,k,j) -field(i-1,k, &
 j)) +(field(i+3,k,j) -field(i-2,k,j)))

 IF( diff_6th_opt .EQ. 2 ) THEN

 IF( dflux_x_p0 * ( field(i  ,k,j)-field(i-1,k,j) ) .LE. 0.0 ) THEN

 g_dflux_x_p0 =0.0
 dflux_x_p0 =0.0

 END IF

 IF( dflux_x_p1 * ( field(i+1,k,j)-field(i  ,k,j) ) .LE. 0.0 ) THEN

 g_dflux_x_p1 =0.0
 dflux_x_p1 =0.0

 END IF
 END IF

 IF( name .EQ. 'u' ) THEN

 g_mu_avg_p0 =g_mu(i-1,j)
 mu_avg_p0 =mu(i-1,j)

 g_mu_avg_p1 =g_mu(i,j)
 mu_avg_p1 =mu(i,j)

 ELSE IF( name .EQ. 'v' ) THEN

 g_mu_avg_p0 =0.25*(g_mu(i-1,j-1) +g_mu(i,j-1) +g_mu(i-1,j) +g_mu(i,j))
 mu_avg_p0 =0.25*(mu(i-1,j-1) +mu(i,j-1) +mu(i-1,j) +mu(i,j))

 g_mu_avg_p1 =0.25*(g_mu(i,j-1) +g_mu(i+1,j-1) +g_mu(i,j) +g_mu(i+1,j))
 mu_avg_p1 =0.25*(mu(i,j-1) +mu(i+1,j-1) +mu(i,j) +mu(i+1,j))

 ELSE

 g_mu_avg_p0 =0.5*(g_mu(i-1,j) +g_mu(i,j))
 mu_avg_p0 =0.5*(mu(i-1,j) +mu(i,j))

 g_mu_avg_p1 =0.5*(g_mu(i,j) +g_mu(i+1,j))
 mu_avg_p1 =0.5*(mu(i,j) +mu(i+1,j))

 END IF

 g_Tmpv1 =mu_avg_p1*g_dflux_x_p1 +g_mu_avg_p1*dflux_x_p1 
 Tmpv1 =mu_avg_p1*dflux_x_p1

 g_Tmpv2 =mu_avg_p0*g_dflux_x_p0 +g_mu_avg_p0*dflux_x_p0 
 Tmpv2 =mu_avg_p0*dflux_x_p0

! Revised by Ning Pan, 2010-07-23
! g_Tmpv3 =diff_6th_coef*((g_Tmpv1) -(g_Tmpv2)) +g_diff_6th_coef*((Tmpv1) -(Tmpv2)) 
 g_Tmpv3 =diff_6th_coef*((g_Tmpv1) -(g_Tmpv2))
 Tmpv3 =diff_6th_coef*((Tmpv1) -(Tmpv2))

 g_tendency_x =g_Tmpv3
 tendency_x =Tmpv3

 g_dflux_y_p0 =(10.0*(g_field(i,k,j) -g_field(i,k,j-1)) -5.0*(g_field(i,k, &
 j+1) -g_field(i,k,j-2)) +(g_field(i,k,j+2) -g_field(i,k,j-3)))
 dflux_y_p0 =(10.0*(field(i,k,j) -field(i,k,j-1)) -5.0*(field(i,k,j+1) -field(i,k,j- &
 2)) +(field(i,k,j+2) -field(i,k,j-3)))

 g_dflux_y_p1 =(10.0*(g_field(i,k,j+1) -g_field(i,k,j)) -5.0*(g_field(i,k, &
 j+2) -g_field(i,k,j-1)) +(g_field(i,k,j+3) -g_field(i,k,j-2)))
 dflux_y_p1 =(10.0*(field(i,k,j+1) -field(i,k,j)) -5.0*(field(i,k,j+2) -field(i,k,j- &
 1)) +(field(i,k,j+3) -field(i,k,j-2)))

 IF( diff_6th_opt .EQ. 2 ) THEN

 IF( dflux_y_p0 * ( field(i,k,j  )-field(i,k,j-1) ) .LE. 0.0 ) THEN

 g_dflux_y_p0 =0.0
 dflux_y_p0 =0.0

 END IF

 IF( dflux_y_p1 * ( field(i,k,j+1)-field(i,k,j  ) ) .LE. 0.0 ) THEN

 g_dflux_y_p1 =0.0
 dflux_y_p1 =0.0

 END IF
 END IF

 IF( name .EQ. 'u' ) THEN

 g_mu_avg_p0 =0.25*(g_mu(i-1,j-1) +g_mu(i,j-1) +g_mu(i-1,j) +g_mu(i,j))
 mu_avg_p0 =0.25*(mu(i-1,j-1) +mu(i,j-1) +mu(i-1,j) +mu(i,j))

 g_mu_avg_p1 =0.25*(g_mu(i-1,j) +g_mu(i,j) +g_mu(i-1,j+1) +g_mu(i,j+1))
 mu_avg_p1 =0.25*(mu(i-1,j) +mu(i,j) +mu(i-1,j+1) +mu(i,j+1))

 ELSE IF( name .EQ. 'v' ) THEN

 g_mu_avg_p0 =g_mu(i,j-1)
 mu_avg_p0 =mu(i,j-1)

 g_mu_avg_p1 =g_mu(i,j)
 mu_avg_p1 =mu(i,j)

 ELSE

 g_mu_avg_p0 =0.5*(g_mu(i,j-1) +g_mu(i,j))
 mu_avg_p0 =0.5*(mu(i,j-1) +mu(i,j))

 g_mu_avg_p1 =0.5*(g_mu(i,j) +g_mu(i,j+1))
 mu_avg_p1 =0.5*(mu(i,j) +mu(i,j+1))

 END IF

 g_Tmpv1 =mu_avg_p1*g_dflux_y_p1 +g_mu_avg_p1*dflux_y_p1 
 Tmpv1 =mu_avg_p1*dflux_y_p1

 g_Tmpv2 =mu_avg_p0*g_dflux_y_p0 +g_mu_avg_p0*dflux_y_p0 
 Tmpv2 =mu_avg_p0*dflux_y_p0

! Revised by Ning Pan, 2010-07-23
! g_Tmpv3 =diff_6th_coef*((g_Tmpv1) -(g_Tmpv2)) +g_diff_6th_coef*((Tmpv1) -(Tmpv2)) 
 g_Tmpv3 =diff_6th_coef*((g_Tmpv1) -(g_Tmpv2))
 Tmpv3 =diff_6th_coef*((Tmpv1) -(Tmpv2))

 g_tendency_y =g_Tmpv3
 tendency_y =Tmpv3

 g_tendency(i,k,j) =g_tendency(i,k,j) +g_tendency_x +g_tendency_y
 tendency(i,k,j) =tendency(i,k,j) +tendency_x +tendency_y

 ENDDO
 ENDDO
 ENDDO

 END SUBROUTINE g_sixth_order_diffusion

 SUBROUTINE g_vpow_local(z,g_z,y,g_y,x,g_x,n)

 REAL x(*),g_x(*),y(*),g_y(*),z(*),g_z(*)

 DO j =1,n

 g_z(j) =(y(j)*log(y(j))*g_x(j) +x(j)*g_y(j))*y(j)**(x(j) -1.0)
! z(j) =y(j)**x(j)  ! Remarked by Ning Pan

 ENDDO

 END SUBROUTINE g_vpow_local

 END MODULE g_module_big_step_utilities_em

