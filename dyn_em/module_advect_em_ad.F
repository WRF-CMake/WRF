
! ======================================================================================
! This file was generated by the version 4.3.7 of ADG on 07/17/2010. The Adjoint Code
! Generator (ADG) was developed and sponsored by LASG of IAP (1999-2010)
! The Copyright of the ADG system was declared by Walls at LASG, 1999-2010
! ======================================================================================

MODULE a_module_advect_em

   USE module_bc
   USE module_model_constants
   USE module_wrf_error

CONTAINS

!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.5 (r3785) - 22 Mar 2011 18:35
!
!  Differentiation of advect_u in reverse (adjoint) mode:
!   gradient     of useful results: rom u tendency u_old ru rv
!                mut
!   with respect to varying inputs: rom u tendency u_old ru rv
!                mut
!   RW status of diff variables: rom:incr u:incr tendency:in-out
!                u_old:incr ru:incr rv:incr mut:incr
SUBROUTINE A_ADVECT_U(u, ub0, u_old, u_oldb, tendency, tendencyb, ru, &
&  rub, rv, rvb, rom, romb, mut, mutb, time_step, config_flags, msfux, &
&  msfuy, msfvx, msfvy, msftx, msfty, fzm, fzp, rdx, rdy, rdzw, ids, ide&
&  , jds, jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte&
&  , kts, kte)
  IMPLICIT NONE
! Input data
  TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
  INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&  jme, kms, kme, its, ite, jts, jte, kts, kte
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: u, u_old, ru&
&  , rv, rom
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: ub0, u_oldb, rub, rvb, &
&  romb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: mut
  REAL, DIMENSION(ims:ime, jms:jme) :: mutb
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(INOUT) :: tendency
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: tendencyb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: msfux, msfuy, msfvx, &
&  msfvy, msftx, msfty
  REAL, DIMENSION(kms:kme), INTENT(IN) :: fzm, fzp, rdzw
  REAL, INTENT(IN) :: rdx, rdy
  INTEGER, INTENT(IN) :: time_step
! Local data
  INTEGER :: i, j, k, itf, jtf, ktf
  INTEGER :: i_start, i_end, j_start, j_end
  INTEGER :: i_start_f, i_end_f, j_start_f, j_end_f
  INTEGER :: jmin, jmax, jp, jm, imin, imax, im, ip
  INTEGER :: jp1, jp0, jtmp
  INTEGER :: horz_order, vert_order
  REAL :: mrdx, mrdy, ub, vb, uw, vw, dvm, dvp
  REAL :: ubb, vbb, vwb, dvmb, dvpb
  REAL, DIMENSION(its:ite, kts:kte) :: vflux
  REAL, DIMENSION(its:ite, kts:kte) :: vfluxb
  REAL, DIMENSION(its - 1:ite + 1, kts:kte) :: fqx
  REAL, DIMENSION(its-1:ite+1, kts:kte) :: fqxb
  REAL, DIMENSION(its:ite, kts:kte, 2) :: fqy
  REAL, DIMENSION(its:ite, kts:kte, 2) :: fqyb
  LOGICAL :: degrade_xs, degrade_ys
  LOGICAL :: degrade_xe, degrade_ye
! definition of flux operators, 3rd, 4th, 5th or 6th order
  REAL :: flux3, flux4, flux5, flux6
  REAL :: q_im3, q_im2, q_im1, q_i, q_ip1, q_ip2, ua, vel
  REAL :: velb
  LOGICAL :: specified
  INTEGER :: ad_from
  INTEGER :: ad_to
  INTEGER :: ad_from0
  INTEGER :: ad_to0
  INTEGER :: ad_from1
  INTEGER :: ad_to1
  INTEGER :: ad_from2
  INTEGER :: ad_to2
  INTEGER :: ad_from3
  INTEGER :: ad_to3
  INTEGER :: ad_from4
  INTEGER :: ad_to4
  INTEGER :: ad_from5
  INTEGER :: ad_to5
  INTEGER :: ad_from6
  INTEGER :: ad_to6
  INTEGER :: branch
  INTEGER :: ad_from7
  INTEGER :: ad_to7
  INTEGER :: ad_from8
  INTEGER :: ad_to8
  INTEGER :: ad_from9
  INTEGER :: ad_to9
  INTEGER :: ad_from10
  INTEGER :: ad_to10
  INTEGER :: ad_from11
  INTEGER :: ad_to11
  INTEGER :: ad_from12
  INTEGER :: ad_to12
  INTEGER :: ad_from13
  INTEGER :: ad_to13
  INTEGER :: ad_from14
  INTEGER :: ad_to14
  INTEGER :: ad_from15
  INTEGER :: ad_to15
  INTEGER :: ad_from16
  INTEGER :: ad_to16
  INTEGER :: ad_from17
  INTEGER :: ad_to17
  INTEGER :: ad_from18
  INTEGER :: ad_to18
  INTEGER :: ad_from19
  INTEGER :: ad_to19
  INTEGER :: ad_from20
  INTEGER :: ad_to20
  INTEGER :: ad_from21
  INTEGER :: ad_to21
  INTEGER :: ad_from22
  INTEGER :: ad_to22
  INTEGER :: ad_from23
  INTEGER :: ad_to23
  INTEGER :: ad_from24
  INTEGER :: ad_to24
  INTEGER :: ad_from25
  INTEGER :: ad_to25
  INTEGER :: ad_from26
  INTEGER :: ad_to26
  INTEGER :: ad_from27
  INTEGER :: ad_to27
  INTEGER :: ad_from28
  INTEGER :: ad_to28
  INTEGER :: ad_from29
  INTEGER :: ad_to29
  INTEGER :: ad_from30
  INTEGER :: ad_to30
  INTEGER :: ad_from31
  INTEGER :: ad_to31
  INTEGER :: ad_from32
  INTEGER :: ad_to32
  INTEGER :: ad_from33
  INTEGER :: ad_to33
  INTEGER :: ad_from34
  INTEGER :: ad_to34
  INTEGER :: ad_from35
  INTEGER :: ad_to35
  INTEGER :: ad_from36
  INTEGER :: ad_to36
  INTEGER :: ad_from37
  INTEGER :: ad_to37
  INTEGER :: ad_from38
  INTEGER :: ad_to38
  INTEGER :: ad_from39
  INTEGER :: ad_to39
  INTEGER :: ad_from40
  INTEGER :: ad_to40
  INTEGER :: ad_from41
  INTEGER :: ad_to41
  INTEGER :: ad_from42
  INTEGER :: ad_to42
  INTEGER :: ad_from43
  INTEGER :: ad_to43
  INTEGER :: ad_from44
  INTEGER :: ad_to44
  INTEGER :: ad_from45
  INTEGER :: ad_to45
  INTEGER :: ad_from46
  INTEGER :: ad_to46
  INTEGER :: ad_from47
  INTEGER :: ad_to47
  INTEGER :: ad_from48
  INTEGER :: ad_to48
  REAL :: temp3
  REAL :: temp29
  REAL :: temp31b43
  REAL :: temp2
  INTEGER :: temp28
  REAL :: temp31b42
  REAL :: temp1
  REAL :: temp27
  REAL :: temp31b41
  INTEGER :: temp0
  REAL :: temp26
  REAL :: temp31b40
  REAL :: temp7b
  REAL :: temp25
  INTEGER :: temp24
  REAL :: temp23
  REAL :: temp22
  REAL :: temp21
  REAL :: temp35b3
  INTEGER :: temp20
  REAL :: temp35b2
  REAL :: temp35b1
  REAL :: temp35b0
  REAL :: temp23b9
  REAL :: temp23b8
  REAL :: temp19b
  REAL :: temp23b7
  REAL :: temp23b6
  REAL :: temp27b
  REAL :: temp23b5
  REAL :: temp35b
  REAL :: tempb1
  REAL :: temp23b4
  REAL :: temp43b
  REAL :: tempb0
  REAL :: temp23b3
  REAL :: temp23b2
  REAL :: temp23b1
  REAL :: temp23b0
  REAL :: temp31b39
  REAL :: temp31b38
  REAL :: temp7b3
  REAL :: temp31b37
  REAL :: temp3b
  REAL :: temp7b2
  REAL :: temp31b36
  REAL :: temp7b1
  REAL :: temp31b35
  REAL :: temp7b0
  REAL :: temp31b34
  REAL :: temp19
  REAL :: temp31b33
  REAL :: temp18
  REAL :: temp31b32
  REAL :: temp17
  REAL :: temp31b31
  INTEGER :: temp16
  REAL :: temp23b11
  REAL :: temp31b30
  REAL :: temp43b8
  REAL :: temp15
  REAL :: temp23b10
  REAL :: temp43b7
  REAL :: temp14
  REAL :: temp11b1
  REAL :: temp43b6
  REAL :: temp13
  REAL :: temp11b0
  REAL :: temp43b5
  INTEGER :: temp12
  REAL :: temp43b4
  REAL :: temp11
  REAL :: temp43b3
  REAL :: temp10
  REAL :: temp43b2
  REAL :: temp15b
  REAL :: temp43b1
  REAL :: temp46
  REAL :: temp23b
  REAL :: temp43b0
  REAL :: temp45
  REAL :: temp31b
  INTEGER :: temp44
  REAL :: temp43
  REAL :: temp42
  REAL :: temp19b3
  REAL :: temp31b9
  REAL :: temp41
  REAL :: temp19b2
  REAL :: temp31b8
  INTEGER :: temp40
  REAL :: temp19b1
  REAL :: temp31b7
  REAL :: temp19b0
  REAL :: temp31b6
  REAL :: temp31b5
  REAL :: temp31b4
  REAL :: temp31b3
  REAL :: tempb
  REAL :: temp31b2
  REAL :: temp31b1
  REAL :: temp31b0
  REAL :: temp31b29
  REAL :: temp31b28
  REAL :: temp31b27
  REAL :: temp31b26
  REAL :: temp31b25
  REAL :: temp31b24
  REAL :: temp31b23
  REAL :: temp31b22
  REAL :: temp31b21
  REAL :: temp11b
  REAL :: temp31b20
  REAL :: temp39b1
  REAL :: temp39b0
  REAL :: temp31b54
  REAL :: temp31b53
  REAL :: temp39
  REAL :: temp31b52
  REAL :: temp38
  REAL :: temp3b3
  REAL :: temp27b9
  REAL :: temp31b51
  REAL :: temp37
  REAL :: temp3b2
  REAL :: temp27b8
  REAL :: temp31b50
  INTEGER :: temp36
  REAL :: temp3b1
  REAL :: temp27b7
  REAL :: temp35
  REAL :: temp3b0
  REAL :: temp27b6
  REAL :: temp34
  REAL :: temp27b5
  REAL :: temp33
  REAL :: temp27b4
  INTEGER :: temp32
  REAL :: temp27b3
  REAL :: temp31
  REAL :: temp27b2
  REAL :: temp30
  REAL :: temp27b1
  REAL :: temp27b0
  INTRINSIC MIN
  REAL :: temp31b19
  REAL :: temp31b18
  REAL :: temp31b17
  REAL :: temp15b3
  REAL :: temp31b16
  REAL :: temp
  REAL :: temp15b2
  REAL :: temp31b15
  REAL :: temp15b1
  REAL :: temp31b14
  REAL :: temp15b0
  REAL :: temp31b13
  REAL :: temp9
  REAL :: temp31b12
  REAL :: temp31b49
  REAL :: temp47b4
  INTEGER :: temp8
  REAL :: temp31b11
  REAL :: temp31b48
  REAL :: temp39b
  REAL :: temp47b3
  REAL :: temp7
  REAL :: temp31b10
  REAL :: temp31b47
  REAL :: temp47b
  REAL :: temp47b2
  REAL :: temp6
  REAL :: temp31b46
  REAL :: temp47b1
  REAL :: temp5
  REAL :: temp31b45
  REAL :: temp47b0
  INTEGER :: temp4
  REAL :: temp31b44
  specified = .false.
  IF (config_flags%specified .OR. config_flags%nested) specified = &
&      .true.
!  set order for vertical and horzontal flux operators
  horz_order = config_flags%h_mom_adv_order
  vert_order = config_flags%v_mom_adv_order
  IF (kte .GT. kde - 1) THEN
    ktf = kde - 1
  ELSE
    ktf = kte
  END IF
!  begin with horizontal flux divergence
  IF (horz_order .EQ. 6) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 3) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 2) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 3) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 4) degrade_ye = .false.
!--------------- y - advection first
    i_start = its
    i_end = ite
    IF (config_flags%open_xs .OR. specified) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
    END IF
    IF (config_flags%open_xe .OR. specified) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
    END IF
    IF (config_flags%periodic_x) i_start = its
    IF (config_flags%periodic_x) i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      IF (jts .LT. jds + 1) THEN
        j_start = jds + 1
      ELSE
        j_start = jts
      END IF
      j_start_f = jds + 3
    END IF
    IF (degrade_ye) THEN
      IF (jte .GT. jde - 2) THEN
        j_end = jde - 2
      ELSE
        j_end = jte
      END IF
      j_end_f = jde - 3
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
!  compute fluxes, 5th or 6th order
    jp1 = 2
    jp0 = 1
    ad_from42 = j_start
j_loop_y_flux_6:DO j=ad_from42,j_end+1
      IF (j .GE. j_start_f .AND. j .LE. j_end_f) THEN
! use full stencil
        DO k=kts,ktf
          ad_from34 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from34)
        END DO
        CALL PUSHCONTROL3B(0)
      ELSE IF (j .EQ. jds + 1) THEN
!  we must be close to some boundary where we need to reduce the order of the stencil
! 2nd order flux next to south boundary
        DO k=kts,ktf
          ad_from35 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from35)
        END DO
        CALL PUSHCONTROL3B(1)
      ELSE IF (j .EQ. jds + 2) THEN
! third of 4th order flux 2 in from south boundary
        DO k=kts,ktf
          ad_from36 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from36)
        END DO
        CALL PUSHCONTROL3B(2)
      ELSE IF (j .EQ. jde - 1) THEN
! 2nd order flux next to north boundary
        DO k=kts,ktf
          ad_from37 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from37)
        END DO
        CALL PUSHCONTROL3B(3)
      ELSE IF (j .EQ. jde - 2) THEN
! 3rd order flux 2 in from north boundary
        DO k=kts,ktf
          ad_from38 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from38)
        END DO
        CALL PUSHCONTROL3B(4)
      ELSE
        CALL PUSHCONTROL3B(5)
      END IF
!  y flux-divergence into tendency
! (j > j_start) will miss the u(,,jds) tendency
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from39 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from39)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
! This would be seen by (j > j_start) but we need to zero out the NP tendency
        DO k=kts,ktf
          ad_from40 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from40)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        DO k=kts,ktf
          ad_from41 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from41)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO j_loop_y_flux_6
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from42)
!  next, x - flux divergence
    i_start = its
    i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
      i_start_f = ids + 3
    END IF
    IF (degrade_xe) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
      i_end_f = ide - 2
    END IF
    ad_from44 = j_start
!  compute fluxes
    DO j=ad_from44,j_end
!  5th or 6th order flux
      DO k=kts,ktf
        CALL PUSHINTEGER4(i)
      END DO
!  lower order fluxes close to boundaries (if not periodic or symmetric)
!  specified uses upstream normal wind at boundaries
      IF (degrade_xs) THEN
        IF (i_start .EQ. ids + 1) THEN
          CALL PUSHINTEGER4(i)
! second order flux next to the boundary
          i = ids + 1
          DO k=kts,ktf
            CALL PUSHREAL8(ub)
            ub = u(i-1, k, j)
            IF (specified .AND. u(i, k, j) .LT. 0.) THEN
              ub = u(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
        END IF
        CALL PUSHINTEGER4(i)
        i = ids + 2
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        IF (i_end .EQ. ide - 1) THEN
          CALL PUSHINTEGER4(i)
! second order flux next to the boundary
          i = ide
          DO k=kts,ktf
            CALL PUSHREAL8(ub)
            ub = u(i, k, j)
            IF (specified .AND. u(i-1, k, j) .GT. 0.) THEN
              ub = u(i-1, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
        DO k=kts,ktf
          CALL PUSHINTEGER4(i)
        END DO
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from43 = i_start
        CALL PUSHINTEGER4(i)
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from43)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from44)
    CALL PUSHCONTROL3B(0)
  ELSE IF (horz_order .EQ. 5) THEN
!  5th order horizontal flux calculation
!  This code is EXACTLY the same as the 6th order code
!  EXCEPT the 5th order and 3rd operators are used in
!  place of the 6th and 4th order operators
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 3) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 2) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 3) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 4) degrade_ye = .false.
!--------------- y - advection first
    i_start = its
    i_end = ite
    IF (config_flags%open_xs .OR. specified) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
    END IF
    IF (config_flags%open_xe .OR. specified) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
    END IF
    IF (config_flags%periodic_x) i_start = its
    IF (config_flags%periodic_x) i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      IF (jts .LT. jds + 1) THEN
        j_start = jds + 1
      ELSE
        j_start = jts
      END IF
      j_start_f = jds + 3
    END IF
    IF (degrade_ye) THEN
      IF (jte .GT. jde - 2) THEN
        j_end = jde - 2
      ELSE
        j_end = jte
      END IF
      j_end_f = jde - 3
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
!  compute fluxes, 5th or 6th order
    jp1 = 2
    jp0 = 1
    ad_from7 = j_start
j_loop_y_flux_5:DO j=ad_from7,j_end+1
      IF (j .GE. j_start_f .AND. j .LE. j_end_f) THEN
! use full stencil
        DO k=kts,ktf
          ad_from = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from)
        END DO
        CALL PUSHCONTROL3B(0)
      ELSE IF (j .EQ. jds + 1) THEN
!  we must be close to some boundary where we need to reduce the order of the stencil
! 2nd order flux next to south boundary
        DO k=kts,ktf
          ad_from0 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from0)
        END DO
        CALL PUSHCONTROL3B(1)
      ELSE IF (j .EQ. jds + 2) THEN
! third of 4th order flux 2 in from south boundary
        DO k=kts,ktf
          ad_from1 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from1)
        END DO
        CALL PUSHCONTROL3B(2)
      ELSE IF (j .EQ. jde - 1) THEN
! 2nd order flux next to north boundary
        DO k=kts,ktf
          ad_from2 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from2)
        END DO
        CALL PUSHCONTROL3B(3)
      ELSE IF (j .EQ. jde - 2) THEN
! 3rd order flux 2 in from north boundary
        DO k=kts,ktf
          ad_from3 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from3)
        END DO
        CALL PUSHCONTROL3B(4)
      ELSE
        CALL PUSHCONTROL3B(5)
      END IF
!  y flux-divergence into tendency
! (j > j_start) will miss the u(,,jds) tendency
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from4 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from4)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
! This would be seen by (j > j_start) but we need to zero out the NP tendency
        DO k=kts,ktf
          ad_from5 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from5)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        DO k=kts,ktf
          ad_from6 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from6)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO j_loop_y_flux_5
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from7)
!  next, x - flux divergence
    i_start = its
    i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
      i_start_f = ids + 3
    END IF
    IF (degrade_xe) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
      i_end_f = ide - 2
    END IF
    ad_from9 = j_start
!  compute fluxes
    DO j=ad_from9,j_end
!  5th or 6th order flux
      DO k=kts,ktf
        CALL PUSHINTEGER4(i)
      END DO
!  lower order fluxes close to boundaries (if not periodic or symmetric)
!  specified uses upstream normal wind at boundaries
      IF (degrade_xs) THEN
        IF (i_start .EQ. ids + 1) THEN
          CALL PUSHINTEGER4(i)
! second order flux next to the boundary
          i = ids + 1
          DO k=kts,ktf
            CALL PUSHREAL8(ub)
            ub = u(i-1, k, j)
            IF (specified .AND. u(i, k, j) .LT. 0.) THEN
              ub = u(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
        END IF
        CALL PUSHINTEGER4(i)
        i = ids + 2
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        IF (i_end .EQ. ide - 1) THEN
          CALL PUSHINTEGER4(i)
! second order flux next to the boundary
          i = ide
          DO k=kts,ktf
            CALL PUSHREAL8(ub)
            ub = u(i, k, j)
            IF (specified .AND. u(i-1, k, j) .GT. 0.) THEN
              ub = u(i-1, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
        DO k=kts,ktf
          CALL PUSHINTEGER4(i)
        END DO
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from8 = i_start
        CALL PUSHINTEGER4(i)
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from8)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from9)
    CALL PUSHCONTROL3B(1)
  ELSE IF (horz_order .EQ. 4) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 2) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 1) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 2) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 3) degrade_ye = .false.
!--------------- x - advection first
    i_start = its
    i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      i_start = ids + 1
      i_start_f = i_start + 1
    END IF
    IF (degrade_xe) THEN
      i_end = ide - 1
      i_end_f = ide - 1
    END IF
    ad_from11 = j_start
!  compute fluxes
    DO j=ad_from11,j_end
      DO k=kts,ktf
        CALL PUSHINTEGER4(i)
      END DO
!  second order flux close to boundaries (if not periodic or symmetric)
!  specified uses upstream normal wind at boundaries
      IF (degrade_xs) THEN
        CALL PUSHINTEGER4(i)
        i = i_start
        DO k=kts,ktf
          CALL PUSHREAL8(ub)
          ub = u(i-1, k, j)
          IF (specified .AND. u(i, k, j) .LT. 0.) THEN
            ub = u(i, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        CALL PUSHINTEGER4(i)
        i = i_end + 1
        DO k=kts,ktf
          CALL PUSHREAL8(ub)
          ub = u(i, k, j)
          IF (specified .AND. u(i-1, k, j) .GT. 0.) THEN
            ub = u(i-1, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from10 = i_start
        CALL PUSHINTEGER4(i)
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from10)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from11)
!  y flux divergence
    i_start = its
    i_end = ite
    IF (config_flags%open_xs .OR. specified) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
    END IF
    IF (config_flags%open_xe .OR. specified) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
    END IF
    IF (config_flags%periodic_x) i_start = its
    IF (config_flags%periodic_x) i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
!CJM these may not work with tiling because they define j_start and end in terms of domain dim
    IF (degrade_ys) THEN
      j_start = jds + 1
      j_start_f = j_start + 1
    END IF
    IF (degrade_ye) THEN
      j_end = jde - 2
      j_end_f = jde - 2
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
!  j flux loop for v flux of u momentum
    jp1 = 2
    jp0 = 1
    ad_from18 = j_start
    DO j=ad_from18,j_end+1
      IF (j .LT. j_start_f .AND. degrade_ys) THEN
        DO k=kts,ktf
          ad_from12 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from12)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (j .GT. j_end_f .AND. degrade_ye) THEN
        DO k=kts,ktf
          ad_from13 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from13)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE
!  3rd or 4th order flux
        DO k=kts,ktf
          ad_from14 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from14)
        END DO
        CALL PUSHCONTROL2B(2)
      END IF
!  y flux-divergence into tendency
! (j > j_start) will miss the u(,,jds) tendency
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from15 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from15)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
! This would be seen by (j > j_start) but we need to zero out the NP tendency
        DO k=kts,ktf
          ad_from16 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from16)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        DO k=kts,ktf
          ad_from17 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from17)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from18)
    CALL PUSHCONTROL3B(2)
  ELSE IF (horz_order .EQ. 3) THEN
!  As with the 5th and 6th order flux chioces, the 3rd and 4th order
!  code is EXACTLY the same EXCEPT for the flux operator.
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 2) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 1) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 2) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 3) degrade_ye = .false.
!--------------- x - advection first
    i_start = its
    i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      i_start = ids + 1
      i_start_f = i_start + 1
    END IF
    IF (degrade_xe) THEN
      i_end = ide - 1
      i_end_f = ide - 1
    END IF
    ad_from20 = j_start
!  compute fluxes
    DO j=ad_from20,j_end
      DO k=kts,ktf
        CALL PUSHINTEGER4(i)
      END DO
!  second order flux close to boundaries (if not periodic or symmetric)
!  specified uses upstream normal wind at boundaries
      IF (degrade_xs) THEN
        CALL PUSHINTEGER4(i)
        i = i_start
        DO k=kts,ktf
          CALL PUSHREAL8(ub)
          ub = u(i-1, k, j)
          IF (specified .AND. u(i, k, j) .LT. 0.) THEN
            ub = u(i, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        CALL PUSHINTEGER4(i)
        i = i_end + 1
        DO k=kts,ktf
          CALL PUSHREAL8(ub)
          ub = u(i, k, j)
          IF (specified .AND. u(i-1, k, j) .GT. 0.) THEN
            ub = u(i-1, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from19 = i_start
        CALL PUSHINTEGER4(i)
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from19)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from20)
!  y flux divergence
    i_start = its
    i_end = ite
    IF (config_flags%open_xs .OR. specified) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
    END IF
    IF (config_flags%open_xe .OR. specified) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
    END IF
    IF (config_flags%periodic_x) i_start = its
    IF (config_flags%periodic_x) i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
!CJM these may not work with tiling because they define j_start and end in terms of domain dim
    IF (degrade_ys) THEN
      j_start = jds + 1
      j_start_f = j_start + 1
    END IF
    IF (degrade_ye) THEN
      j_end = jde - 2
      j_end_f = jde - 2
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
!  j flux loop for v flux of u momentum
    jp1 = 2
    jp0 = 1
    ad_from27 = j_start
    DO j=ad_from27,j_end+1
      IF (j .LT. j_start_f .AND. degrade_ys) THEN
        DO k=kts,ktf
          ad_from21 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from21)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (j .GT. j_end_f .AND. degrade_ye) THEN
        DO k=kts,ktf
          ad_from22 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from22)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE
!  3rd or 4th order flux
        DO k=kts,ktf
          ad_from23 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from23)
        END DO
        CALL PUSHCONTROL2B(2)
      END IF
!  y flux-divergence into tendency
! (j > j_start) will miss the u(,,jds) tendency
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from24 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from24)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
! This would be seen by (j > j_start) but we need to zero out the NP tendency
        DO k=kts,ktf
          ad_from25 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from25)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        DO k=kts,ktf
          ad_from26 = i_start
          CALL PUSHINTEGER4(i)
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from26)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from27)
    CALL PUSHCONTROL3B(3)
  ELSE IF (horz_order .EQ. 2) THEN
    i_start = its
    i_end = ite
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
    IF (config_flags%open_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
    END IF
    IF (config_flags%open_xe) THEN
      IF (ide - 1 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 1
      END IF
    END IF
    IF (specified) THEN
      IF (ids + 2 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 2
      END IF
    END IF
    IF (specified) THEN
      IF (ide - 2 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 2
      END IF
    END IF
    IF (config_flags%periodic_x) i_start = its
    IF (config_flags%periodic_x) i_end = ite
    ad_from29 = j_start
    DO j=ad_from29,j_end
      DO k=kts,ktf
        ad_from28 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from28)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from29)
    IF (specified .AND. its .LE. ids + 1 .AND. (.NOT.config_flags%&
&        periodic_x)) THEN
      ad_from30 = j_start
      DO j=ad_from30,j_end
        DO k=kts,ktf
          i = ids + 1
          CALL PUSHREAL8(ub)
! ADT eqn 44, 1st term on RHS
          ub = u(i-1, k, j)
          IF (u(i, k, j) .LT. 0.) THEN
            ub = u(i, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
      END DO
      CALL PUSHINTEGER4(j - 1)
      CALL PUSHINTEGER4(ad_from30)
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHCONTROL1B(1)
    END IF
    IF (specified .AND. ite .GE. ide - 1 .AND. (.NOT.config_flags%&
&        periodic_x)) THEN
      ad_from31 = j_start
      DO j=ad_from31,j_end
        DO k=kts,ktf
          i = ide - 1
          CALL PUSHREAL8(ub)
! ADT eqn 44, 1st term on RHS
          ub = u(i+1, k, j)
          IF (u(i, k, j) .GT. 0.) THEN
            ub = u(i, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
      END DO
      CALL PUSHINTEGER4(j - 1)
      CALL PUSHINTEGER4(ad_from31)
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHCONTROL1B(1)
    END IF
    IF (config_flags%open_ys .OR. specified) THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF (config_flags%open_ye .OR. specified) THEN
      IF (jde - 2 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 2
      END IF
    END IF
    ad_from33 = j_start
    DO j=ad_from33,j_end
      DO k=kts,ktf
        ad_from32 = i_start
        CALL PUSHINTEGER4(i)
        DO i=ad_from32,i_end
! ADT eqn 44, 1st term on RHS
! Comments for polar boundary condition
! Flow is only from one side for points next to poles
          IF (config_flags%polar .AND. j .EQ. jds) THEN
            CALL PUSHCONTROL2B(2)
          ELSE IF (config_flags%polar .AND. j .EQ. jde - 1) THEN
            CALL PUSHCONTROL2B(1)
          ELSE
            CALL PUSHCONTROL2B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from32)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from33)
    CALL PUSHCONTROL3B(4)
  ELSE
    CALL PUSHCONTROL3B(5)
  END IF
!  radiative lateral boundary condition in x for normal velocity (u)
  IF (config_flags%open_xs .AND. its .EQ. ids) THEN
    CALL PUSHINTEGER4(j_start)
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
    ad_from45 = j_start
    DO j=ad_from45,j_end
      DO k=kts,ktf
        IF (ru(its, k, j) - cb*mut(its, j) .GT. 0.) THEN
          CALL PUSHREAL8(ub)
          ub = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(ub)
          ub = ru(its, k, j) - cb*mut(its, j)
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from45)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_xe .AND. ite .EQ. ide) THEN
    CALL PUSHINTEGER4(j_start)
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
    ad_from46 = j_start
    DO j=ad_from46,j_end
      DO k=kts,ktf
        IF (ru(ite, k, j) + cb*mut(ite-1, j) .LT. 0.) THEN
          CALL PUSHREAL8(ub)
          ub = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(ub)
          ub = ru(ite, k, j) + cb*mut(ite-1, j)
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from46)
    CALL PUSHCONTROL1B(1)
  ELSE
    CALL PUSHCONTROL1B(0)
  END IF
!  pick up the rest of the horizontal radiation boundary conditions.
!  (these are the computations that don't require 'cb')
!  first, set to index ranges
  i_start = its
  IF (ite .GT. ide) THEN
    i_end = ide
  ELSE
    i_end = ite
  END IF
  imin = ids
  imax = ide - 1
  IF (config_flags%open_xs) THEN
    IF (ids + 1 .LT. its) THEN
      i_start = its
    ELSE
      i_start = ids + 1
    END IF
    imin = ids
  END IF
  IF (config_flags%open_xe) THEN
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    imax = ide - 1
  END IF
  IF (config_flags%open_ys .AND. jts .EQ. jds) THEN
    ad_from47 = i_start
    CALL PUSHINTEGER4(i)
    DO i=ad_from47,i_end
      CALL PUSHREAL8(mrdy)
! ADT eqn 44, 2nd term on RHS
      mrdy = msfux(i, jts)*rdy
      IF (imax .GT. i) THEN
        CALL PUSHINTEGER4(ip)
        ip = i
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(ip)
        ip = imax
        CALL PUSHCONTROL1B(1)
      END IF
      IF (imin .LT. i - 1) THEN
        CALL PUSHINTEGER4(im)
        im = i - 1
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(im)
        im = imin
        CALL PUSHCONTROL1B(1)
      END IF
      DO k=kts,ktf
        vw = 0.5*(rv(ip, k, jts)+rv(im, k, jts))
        IF (vw .GT. 0.) THEN
          CALL PUSHREAL8(vb)
          vb = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(vb)
          vb = vw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from47)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_ye .AND. jte .EQ. jde) THEN
    ad_from48 = i_start
    CALL PUSHINTEGER4(i)
    DO i=ad_from48,i_end
      CALL PUSHREAL8(mrdy)
! ADT eqn 44, 2nd term on RHS
      mrdy = msfux(i, jte-1)*rdy
      IF (imax .GT. i) THEN
        CALL PUSHINTEGER4(ip)
        ip = i
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(ip)
        ip = imax
        CALL PUSHCONTROL1B(1)
      END IF
      IF (imin .LT. i - 1) THEN
        CALL PUSHINTEGER4(im)
        im = i - 1
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(im)
        im = imin
        CALL PUSHCONTROL1B(1)
      END IF
      DO k=kts,ktf
        vw = 0.5*(rv(ip, k, jte)+rv(im, k, jte))
        IF (vw .LT. 0.) THEN
          CALL PUSHREAL8(vb)
          vb = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(vb)
          vb = vw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from48)
    CALL PUSHCONTROL1B(1)
  ELSE
    CALL PUSHCONTROL1B(0)
  END IF
!-------------------- vertical advection
!  ADT eqn 44 has 3rd term on RHS = -(1/my) partial d/dz (rho u w)
!  Here we have:  - partial d/dz (u*rom) = - partial d/dz (u rho w / my)
!  Since 'my' (map scale factor in y-direction) isn't a function of z,
!  this is what we need, so leave unchanged in advect_u
  i_start = its
  i_end = ite
  CALL PUSHINTEGER4(j_start)
  j_start = jts
  IF (jte .GT. jde - 1) THEN
    j_end = jde - 1
  ELSE
    j_end = jte
  END IF
!   IF ( config_flags%open_xs ) i_start = MAX(ids+1,its)
!   IF ( config_flags%open_xe ) i_end   = MIN(ide-1,ite)
  IF (config_flags%open_ys .OR. specified) THEN
    IF (ids + 1 .LT. its) THEN
      i_start = its
    ELSE
      i_start = ids + 1
    END IF
  END IF
  IF (config_flags%open_ye .OR. specified) THEN
    IF (ide - 1 .GT. ite) THEN
      i_end = ite
    ELSE
      i_end = ide - 1
    END IF
  END IF
  IF (config_flags%periodic_x) i_start = its
  IF (config_flags%periodic_x) i_end = ite
  IF (vert_order .EQ. 6) THEN
    DO j=j_start,j_end
      DO k=kts+3,ktf-2
        CALL PUSHINTEGER4(i)
      END DO
      CALL PUSHINTEGER4(i)
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzw(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzw(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp31b46 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i&
&          , k)
        temp31b47 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp31b46
        romb(i-1, k, j) = romb(i-1, k, j) + temp31b46
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp31b47
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp31b47
        vfluxb(i, k) = 0.0
        k = ktf - 1
        vel = 0.5*(rom(i, k, j)+rom(i-1, k, j))
        temp31b48 = vel*vfluxb(i, k)/12.0
        velb = (7.*(u(i, k, j)+u(i, k-1, j))-u(i, k+1, j)-u(i, k-2, j))*&
&          vfluxb(i, k)/12.0
        ub0(i, k, j) = ub0(i, k, j) + 7.*temp31b48
        ub0(i, k-1, j) = ub0(i, k-1, j) + 7.*temp31b48
        ub0(i, k+1, j) = ub0(i, k+1, j) - temp31b48
        ub0(i, k-2, j) = ub0(i, k-2, j) - temp31b48
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
        k = kts + 2
        vel = 0.5*(rom(i, k, j)+rom(i-1, k, j))
        temp31b49 = vel*vfluxb(i, k)/12.0
        velb = (7.*(u(i, k, j)+u(i, k-1, j))-u(i, k+1, j)-u(i, k-2, j))*&
&          vfluxb(i, k)/12.0
        ub0(i, k, j) = ub0(i, k, j) + 7.*temp31b49
        ub0(i, k-1, j) = ub0(i, k-1, j) + 7.*temp31b49
        ub0(i, k+1, j) = ub0(i, k+1, j) - temp31b49
        ub0(i, k-2, j) = ub0(i, k-2, j) - temp31b49
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
        k = kts + 1
        temp31b50 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i&
&          , k)
        temp31b51 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp31b50
        romb(i-1, k, j) = romb(i-1, k, j) + temp31b50
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp31b51
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp31b51
        vfluxb(i, k) = 0.0
      END DO
      CALL POPINTEGER4(i)
      DO k=ktf-2,kts+3,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i-1, k, j)+rom(i, k, j))
          temp31b45 = vel*vfluxb(i, k)/60.0
          velb = (37.*(u(i, k, j)+u(i, k-1, j))-8.*(u(i, k+1, j)+u(i, k-&
&            2, j))+u(i, k+2, j)+u(i, k-3, j))*vfluxb(i, k)/60.0
          ub0(i, k, j) = ub0(i, k, j) + 37.*temp31b45
          ub0(i, k-1, j) = ub0(i, k-1, j) + 37.*temp31b45
          ub0(i, k+1, j) = ub0(i, k+1, j) - 8.*temp31b45
          ub0(i, k-2, j) = ub0(i, k-2, j) - 8.*temp31b45
          ub0(i, k+2, j) = ub0(i, k+2, j) + temp31b45
          ub0(i, k-3, j) = ub0(i, k-3, j) + temp31b45
          vfluxb(i, k) = 0.0
          romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
  ELSE IF (vert_order .EQ. 5) THEN
    DO j=j_start,j_end
      DO k=kts+3,ktf-2
        CALL PUSHINTEGER4(i)
      END DO
      CALL PUSHINTEGER4(i)
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzw(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzw(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp43b = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i, &
&          k)
        temp43b0 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp43b
        romb(i-1, k, j) = romb(i-1, k, j) + temp43b
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp43b0
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp43b0
        vfluxb(i, k) = 0.0
        k = ktf - 1
        vel = 0.5*(rom(i, k, j)+rom(i-1, k, j))
        temp39 = u(i, k+1, j) - u(i, k-2, j) - 3.*(u(i, k, j)-u(i, k-1, &
&          j))
        temp42 = SIGN(1., -vel)
        temp41 = temp42/12.0
        temp40 = SIGN(1, time_step)
        temp39b = vel*vfluxb(i, k)
        temp39b0 = temp39b/12.0
        temp39b1 = temp40*temp41*temp39b
        velb = ((7.*(u(i, k, j)+u(i, k-1, j))-u(i, k+1, j)-u(i, k-2, j))&
&          /12.0+temp40*(temp41*temp39))*vfluxb(i, k)
        ub0(i, k, j) = ub0(i, k, j) + 7.*temp39b0 - 3.*temp39b1
        ub0(i, k-1, j) = ub0(i, k-1, j) + 3.*temp39b1 + 7.*temp39b0
        ub0(i, k+1, j) = ub0(i, k+1, j) + temp39b1 - temp39b0
        ub0(i, k-2, j) = ub0(i, k-2, j) - temp39b1 - temp39b0
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
        k = kts + 2
        vel = 0.5*(rom(i, k, j)+rom(i-1, k, j))
        temp35 = u(i, k+1, j) - u(i, k-2, j) - 3.*(u(i, k, j)-u(i, k-1, &
&          j))
        temp38 = SIGN(1., -vel)
        temp37 = temp38/12.0
        temp36 = SIGN(1, time_step)
        temp35b = vel*vfluxb(i, k)
        temp35b0 = temp35b/12.0
        temp35b1 = temp36*temp37*temp35b
        velb = ((7.*(u(i, k, j)+u(i, k-1, j))-u(i, k+1, j)-u(i, k-2, j))&
&          /12.0+temp36*(temp37*temp35))*vfluxb(i, k)
        ub0(i, k, j) = ub0(i, k, j) + 7.*temp35b0 - 3.*temp35b1
        ub0(i, k-1, j) = ub0(i, k-1, j) + 3.*temp35b1 + 7.*temp35b0
        ub0(i, k+1, j) = ub0(i, k+1, j) + temp35b1 - temp35b0
        ub0(i, k-2, j) = ub0(i, k-2, j) - temp35b1 - temp35b0
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
        k = kts + 1
        temp35b2 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i&
&          , k)
        temp35b3 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp35b2
        romb(i-1, k, j) = romb(i-1, k, j) + temp35b2
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp35b3
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp35b3
        vfluxb(i, k) = 0.0
      END DO
      CALL POPINTEGER4(i)
      DO k=ktf-2,kts+3,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i-1, k, j)+rom(i, k, j))
          temp31 = u(i, k+2, j) - u(i, k-3, j) + 10.*(u(i, k, j)-u(i, k-&
&            1, j)) - 5.*(u(i, k+1, j)-u(i, k-2, j))
          temp34 = SIGN(1., -vel)
          temp33 = temp34/60.0
          temp32 = SIGN(1, time_step)
          temp31b52 = vel*vfluxb(i, k)
          temp31b53 = temp31b52/60.0
          temp31b54 = -(temp32*temp33*temp31b52)
          velb = ((37.*(u(i, k, j)+u(i, k-1, j))-8.*(u(i, k+1, j)+u(i, k&
&            -2, j))+u(i, k+2, j)+u(i, k-3, j))/60.0-temp32*(temp33*&
&            temp31))*vfluxb(i, k)
          ub0(i, k, j) = ub0(i, k, j) + 10.*temp31b54 + 37.*temp31b53
          ub0(i, k-1, j) = ub0(i, k-1, j) + 37.*temp31b53 - 10.*&
&            temp31b54
          ub0(i, k+1, j) = ub0(i, k+1, j) - 5.*temp31b54 - 8.*temp31b53
          ub0(i, k-2, j) = ub0(i, k-2, j) + 5.*temp31b54 - 8.*temp31b53
          ub0(i, k+2, j) = ub0(i, k+2, j) + temp31b54 + temp31b53
          ub0(i, k-3, j) = ub0(i, k-3, j) + temp31b53 - temp31b54
          vfluxb(i, k) = 0.0
          romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
  ELSE IF (vert_order .EQ. 4) THEN
    DO j=j_start,j_end
      DO k=kts+2,ktf-1
        CALL PUSHINTEGER4(i)
      END DO
      CALL PUSHINTEGER4(i)
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzw(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzw(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp43b2 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i&
&          , k)
        temp43b3 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp43b2
        romb(i-1, k, j) = romb(i-1, k, j) + temp43b2
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp43b3
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp43b3
        vfluxb(i, k) = 0.0
        k = kts + 1
        temp43b4 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i&
&          , k)
        temp43b5 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp43b4
        romb(i-1, k, j) = romb(i-1, k, j) + temp43b4
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp43b5
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp43b5
        vfluxb(i, k) = 0.0
      END DO
      CALL POPINTEGER4(i)
      DO k=ktf-1,kts+2,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i-1, k, j)+rom(i, k, j))
          temp43b1 = vel*vfluxb(i, k)/12.0
          velb = (7.*(u(i, k, j)+u(i, k-1, j))-u(i, k+1, j)-u(i, k-2, j)&
&            )*vfluxb(i, k)/12.0
          ub0(i, k, j) = ub0(i, k, j) + 7.*temp43b1
          ub0(i, k-1, j) = ub0(i, k-1, j) + 7.*temp43b1
          ub0(i, k+1, j) = ub0(i, k+1, j) - temp43b1
          ub0(i, k-2, j) = ub0(i, k-2, j) - temp43b1
          vfluxb(i, k) = 0.0
          romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
  ELSE IF (vert_order .EQ. 3) THEN
    DO j=j_start,j_end
      DO k=kts+2,ktf-1
        CALL PUSHINTEGER4(i)
      END DO
      CALL PUSHINTEGER4(i)
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzw(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzw(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp47b = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i, &
&          k)
        temp47b0 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp47b
        romb(i-1, k, j) = romb(i-1, k, j) + temp47b
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp47b0
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp47b0
        vfluxb(i, k) = 0.0
        k = kts + 1
        temp47b1 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(i&
&          , k)
        temp47b2 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp47b1
        romb(i-1, k, j) = romb(i-1, k, j) + temp47b1
        ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp47b2
        ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp47b2
        vfluxb(i, k) = 0.0
      END DO
      CALL POPINTEGER4(i)
      DO k=ktf-1,kts+2,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i-1, k, j)+rom(i, k, j))
          temp43 = u(i, k+1, j) - u(i, k-2, j) - 3.*(u(i, k, j)-u(i, k-1&
&            , j))
          temp46 = SIGN(1., -vel)
          temp45 = temp46/12.0
          temp44 = SIGN(1, time_step)
          temp43b6 = vel*vfluxb(i, k)
          temp43b7 = temp43b6/12.0
          temp43b8 = temp44*temp45*temp43b6
          velb = ((7.*(u(i, k, j)+u(i, k-1, j))-u(i, k+1, j)-u(i, k-2, j&
&            ))/12.0+temp44*(temp45*temp43))*vfluxb(i, k)
          ub0(i, k, j) = ub0(i, k, j) + 7.*temp43b7 - 3.*temp43b8
          ub0(i, k-1, j) = ub0(i, k-1, j) + 3.*temp43b8 + 7.*temp43b7
          ub0(i, k+1, j) = ub0(i, k+1, j) + temp43b8 - temp43b7
          ub0(i, k-2, j) = ub0(i, k-2, j) - temp43b8 - temp43b7
          vfluxb(i, k) = 0.0
          romb(i-1, k, j) = romb(i-1, k, j) + 0.5*velb
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
  ELSE IF (vert_order .EQ. 2) THEN
    DO j=j_start,j_end
      DO k=kts+1,ktf
        CALL PUSHINTEGER4(i)
      END DO
      DO k=kts,ktf
        CALL PUSHINTEGER4(i)
      END DO
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzw(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzw(k)*tendencyb(i, k, j)
        END DO
        CALL POPINTEGER4(i)
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          temp47b3 = 0.5*(fzm(k)*u(i, k, j)+fzp(k)*u(i, k-1, j))*vfluxb(&
&            i, k)
          temp47b4 = 0.5*(rom(i, k, j)+rom(i-1, k, j))*vfluxb(i, k)
          romb(i, k, j) = romb(i, k, j) + temp47b3
          romb(i-1, k, j) = romb(i-1, k, j) + temp47b3
          ub0(i, k, j) = ub0(i, k, j) + fzm(k)*temp47b4
          ub0(i, k-1, j) = ub0(i, k-1, j) + fzp(k)*temp47b4
          vfluxb(i, k) = 0.0
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
  END IF
  CALL POPINTEGER4(j_start)
  CALL POPCONTROL1B(branch)
  IF (branch .NE. 0) THEN
    CALL POPINTEGER4(ad_from48)
    CALL POPINTEGER4(ad_to48)
    DO i=ad_to48,ad_from48,-1
      DO k=ktf,kts,-1
        dvm = rv(ip, k, jte) - rv(ip, k, jte-1)
        dvp = rv(im, k, jte) - rv(im, k, jte-1)
        temp31b43 = -(mrdy*tendencyb(i, k, jte-1))
        temp31b44 = 0.5*u(i, k, jte-1)*temp31b43
        vbb = (u_old(i, k, jte-1)-u_old(i, k, jte-2))*temp31b43
        u_oldb(i, k, jte-1) = u_oldb(i, k, jte-1) + vb*temp31b43
        u_oldb(i, k, jte-2) = u_oldb(i, k, jte-2) - vb*temp31b43
        ub0(i, k, jte-1) = ub0(i, k, jte-1) + 0.5*(dvm+dvp)*temp31b43
        dvmb = temp31b44
        dvpb = temp31b44
        rvb(im, k, jte) = rvb(im, k, jte) + dvpb
        rvb(im, k, jte-1) = rvb(im, k, jte-1) - dvpb
        rvb(ip, k, jte) = rvb(ip, k, jte) + dvmb
        rvb(ip, k, jte-1) = rvb(ip, k, jte-1) - dvmb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(vb)
          vwb = 0.0
        ELSE
          CALL POPREAL8(vb)
          vwb = vbb
        END IF
        rvb(ip, k, jte) = rvb(ip, k, jte) + 0.5*vwb
        rvb(im, k, jte) = rvb(im, k, jte) + 0.5*vwb
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(im)
      ELSE
        CALL POPINTEGER4(im)
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(ip)
      ELSE
        CALL POPINTEGER4(ip)
      END IF
      CALL POPREAL8(mrdy)
    END DO
    CALL POPINTEGER4(i)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from47)
    CALL POPINTEGER4(ad_to47)
    DO i=ad_to47,ad_from47,-1
      DO k=ktf,kts,-1
        dvm = rv(ip, k, jts+1) - rv(ip, k, jts)
        dvp = rv(im, k, jts+1) - rv(im, k, jts)
        temp31b41 = -(mrdy*tendencyb(i, k, jts))
        temp31b42 = 0.5*u(i, k, jts)*temp31b41
        vbb = (u_old(i, k, jts+1)-u_old(i, k, jts))*temp31b41
        u_oldb(i, k, jts+1) = u_oldb(i, k, jts+1) + vb*temp31b41
        u_oldb(i, k, jts) = u_oldb(i, k, jts) - vb*temp31b41
        ub0(i, k, jts) = ub0(i, k, jts) + 0.5*(dvm+dvp)*temp31b41
        dvmb = temp31b42
        dvpb = temp31b42
        rvb(im, k, jts+1) = rvb(im, k, jts+1) + dvpb
        rvb(im, k, jts) = rvb(im, k, jts) - dvpb
        rvb(ip, k, jts+1) = rvb(ip, k, jts+1) + dvmb
        rvb(ip, k, jts) = rvb(ip, k, jts) - dvmb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(vb)
          vwb = 0.0
        ELSE
          CALL POPREAL8(vb)
          vwb = vbb
        END IF
        rvb(ip, k, jts) = rvb(ip, k, jts) + 0.5*vwb
        rvb(im, k, jts) = rvb(im, k, jts) + 0.5*vwb
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(im)
      ELSE
        CALL POPINTEGER4(im)
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(ip)
      ELSE
        CALL POPINTEGER4(ip)
      END IF
      CALL POPREAL8(mrdy)
    END DO
    CALL POPINTEGER4(i)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .NE. 0) THEN
    CALL POPINTEGER4(ad_from46)
    CALL POPINTEGER4(ad_to46)
    DO j=ad_to46,ad_from46,-1
      DO k=ktf,kts,-1
        temp31b40 = -(rdx*tendencyb(ite, k, j))
        ubb = (u_old(ite, k, j)-u_old(ite-1, k, j))*temp31b40
        u_oldb(ite, k, j) = u_oldb(ite, k, j) + ub*temp31b40
        u_oldb(ite-1, k, j) = u_oldb(ite-1, k, j) - ub*temp31b40
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(ub)
        ELSE
          CALL POPREAL8(ub)
          rub(ite, k, j) = rub(ite, k, j) + ubb
          mutb(ite-1, j) = mutb(ite-1, j) + cb*ubb
        END IF
      END DO
    END DO
    CALL POPINTEGER4(j_start)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from45)
    CALL POPINTEGER4(ad_to45)
    DO j=ad_to45,ad_from45,-1
      DO k=ktf,kts,-1
        temp31b39 = -(rdx*tendencyb(its, k, j))
        ubb = (u_old(its+1, k, j)-u_old(its, k, j))*temp31b39
        u_oldb(its+1, k, j) = u_oldb(its+1, k, j) + ub*temp31b39
        u_oldb(its, k, j) = u_oldb(its, k, j) - ub*temp31b39
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(ub)
        ELSE
          CALL POPREAL8(ub)
          rub(its, k, j) = rub(its, k, j) + ubb
          mutb(its, j) = mutb(its, j) - cb*ubb
        END IF
      END DO
    END DO
    CALL POPINTEGER4(j_start)
  END IF
  CALL POPCONTROL3B(branch)
  IF (branch .LT. 3) THEN
    IF (branch .EQ. 0) THEN
      fqxb = 0.0
      CALL POPINTEGER4(ad_from44)
      CALL POPINTEGER4(ad_to44)
      DO j=ad_to44,ad_from44,-1
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from43)
          CALL POPINTEGER4(ad_to43)
          DO i=ad_to43,ad_from43,-1
            mrdx = msfux(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
          CALL POPINTEGER4(i)
        END DO
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          DO k=ktf,kts,-1
            i = ide - 1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp31b38 = vel*fqxb(i, k)/12.0
            velb = (7.*(u(i, k, j)+u(i-1, k, j))-u(i+1, k, j)-u(i-2, k, &
&              j))*fqxb(i, k)/12.0
            ub0(i, k, j) = ub0(i, k, j) + 7.*temp31b38
            ub0(i-1, k, j) = ub0(i-1, k, j) + 7.*temp31b38
            ub0(i+1, k, j) = ub0(i+1, k, j) - temp31b38
            ub0(i-2, k, j) = ub0(i-2, k, j) - temp31b38
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
            CALL POPINTEGER4(i)
          END DO
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            DO k=ktf,kts,-1
              temp31b36 = 0.25*(u(i-1, k, j)+ub)*fqxb(i, k)
              temp31b37 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + temp31b36
              rub(i-1, k, j) = rub(i-1, k, j) + temp31b36
              ub0(i-1, k, j) = ub0(i-1, k, j) + temp31b37
              ubb = temp31b37
              fqxb(i, k) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
                ubb = 0.0
              END IF
              CALL POPREAL8(ub)
              ub0(i, k, j) = ub0(i, k, j) + ubb
            END DO
            CALL POPINTEGER4(i)
          END IF
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp31b35 = vel*fqxb(i, k)/12.0
            velb = (7.*(u(i, k, j)+u(i-1, k, j))-u(i+1, k, j)-u(i-2, k, &
&              j))*fqxb(i, k)/12.0
            ub0(i, k, j) = ub0(i, k, j) + 7.*temp31b35
            ub0(i-1, k, j) = ub0(i-1, k, j) + 7.*temp31b35
            ub0(i+1, k, j) = ub0(i+1, k, j) - temp31b35
            ub0(i-2, k, j) = ub0(i-2, k, j) - temp31b35
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
          END DO
          CALL POPINTEGER4(i)
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              temp31b33 = 0.25*(u(i, k, j)+ub)*fqxb(i, k)
              temp31b34 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + temp31b33
              rub(i-1, k, j) = rub(i-1, k, j) + temp31b33
              ub0(i, k, j) = ub0(i, k, j) + temp31b34
              ubb = temp31b34
              fqxb(i, k) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                ub0(i, k, j) = ub0(i, k, j) + ubb
                ubb = 0.0
              END IF
              CALL POPREAL8(ub)
              ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
            END DO
            CALL POPINTEGER4(i)
          END IF
        END IF
        DO k=ktf,kts,-1
          DO i=i_end_f,i_start_f,-1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp31b32 = vel*fqxb(i, k)/60.0
            velb = (37.*(u(i, k, j)+u(i-1, k, j))-8.*(u(i+1, k, j)+u(i-2&
&              , k, j))+u(i+2, k, j)+u(i-3, k, j))*fqxb(i, k)/60.0
            ub0(i, k, j) = ub0(i, k, j) + 37.*temp31b32
            ub0(i-1, k, j) = ub0(i-1, k, j) + 37.*temp31b32
            ub0(i+1, k, j) = ub0(i+1, k, j) - 8.*temp31b32
            ub0(i-2, k, j) = ub0(i-2, k, j) - 8.*temp31b32
            ub0(i+2, k, j) = ub0(i+2, k, j) + temp31b32
            ub0(i-3, k, j) = ub0(i-3, k, j) + temp31b32
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
          END DO
          CALL POPINTEGER4(i)
        END DO
      END DO
      fqyb = 0.0
      CALL POPINTEGER4(ad_from42)
      CALL POPINTEGER4(ad_to42)
      DO j=ad_to42,ad_from42,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from39)
              CALL POPINTEGER4(ad_to39)
              DO i=ad_to39,ad_from39,-1
                mrdy = msfux(i, j-1)*rdy
                fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from40)
              CALL POPINTEGER4(ad_to40)
              DO i=ad_to40,ad_from40,-1
                mrdy = msfux(i, j-1)*rdy
                fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from41)
            CALL POPINTEGER4(ad_to41)
            DO i=ad_to41,ad_from41,-1
              mrdy = msfux(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
        END IF
        CALL POPCONTROL3B(branch)
        IF (branch .LT. 3) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from34)
              CALL POPINTEGER4(ad_to34)
              DO i=ad_to34,ad_from34,-1
                vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
                temp31b25 = vel*fqyb(i, k, jp1)/60.0
                velb = (37.*(u(i, k, j)+u(i, k, j-1))-8.*(u(i, k, j+1)+u&
&                  (i, k, j-2))+u(i, k, j+2)+u(i, k, j-3))*fqyb(i, k, jp1&
&                  )/60.0
                ub0(i, k, j) = ub0(i, k, j) + 37.*temp31b25
                ub0(i, k, j-1) = ub0(i, k, j-1) + 37.*temp31b25
                ub0(i, k, j+1) = ub0(i, k, j+1) - 8.*temp31b25
                ub0(i, k, j-2) = ub0(i, k, j-2) - 8.*temp31b25
                ub0(i, k, j+2) = ub0(i, k, j+2) + temp31b25
                ub0(i, k, j-3) = ub0(i, k, j-3) + temp31b25
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
              END DO
            END DO
          ELSE IF (branch .EQ. 1) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from35)
              CALL POPINTEGER4(ad_to35)
              DO i=ad_to35,ad_from35,-1
                temp31b26 = 0.25*(u(i, k, j)+u(i, k, j-1))*fqyb(i, k, &
&                  jp1)
                temp31b27 = 0.25*(rv(i, k, j)+rv(i-1, k, j))*fqyb(i, k, &
&                  jp1)
                rvb(i, k, j) = rvb(i, k, j) + temp31b26
                rvb(i-1, k, j) = rvb(i-1, k, j) + temp31b26
                ub0(i, k, j) = ub0(i, k, j) + temp31b27
                ub0(i, k, j-1) = ub0(i, k, j-1) + temp31b27
                fqyb(i, k, jp1) = 0.0
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from36)
              CALL POPINTEGER4(ad_to36)
              DO i=ad_to36,ad_from36,-1
                vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
                temp31b28 = vel*fqyb(i, k, jp1)/12.0
                velb = (7.*(u(i, k, j)+u(i, k, j-1))-u(i, k, j+1)-u(i, k&
&                  , j-2))*fqyb(i, k, jp1)/12.0
                ub0(i, k, j) = ub0(i, k, j) + 7.*temp31b28
                ub0(i, k, j-1) = ub0(i, k, j-1) + 7.*temp31b28
                ub0(i, k, j+1) = ub0(i, k, j+1) - temp31b28
                ub0(i, k, j-2) = ub0(i, k, j-2) - temp31b28
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 3) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from37)
            CALL POPINTEGER4(ad_to37)
            DO i=ad_to37,ad_from37,-1
              temp31b29 = 0.25*(u(i, k, j)+u(i, k, j-1))*fqyb(i, k, jp1)
              temp31b30 = 0.25*(rv(i, k, j)+rv(i-1, k, j))*fqyb(i, k, &
&                jp1)
              rvb(i, k, j) = rvb(i, k, j) + temp31b29
              rvb(i-1, k, j) = rvb(i-1, k, j) + temp31b29
              ub0(i, k, j) = ub0(i, k, j) + temp31b30
              ub0(i, k, j-1) = ub0(i, k, j-1) + temp31b30
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
        ELSE IF (branch .EQ. 4) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from38)
            CALL POPINTEGER4(ad_to38)
            DO i=ad_to38,ad_from38,-1
              vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
              temp31b31 = vel*fqyb(i, k, jp1)/12.0
              velb = (7.*(u(i, k, j)+u(i, k, j-1))-u(i, k, j+1)-u(i, k, &
&                j-2))*fqyb(i, k, jp1)/12.0
              ub0(i, k, j) = ub0(i, k, j) + 7.*temp31b31
              ub0(i, k, j-1) = ub0(i, k, j-1) + 7.*temp31b31
              ub0(i, k, j+1) = ub0(i, k, j+1) - temp31b31
              ub0(i, k, j-2) = ub0(i, k, j-2) - temp31b31
              fqyb(i, k, jp1) = 0.0
              rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
              rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
            END DO
          END DO
        END IF
      END DO
    ELSE IF (branch .EQ. 1) THEN
      fqxb = 0.0
      CALL POPINTEGER4(ad_from9)
      CALL POPINTEGER4(ad_to9)
      DO j=ad_to9,ad_from9,-1
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from8)
          CALL POPINTEGER4(ad_to8)
          DO i=ad_to8,ad_from8,-1
            mrdx = msfux(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
          CALL POPINTEGER4(i)
        END DO
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          DO k=ktf,kts,-1
            i = ide - 1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp19 = u(i+1, k, j) - u(i-2, k, j) - 3.*(u(i, k, j)-u(i-1&
&              , k, j))
            temp22 = SIGN(1., vel)
            temp21 = temp22/12.0
            temp20 = SIGN(1, time_step)
            temp19b1 = vel*fqxb(i, k)
            temp19b2 = temp19b1/12.0
            temp19b3 = temp20*temp21*temp19b1
            velb = ((7.*(u(i, k, j)+u(i-1, k, j))-u(i+1, k, j)-u(i-2, k&
&              , j))/12.0+temp20*(temp21*temp19))*fqxb(i, k)
            ub0(i, k, j) = ub0(i, k, j) + 7.*temp19b2 - 3.*temp19b3
            ub0(i-1, k, j) = ub0(i-1, k, j) + 3.*temp19b3 + 7.*temp19b2
            ub0(i+1, k, j) = ub0(i+1, k, j) + temp19b3 - temp19b2
            ub0(i-2, k, j) = ub0(i-2, k, j) - temp19b3 - temp19b2
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
            CALL POPINTEGER4(i)
          END DO
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            DO k=ktf,kts,-1
              temp19b = 0.25*(u(i-1, k, j)+ub)*fqxb(i, k)
              temp19b0 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + temp19b
              rub(i-1, k, j) = rub(i-1, k, j) + temp19b
              ub0(i-1, k, j) = ub0(i-1, k, j) + temp19b0
              ubb = temp19b0
              fqxb(i, k) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
                ubb = 0.0
              END IF
              CALL POPREAL8(ub)
              ub0(i, k, j) = ub0(i, k, j) + ubb
            END DO
            CALL POPINTEGER4(i)
          END IF
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp15 = u(i+1, k, j) - u(i-2, k, j) - 3.*(u(i, k, j)-u(i-1&
&              , k, j))
            temp18 = SIGN(1., vel)
            temp17 = temp18/12.0
            temp16 = SIGN(1, time_step)
            temp15b1 = vel*fqxb(i, k)
            temp15b2 = temp15b1/12.0
            temp15b3 = temp16*temp17*temp15b1
            velb = ((7.*(u(i, k, j)+u(i-1, k, j))-u(i+1, k, j)-u(i-2, k&
&              , j))/12.0+temp16*(temp17*temp15))*fqxb(i, k)
            ub0(i, k, j) = ub0(i, k, j) + 7.*temp15b2 - 3.*temp15b3
            ub0(i-1, k, j) = ub0(i-1, k, j) + 3.*temp15b3 + 7.*temp15b2
            ub0(i+1, k, j) = ub0(i+1, k, j) + temp15b3 - temp15b2
            ub0(i-2, k, j) = ub0(i-2, k, j) - temp15b3 - temp15b2
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
          END DO
          CALL POPINTEGER4(i)
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              temp15b = 0.25*(u(i, k, j)+ub)*fqxb(i, k)
              temp15b0 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + temp15b
              rub(i-1, k, j) = rub(i-1, k, j) + temp15b
              ub0(i, k, j) = ub0(i, k, j) + temp15b0
              ubb = temp15b0
              fqxb(i, k) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                ub0(i, k, j) = ub0(i, k, j) + ubb
                ubb = 0.0
              END IF
              CALL POPREAL8(ub)
              ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
            END DO
            CALL POPINTEGER4(i)
          END IF
        END IF
        DO k=ktf,kts,-1
          DO i=i_end_f,i_start_f,-1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp11 = u(i+2, k, j) - u(i-3, k, j) + 10.*(u(i, k, j)-u(i-1&
&              , k, j)) - 5.*(u(i+1, k, j)-u(i-2, k, j))
            temp14 = SIGN(1., vel)
            temp13 = temp14/60.0
            temp12 = SIGN(1, time_step)
            temp11b = vel*fqxb(i, k)
            temp11b0 = temp11b/60.0
            temp11b1 = -(temp12*temp13*temp11b)
            velb = ((37.*(u(i, k, j)+u(i-1, k, j))-8.*(u(i+1, k, j)+u(i-&
&              2, k, j))+u(i+2, k, j)+u(i-3, k, j))/60.0-temp12*(temp13*&
&              temp11))*fqxb(i, k)
            ub0(i, k, j) = ub0(i, k, j) + 10.*temp11b1 + 37.*temp11b0
            ub0(i-1, k, j) = ub0(i-1, k, j) + 37.*temp11b0 - 10.*&
&              temp11b1
            ub0(i+1, k, j) = ub0(i+1, k, j) - 5.*temp11b1 - 8.*temp11b0
            ub0(i-2, k, j) = ub0(i-2, k, j) + 5.*temp11b1 - 8.*temp11b0
            ub0(i+2, k, j) = ub0(i+2, k, j) + temp11b1 + temp11b0
            ub0(i-3, k, j) = ub0(i-3, k, j) + temp11b0 - temp11b1
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
          END DO
          CALL POPINTEGER4(i)
        END DO
      END DO
      fqyb = 0.0
      CALL POPINTEGER4(ad_from7)
      CALL POPINTEGER4(ad_to7)
      DO j=ad_to7,ad_from7,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from4)
              CALL POPINTEGER4(ad_to4)
              DO i=ad_to4,ad_from4,-1
                mrdy = msfux(i, j-1)*rdy
                fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from5)
              CALL POPINTEGER4(ad_to5)
              DO i=ad_to5,ad_from5,-1
                mrdy = msfux(i, j-1)*rdy
                fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from6)
            CALL POPINTEGER4(ad_to6)
            DO i=ad_to6,ad_from6,-1
              mrdy = msfux(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
        END IF
        CALL POPCONTROL3B(branch)
        IF (branch .LT. 3) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from)
              CALL POPINTEGER4(ad_to)
              DO i=ad_to,ad_from,-1
                vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
                temp = u(i, k, j+2) - u(i, k, j-3) + 10.*(u(i, k, j)-u(i&
&                  , k, j-1)) - 5.*(u(i, k, j+1)-u(i, k, j-2))
                temp2 = SIGN(1., vel)
                temp1 = temp2/60.0
                temp0 = SIGN(1, time_step)
                tempb = vel*fqyb(i, k, jp1)
                tempb0 = tempb/60.0
                tempb1 = -(temp0*temp1*tempb)
                velb = ((37.*(u(i, k, j)+u(i, k, j-1))-8.*(u(i, k, j+1)+&
&                  u(i, k, j-2))+u(i, k, j+2)+u(i, k, j-3))/60.0-temp0*(&
&                  temp1*temp))*fqyb(i, k, jp1)
                ub0(i, k, j) = ub0(i, k, j) + 10.*tempb1 + 37.*tempb0
                ub0(i, k, j-1) = ub0(i, k, j-1) + 37.*tempb0 - 10.*&
&                  tempb1
                ub0(i, k, j+1) = ub0(i, k, j+1) - 5.*tempb1 - 8.*tempb0
                ub0(i, k, j-2) = ub0(i, k, j-2) + 5.*tempb1 - 8.*tempb0
                ub0(i, k, j+2) = ub0(i, k, j+2) + tempb1 + tempb0
                ub0(i, k, j-3) = ub0(i, k, j-3) + tempb0 - tempb1
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
              END DO
            END DO
          ELSE IF (branch .EQ. 1) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from0)
              CALL POPINTEGER4(ad_to0)
              DO i=ad_to0,ad_from0,-1
                temp3b = 0.25*(u(i, k, j)+u(i, k, j-1))*fqyb(i, k, jp1)
                temp3b0 = 0.25*(rv(i, k, j)+rv(i-1, k, j))*fqyb(i, k, &
&                  jp1)
                rvb(i, k, j) = rvb(i, k, j) + temp3b
                rvb(i-1, k, j) = rvb(i-1, k, j) + temp3b
                ub0(i, k, j) = ub0(i, k, j) + temp3b0
                ub0(i, k, j-1) = ub0(i, k, j-1) + temp3b0
                fqyb(i, k, jp1) = 0.0
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from1)
              CALL POPINTEGER4(ad_to1)
              DO i=ad_to1,ad_from1,-1
                vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
                temp3 = u(i, k, j+1) - u(i, k, j-2) - 3.*(u(i, k, j)-u(i&
&                  , k, j-1))
                temp6 = SIGN(1., vel)
                temp5 = temp6/12.0
                temp4 = SIGN(1, time_step)
                temp3b1 = vel*fqyb(i, k, jp1)
                temp3b2 = temp3b1/12.0
                temp3b3 = temp4*temp5*temp3b1
                velb = ((7.*(u(i, k, j)+u(i, k, j-1))-u(i, k, j+1)-u(i, &
&                  k, j-2))/12.0+temp4*(temp5*temp3))*fqyb(i, k, jp1)
                ub0(i, k, j) = ub0(i, k, j) + 7.*temp3b2 - 3.*temp3b3
                ub0(i, k, j-1) = ub0(i, k, j-1) + 3.*temp3b3 + 7.*&
&                  temp3b2
                ub0(i, k, j+1) = ub0(i, k, j+1) + temp3b3 - temp3b2
                ub0(i, k, j-2) = ub0(i, k, j-2) - temp3b3 - temp3b2
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 3) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from2)
            CALL POPINTEGER4(ad_to2)
            DO i=ad_to2,ad_from2,-1
              temp7b = 0.25*(u(i, k, j)+u(i, k, j-1))*fqyb(i, k, jp1)
              temp7b0 = 0.25*(rv(i, k, j)+rv(i-1, k, j))*fqyb(i, k, jp1)
              rvb(i, k, j) = rvb(i, k, j) + temp7b
              rvb(i-1, k, j) = rvb(i-1, k, j) + temp7b
              ub0(i, k, j) = ub0(i, k, j) + temp7b0
              ub0(i, k, j-1) = ub0(i, k, j-1) + temp7b0
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
        ELSE IF (branch .EQ. 4) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from3)
            CALL POPINTEGER4(ad_to3)
            DO i=ad_to3,ad_from3,-1
              vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
              temp7 = u(i, k, j+1) - u(i, k, j-2) - 3.*(u(i, k, j)-u(i, &
&                k, j-1))
              temp10 = SIGN(1., vel)
              temp9 = temp10/12.0
              temp8 = SIGN(1, time_step)
              temp7b1 = vel*fqyb(i, k, jp1)
              temp7b2 = temp7b1/12.0
              temp7b3 = temp8*temp9*temp7b1
              velb = ((7.*(u(i, k, j)+u(i, k, j-1))-u(i, k, j+1)-u(i, k&
&                , j-2))/12.0+temp8*(temp9*temp7))*fqyb(i, k, jp1)
              ub0(i, k, j) = ub0(i, k, j) + 7.*temp7b2 - 3.*temp7b3
              ub0(i, k, j-1) = ub0(i, k, j-1) + 3.*temp7b3 + 7.*temp7b2
              ub0(i, k, j+1) = ub0(i, k, j+1) + temp7b3 - temp7b2
              ub0(i, k, j-2) = ub0(i, k, j-2) - temp7b3 - temp7b2
              fqyb(i, k, jp1) = 0.0
              rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
              rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
            END DO
          END DO
        END IF
      END DO
    ELSE
      fqyb = 0.0
      CALL POPINTEGER4(ad_from18)
      CALL POPINTEGER4(ad_to18)
      DO j=ad_to18,ad_from18,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from15)
              CALL POPINTEGER4(ad_to15)
              DO i=ad_to15,ad_from15,-1
                mrdy = msfux(i, j-1)*rdy
                fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
              CALL POPINTEGER4(i)
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from16)
              CALL POPINTEGER4(ad_to16)
              DO i=ad_to16,ad_from16,-1
                mrdy = msfux(i, j-1)*rdy
                fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
              CALL POPINTEGER4(i)
            END DO
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from17)
            CALL POPINTEGER4(ad_to17)
            DO i=ad_to17,ad_from17,-1
              mrdy = msfux(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
            CALL POPINTEGER4(i)
          END DO
        END IF
        CALL POPCONTROL2B(branch)
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from12)
            CALL POPINTEGER4(ad_to12)
            DO i=ad_to12,ad_from12,-1
              temp23b4 = 0.25*(u(i, k, j_start)+u(i, k, j_start-1))*fqyb&
&                (i, k, jp1)
              temp23b5 = 0.25*(rv(i, k, j_start)+rv(i-1, k, j_start))*&
&                fqyb(i, k, jp1)
              rvb(i, k, j_start) = rvb(i, k, j_start) + temp23b4
              rvb(i-1, k, j_start) = rvb(i-1, k, j_start) + temp23b4
              ub0(i, k, j_start) = ub0(i, k, j_start) + temp23b5
              ub0(i, k, j_start-1) = ub0(i, k, j_start-1) + temp23b5
              fqyb(i, k, jp1) = 0.0
            END DO
            CALL POPINTEGER4(i)
          END DO
        ELSE IF (branch .EQ. 1) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from13)
            CALL POPINTEGER4(ad_to13)
            DO i=ad_to13,ad_from13,-1
              temp23b6 = 0.25*(u(i, k, j)+u(i, k, j-1))*fqyb(i, k, jp1)
              temp23b7 = 0.25*(rv(i, k, j)+rv(i-1, k, j))*fqyb(i, k, jp1&
&                )
              rvb(i, k, j) = rvb(i, k, j) + temp23b6
              rvb(i-1, k, j) = rvb(i-1, k, j) + temp23b6
              ub0(i, k, j) = ub0(i, k, j) + temp23b7
              ub0(i, k, j-1) = ub0(i, k, j-1) + temp23b7
              fqyb(i, k, jp1) = 0.0
            END DO
            CALL POPINTEGER4(i)
          END DO
        ELSE
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from14)
            CALL POPINTEGER4(ad_to14)
            DO i=ad_to14,ad_from14,-1
              vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
              temp23b8 = vel*fqyb(i, k, jp1)/12.0
              velb = (7.*(u(i, k, j)+u(i, k, j-1))-u(i, k, j+1)-u(i, k, &
&                j-2))*fqyb(i, k, jp1)/12.0
              ub0(i, k, j) = ub0(i, k, j) + 7.*temp23b8
              ub0(i, k, j-1) = ub0(i, k, j-1) + 7.*temp23b8
              ub0(i, k, j+1) = ub0(i, k, j+1) - temp23b8
              ub0(i, k, j-2) = ub0(i, k, j-2) - temp23b8
              fqyb(i, k, jp1) = 0.0
              rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
              rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
            END DO
            CALL POPINTEGER4(i)
          END DO
        END IF
      END DO
      fqxb = 0.0
      CALL POPINTEGER4(ad_from11)
      CALL POPINTEGER4(ad_to11)
      DO j=ad_to11,ad_from11,-1
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from10)
          CALL POPINTEGER4(ad_to10)
          DO i=ad_to10,ad_from10,-1
            mrdx = msfux(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
          CALL POPINTEGER4(i)
        END DO
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          DO k=ktf,kts,-1
            temp23b2 = 0.25*(u(i-1, k, j)+ub)*fqxb(i, k)
            temp23b3 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
            rub(i, k, j) = rub(i, k, j) + temp23b2
            rub(i-1, k, j) = rub(i-1, k, j) + temp23b2
            ub0(i-1, k, j) = ub0(i-1, k, j) + temp23b3
            ubb = temp23b3
            fqxb(i, k) = 0.0
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
              ubb = 0.0
            END IF
            CALL POPREAL8(ub)
            ub0(i, k, j) = ub0(i, k, j) + ubb
          END DO
          CALL POPINTEGER4(i)
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            temp23b0 = 0.25*(u(i, k, j)+ub)*fqxb(i, k)
            temp23b1 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
            rub(i, k, j) = rub(i, k, j) + temp23b0
            rub(i-1, k, j) = rub(i-1, k, j) + temp23b0
            ub0(i, k, j) = ub0(i, k, j) + temp23b1
            ubb = temp23b1
            fqxb(i, k) = 0.0
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              ub0(i, k, j) = ub0(i, k, j) + ubb
              ubb = 0.0
            END IF
            CALL POPREAL8(ub)
            ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
          END DO
          CALL POPINTEGER4(i)
        END IF
        DO k=ktf,kts,-1
          DO i=i_end_f,i_start_f,-1
            vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
            temp23b = vel*fqxb(i, k)/12.0
            velb = (7.*(u(i, k, j)+u(i-1, k, j))-u(i+1, k, j)-u(i-2, k, &
&              j))*fqxb(i, k)/12.0
            ub0(i, k, j) = ub0(i, k, j) + 7.*temp23b
            ub0(i-1, k, j) = ub0(i-1, k, j) + 7.*temp23b
            ub0(i+1, k, j) = ub0(i+1, k, j) - temp23b
            ub0(i-2, k, j) = ub0(i-2, k, j) - temp23b
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
          END DO
          CALL POPINTEGER4(i)
        END DO
      END DO
    END IF
  ELSE IF (branch .EQ. 3) THEN
    fqyb = 0.0
    CALL POPINTEGER4(ad_from27)
    CALL POPINTEGER4(ad_to27)
    DO j=ad_to27,ad_from27,-1
      CALL POPINTEGER4(jp0)
      CALL POPINTEGER4(jp1)
      CALL POPCONTROL2B(branch)
      IF (branch .LT. 2) THEN
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from24)
            CALL POPINTEGER4(ad_to24)
            DO i=ad_to24,ad_from24,-1
              mrdy = msfux(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
            END DO
            CALL POPINTEGER4(i)
          END DO
        ELSE
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from25)
            CALL POPINTEGER4(ad_to25)
            DO i=ad_to25,ad_from25,-1
              mrdy = msfux(i, j-1)*rdy
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
            CALL POPINTEGER4(i)
          END DO
        END IF
      ELSE IF (branch .EQ. 2) THEN
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from26)
          CALL POPINTEGER4(ad_to26)
          DO i=ad_to26,ad_from26,-1
            mrdy = msfux(i, j-1)*rdy
            fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j-1&
&              )
            fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j-1&
&              )
          END DO
          CALL POPINTEGER4(i)
        END DO
      END IF
      CALL POPCONTROL2B(branch)
      IF (branch .EQ. 0) THEN
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from21)
          CALL POPINTEGER4(ad_to21)
          DO i=ad_to21,ad_from21,-1
            temp27b3 = 0.25*(u(i, k, j_start)+u(i, k, j_start-1))*fqyb(i&
&              , k, jp1)
            temp27b4 = 0.25*(rv(i, k, j_start)+rv(i-1, k, j_start))*fqyb&
&              (i, k, jp1)
            rvb(i, k, j_start) = rvb(i, k, j_start) + temp27b3
            rvb(i-1, k, j_start) = rvb(i-1, k, j_start) + temp27b3
            ub0(i, k, j_start) = ub0(i, k, j_start) + temp27b4
            ub0(i, k, j_start-1) = ub0(i, k, j_start-1) + temp27b4
            fqyb(i, k, jp1) = 0.0
          END DO
          CALL POPINTEGER4(i)
        END DO
      ELSE IF (branch .EQ. 1) THEN
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from22)
          CALL POPINTEGER4(ad_to22)
          DO i=ad_to22,ad_from22,-1
            temp27b5 = 0.25*(u(i, k, j)+u(i, k, j-1))*fqyb(i, k, jp1)
            temp27b6 = 0.25*(rv(i, k, j)+rv(i-1, k, j))*fqyb(i, k, jp1)
            rvb(i, k, j) = rvb(i, k, j) + temp27b5
            rvb(i-1, k, j) = rvb(i-1, k, j) + temp27b5
            ub0(i, k, j) = ub0(i, k, j) + temp27b6
            ub0(i, k, j-1) = ub0(i, k, j-1) + temp27b6
            fqyb(i, k, jp1) = 0.0
          END DO
          CALL POPINTEGER4(i)
        END DO
      ELSE
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from23)
          CALL POPINTEGER4(ad_to23)
          DO i=ad_to23,ad_from23,-1
            vel = 0.5*(rv(i, k, j)+rv(i-1, k, j))
            temp27 = u(i, k, j+1) - u(i, k, j-2) - 3.*(u(i, k, j)-u(i, k&
&              , j-1))
            temp30 = SIGN(1., vel)
            temp29 = temp30/12.0
            temp28 = SIGN(1, time_step)
            temp27b7 = vel*fqyb(i, k, jp1)
            temp27b8 = temp27b7/12.0
            temp27b9 = temp28*temp29*temp27b7
            velb = ((7.*(u(i, k, j)+u(i, k, j-1))-u(i, k, j+1)-u(i, k, j&
&              -2))/12.0+temp28*(temp29*temp27))*fqyb(i, k, jp1)
            ub0(i, k, j) = ub0(i, k, j) + 7.*temp27b8 - 3.*temp27b9
            ub0(i, k, j-1) = ub0(i, k, j-1) + 3.*temp27b9 + 7.*temp27b8
            ub0(i, k, j+1) = ub0(i, k, j+1) + temp27b9 - temp27b8
            ub0(i, k, j-2) = ub0(i, k, j-2) - temp27b9 - temp27b8
            fqyb(i, k, jp1) = 0.0
            rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
            rvb(i-1, k, j) = rvb(i-1, k, j) + 0.5*velb
          END DO
          CALL POPINTEGER4(i)
        END DO
      END IF
    END DO
    fqxb = 0.0
    CALL POPINTEGER4(ad_from20)
    CALL POPINTEGER4(ad_to20)
    DO j=ad_to20,ad_from20,-1
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from19)
        CALL POPINTEGER4(ad_to19)
        DO i=ad_to19,ad_from19,-1
          mrdx = msfux(i, j)*rdx
          fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
          fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
        END DO
        CALL POPINTEGER4(i)
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .NE. 0) THEN
        DO k=ktf,kts,-1
          temp27b1 = 0.25*(u(i-1, k, j)+ub)*fqxb(i, k)
          temp27b2 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
          rub(i, k, j) = rub(i, k, j) + temp27b1
          rub(i-1, k, j) = rub(i-1, k, j) + temp27b1
          ub0(i-1, k, j) = ub0(i-1, k, j) + temp27b2
          ubb = temp27b2
          fqxb(i, k) = 0.0
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
            ubb = 0.0
          END IF
          CALL POPREAL8(ub)
          ub0(i, k, j) = ub0(i, k, j) + ubb
        END DO
        CALL POPINTEGER4(i)
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        DO k=ktf,kts,-1
          temp27b = 0.25*(u(i, k, j)+ub)*fqxb(i, k)
          temp27b0 = 0.25*(ru(i, k, j)+ru(i-1, k, j))*fqxb(i, k)
          rub(i, k, j) = rub(i, k, j) + temp27b
          rub(i-1, k, j) = rub(i-1, k, j) + temp27b
          ub0(i, k, j) = ub0(i, k, j) + temp27b0
          ubb = temp27b0
          fqxb(i, k) = 0.0
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            ub0(i, k, j) = ub0(i, k, j) + ubb
            ubb = 0.0
          END IF
          CALL POPREAL8(ub)
          ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
        END DO
        CALL POPINTEGER4(i)
      END IF
      DO k=ktf,kts,-1
        DO i=i_end_f,i_start_f,-1
          vel = 0.5*(ru(i, k, j)+ru(i-1, k, j))
          temp23 = u(i+1, k, j) - u(i-2, k, j) - 3.*(u(i, k, j)-u(i-1, k&
&            , j))
          temp26 = SIGN(1., vel)
          temp25 = temp26/12.0
          temp24 = SIGN(1, time_step)
          temp23b9 = vel*fqxb(i, k)
          temp23b10 = temp23b9/12.0
          temp23b11 = temp24*temp25*temp23b9
          velb = ((7.*(u(i, k, j)+u(i-1, k, j))-u(i+1, k, j)-u(i-2, k, j&
&            ))/12.0+temp24*(temp25*temp23))*fqxb(i, k)
          ub0(i, k, j) = ub0(i, k, j) + 7.*temp23b10 - 3.*temp23b11
          ub0(i-1, k, j) = ub0(i-1, k, j) + 3.*temp23b11 + 7.*temp23b10
          ub0(i+1, k, j) = ub0(i+1, k, j) + temp23b11 - temp23b10
          ub0(i-2, k, j) = ub0(i-2, k, j) - temp23b11 - temp23b10
          fqxb(i, k) = 0.0
          rub(i, k, j) = rub(i, k, j) + 0.5*velb
          rub(i-1, k, j) = rub(i-1, k, j) + 0.5*velb
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
  ELSE IF (branch .EQ. 4) THEN
    CALL POPINTEGER4(ad_from33)
    CALL POPINTEGER4(ad_to33)
    DO j=ad_to33,ad_from33,-1
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from32)
        CALL POPINTEGER4(ad_to32)
        DO i=ad_to32,ad_from32,-1
          CALL POPCONTROL2B(branch)
          IF (branch .EQ. 0) THEN
            mrdy = msfux(i, j)*rdy
            temp31b20 = -(mrdy*0.25*tendencyb(i, k, j))
            temp31b21 = (u(i, k, j+1)+u(i, k, j))*temp31b20
            temp31b22 = (rv(i, k, j+1)+rv(i-1, k, j+1))*temp31b20
            temp31b23 = -((u(i, k, j)+u(i, k, j-1))*temp31b20)
            temp31b24 = -((rv(i, k, j)+rv(i-1, k, j))*temp31b20)
            rvb(i, k, j+1) = rvb(i, k, j+1) + temp31b21
            rvb(i-1, k, j+1) = rvb(i-1, k, j+1) + temp31b21
            ub0(i, k, j+1) = ub0(i, k, j+1) + temp31b22
            ub0(i, k, j) = ub0(i, k, j) + temp31b24 + temp31b22
            rvb(i, k, j) = rvb(i, k, j) + temp31b23
            rvb(i-1, k, j) = rvb(i-1, k, j) + temp31b23
            ub0(i, k, j-1) = ub0(i, k, j-1) + temp31b24
          ELSE IF (branch .EQ. 1) THEN
            mrdy = msfux(i, j)*rdy
            temp31b17 = mrdy*0.25*tendencyb(i, k, j)
            temp31b18 = (u(i, k, j)+u(i, k, j-1))*temp31b17
            temp31b19 = (rv(i, k, j)+rv(i-1, k, j))*temp31b17
            rvb(i, k, j) = rvb(i, k, j) + temp31b18
            rvb(i-1, k, j) = rvb(i-1, k, j) + temp31b18
            ub0(i, k, j) = ub0(i, k, j) + temp31b19
            ub0(i, k, j-1) = ub0(i, k, j-1) + temp31b19
          ELSE
            mrdy = msfux(i, j)*rdy
            temp31b14 = -(mrdy*0.25*tendencyb(i, k, j))
            temp31b15 = (u(i, k, j+1)+u(i, k, j))*temp31b14
            temp31b16 = (rv(i, k, j+1)+rv(i-1, k, j+1))*temp31b14
            rvb(i, k, j+1) = rvb(i, k, j+1) + temp31b15
            rvb(i-1, k, j+1) = rvb(i-1, k, j+1) + temp31b15
            ub0(i, k, j+1) = ub0(i, k, j+1) + temp31b16
            ub0(i, k, j) = ub0(i, k, j) + temp31b16
          END IF
        END DO
        CALL POPINTEGER4(i)
      END DO
    END DO
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      CALL POPINTEGER4(ad_from31)
      CALL POPINTEGER4(ad_to31)
      DO j=ad_to31,ad_from31,-1
        DO k=ktf,kts,-1
          i = ide - 1
          mrdx = msfux(i, j)*rdx
          temp31b9 = -(mrdx*0.25*tendencyb(i, k, j))
          temp31b10 = (ub+u(i, k, j))*temp31b9
          temp31b11 = (ru(i+1, k, j)+ru(i, k, j))*temp31b9
          temp31b12 = -((u(i, k, j)+u(i-1, k, j))*temp31b9)
          temp31b13 = -((ru(i, k, j)+ru(i-1, k, j))*temp31b9)
          rub(i+1, k, j) = rub(i+1, k, j) + temp31b10
          rub(i, k, j) = rub(i, k, j) + temp31b12 + temp31b10
          ubb = temp31b11
          ub0(i, k, j) = ub0(i, k, j) + temp31b13 + temp31b11
          rub(i-1, k, j) = rub(i-1, k, j) + temp31b12
          ub0(i-1, k, j) = ub0(i-1, k, j) + temp31b13
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            ub0(i, k, j) = ub0(i, k, j) + ubb
            ubb = 0.0
          END IF
          CALL POPREAL8(ub)
          ub0(i+1, k, j) = ub0(i+1, k, j) + ubb
        END DO
      END DO
    END IF
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      CALL POPINTEGER4(ad_from30)
      CALL POPINTEGER4(ad_to30)
      DO j=ad_to30,ad_from30,-1
        DO k=ktf,kts,-1
          i = ids + 1
          mrdx = msfux(i, j)*rdx
          temp31b4 = -(mrdx*0.25*tendencyb(i, k, j))
          temp31b5 = (u(i+1, k, j)+u(i, k, j))*temp31b4
          temp31b6 = (ru(i+1, k, j)+ru(i, k, j))*temp31b4
          temp31b7 = -((u(i, k, j)+ub)*temp31b4)
          temp31b8 = -((ru(i, k, j)+ru(i-1, k, j))*temp31b4)
          rub(i+1, k, j) = rub(i+1, k, j) + temp31b5
          rub(i, k, j) = rub(i, k, j) + temp31b7 + temp31b5
          ub0(i+1, k, j) = ub0(i+1, k, j) + temp31b6
          ub0(i, k, j) = ub0(i, k, j) + temp31b8 + temp31b6
          rub(i-1, k, j) = rub(i-1, k, j) + temp31b7
          ubb = temp31b8
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            ub0(i, k, j) = ub0(i, k, j) + ubb
            ubb = 0.0
          END IF
          CALL POPREAL8(ub)
          ub0(i-1, k, j) = ub0(i-1, k, j) + ubb
        END DO
      END DO
    END IF
    CALL POPINTEGER4(ad_from29)
    CALL POPINTEGER4(ad_to29)
    DO j=ad_to29,ad_from29,-1
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from28)
        CALL POPINTEGER4(ad_to28)
        DO i=ad_to28,ad_from28,-1
          mrdx = msfux(i, j)*rdx
          temp31b = -(mrdx*0.25*tendencyb(i, k, j))
          temp31b0 = (u(i+1, k, j)+u(i, k, j))*temp31b
          temp31b1 = (ru(i+1, k, j)+ru(i, k, j))*temp31b
          temp31b2 = -((u(i, k, j)+u(i-1, k, j))*temp31b)
          temp31b3 = -((ru(i, k, j)+ru(i-1, k, j))*temp31b)
          rub(i+1, k, j) = rub(i+1, k, j) + temp31b0
          rub(i, k, j) = rub(i, k, j) + temp31b2 + temp31b0
          ub0(i+1, k, j) = ub0(i+1, k, j) + temp31b1
          ub0(i, k, j) = ub0(i, k, j) + temp31b3 + temp31b1
          rub(i-1, k, j) = rub(i-1, k, j) + temp31b2
          ub0(i-1, k, j) = ub0(i-1, k, j) + temp31b3
        END DO
      END DO
    END DO
  END IF
END SUBROUTINE A_ADVECT_U

!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.5 (r3785) - 22 Mar 2011 18:35
!
!  Differentiation of advect_v in reverse (adjoint) mode:
!   gradient     of useful results: rom tendency v v_old ru rv
!                mut
!   with respect to varying inputs: rom tendency v v_old ru rv
!                mut
!   RW status of diff variables: rom:incr tendency:in-out v:incr
!                v_old:incr ru:incr rv:incr mut:incr
SUBROUTINE A_ADVECT_V(v, vb0, v_old, v_oldb, tendency, tendencyb, ru, &
&  rub, rv, rvb, rom, romb, mut, mutb, time_step, config_flags, msfux, &
&  msfuy, msfvx, msfvy, msftx, msfty, fzm, fzp, rdx, rdy, rdzw, ids, ide&
&  , jds, jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte&
&  , kts, kte)
  IMPLICIT NONE
! Input data
  TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
  INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&  jme, kms, kme, its, ite, jts, jte, kts, kte
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: v, v_old, ru&
&  , rv, rom
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: vb0, v_oldb, rub, rvb, &
&  romb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: mut
  REAL, DIMENSION(ims:ime, jms:jme) :: mutb
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(INOUT) :: tendency
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: tendencyb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: msfux, msfuy, msfvx, &
&  msfvy, msftx, msfty
  REAL, DIMENSION(kms:kme), INTENT(IN) :: fzm, fzp, rdzw
  REAL, INTENT(IN) :: rdx, rdy
  INTEGER, INTENT(IN) :: time_step
! Local data
  INTEGER :: i, j, k, itf, jtf, ktf
  INTEGER :: i_start, i_end, j_start, j_end
  INTEGER :: i_start_f, i_end_f, j_start_f, j_end_f
  INTEGER :: jmin, jmax, jp, jm, imin, imax
  REAL :: mrdx, mrdy, ub, vb, uw, vw, dup, dum
  REAL :: ubb, vbb, uwb, dupb, dumb
  REAL, DIMENSION(its:ite, kts:kte) :: vflux
  REAL, DIMENSION(its:ite, kts:kte) :: vfluxb
  REAL, DIMENSION(its:ite + 1, kts:kte) :: fqx
  REAL, DIMENSION(its:ite+1, kts:kte) :: fqxb
  REAL, DIMENSION(its:ite, kts:kte, 2) :: fqy
  REAL, DIMENSION(its:ite, kts:kte, 2) :: fqyb
  INTEGER :: horz_order
  INTEGER :: vert_order
  LOGICAL :: degrade_xs, degrade_ys
  LOGICAL :: degrade_xe, degrade_ye
  INTEGER :: jp1, jp0, jtmp
! definition of flux operators, 3rd, 4th, 5th or 6th order
  REAL :: flux3, flux4, flux5, flux6
  REAL :: q_im3, q_im2, q_im1, q_i, q_ip1, q_ip2, ua, vel
  REAL :: velb
  LOGICAL :: specified
  INTEGER :: ad_from
  INTEGER :: ad_to
  INTEGER :: branch
  INTEGER :: ad_from0
  INTEGER :: ad_to0
  INTEGER :: ad_from1
  INTEGER :: ad_to1
  INTEGER :: ad_from2
  INTEGER :: ad_to2
  INTEGER :: ad_from3
  INTEGER :: ad_to3
  INTEGER :: ad_from4
  INTEGER :: ad_to4
  INTEGER :: ad_from5
  INTEGER :: ad_to5
  INTEGER :: ad_from6
  INTEGER :: ad_to6
  INTEGER :: ad_from7
  INTEGER :: ad_to7
  INTEGER :: ad_from8
  INTEGER :: ad_to8
  INTEGER :: ad_from9
  INTEGER :: ad_to9
  INTEGER :: ad_from10
  INTEGER :: ad_to10
  INTEGER :: ad_from11
  INTEGER :: ad_to11
  INTEGER :: ad_from12
  INTEGER :: ad_to12
  INTEGER :: ad_from13
  INTEGER :: ad_to13
  INTEGER :: ad_from14
  INTEGER :: ad_to14
  INTEGER :: ad_from15
  INTEGER :: ad_to15
  INTEGER :: ad_from16
  INTEGER :: ad_to16
  INTEGER :: ad_from17
  INTEGER :: ad_to17
  INTEGER :: ad_from18
  INTEGER :: ad_to18
  INTEGER :: ad_from19
  INTEGER :: ad_to19
  INTEGER :: ad_from20
  INTEGER :: ad_to20
  INTEGER :: ad_from21
  INTEGER :: ad_to21
  INTEGER :: ad_from22
  INTEGER :: ad_to22
  INTEGER :: ad_from23
  INTEGER :: ad_to23
  INTEGER :: ad_from24
  INTEGER :: ad_to24
  INTEGER :: ad_from25
  INTEGER :: ad_to25
  INTEGER :: ad_from26
  INTEGER :: ad_to26
  INTEGER :: ad_from27
  INTEGER :: ad_to27
  INTEGER :: ad_from28
  INTEGER :: ad_to28
  INTEGER :: ad_from29
  INTEGER :: ad_to29
  INTEGER :: ad_from30
  INTEGER :: ad_to30
  INTEGER :: ad_from31
  INTEGER :: ad_to31
  INTEGER :: ad_from32
  INTEGER :: ad_to32
  INTEGER :: ad_from33
  INTEGER :: ad_to33
  INTEGER :: ad_from34
  INTEGER :: ad_to34
  INTEGER :: ad_from35
  INTEGER :: ad_to35
  INTEGER :: ad_from36
  INTEGER :: ad_to36
  INTEGER :: ad_from37
  INTEGER :: ad_to37
  INTEGER :: ad_from38
  INTEGER :: ad_to38
  INTEGER :: ad_from39
  INTEGER :: ad_to39
  INTEGER :: ad_from40
  INTEGER :: ad_to40
  INTEGER :: ad_from41
  INTEGER :: ad_to41
  INTEGER :: ad_from42
  INTEGER :: ad_to42
  INTEGER :: ad_from43
  INTEGER :: ad_to43
  INTEGER :: ad_from44
  INTEGER :: ad_to44
  INTEGER :: ad_from45
  INTEGER :: ad_to45
  INTEGER :: ad_from46
  INTEGER :: ad_to46
  INTEGER :: ad_from47
  INTEGER :: ad_to47
  INTEGER :: ad_from48
  INTEGER :: ad_to48
  INTEGER :: ad_from49
  INTEGER :: ad_to49
  INTEGER :: ad_from50
  INTEGER :: ad_to50
  INTEGER :: ad_from51
  INTEGER :: ad_to51
  INTEGER :: ad_from52
  INTEGER :: ad_to52
  REAL :: temp3
  REAL :: temp29
  REAL :: temp31b43
  REAL :: temp2
  INTEGER :: temp28
  REAL :: temp31b42
  REAL :: temp1
  REAL :: temp27
  REAL :: temp31b41
  INTEGER :: temp0
  REAL :: temp26
  REAL :: temp31b40
  REAL :: temp7b
  REAL :: temp25
  INTEGER :: temp24
  REAL :: temp23
  REAL :: temp22
  REAL :: temp21
  REAL :: temp35b3
  INTEGER :: temp20
  REAL :: temp35b2
  REAL :: temp35b1
  REAL :: temp35b0
  REAL :: temp23b9
  REAL :: temp23b8
  REAL :: temp19b
  REAL :: temp23b7
  REAL :: temp23b6
  REAL :: temp27b
  REAL :: temp23b5
  REAL :: temp35b
  REAL :: tempb1
  REAL :: temp23b4
  REAL :: temp43b
  REAL :: tempb0
  REAL :: temp23b3
  REAL :: temp23b2
  REAL :: temp23b1
  REAL :: temp23b0
  REAL :: temp31b39
  REAL :: temp31b38
  REAL :: temp7b3
  REAL :: temp31b37
  REAL :: temp3b
  REAL :: temp7b2
  REAL :: temp31b36
  REAL :: temp7b1
  REAL :: temp31b35
  REAL :: temp7b0
  REAL :: temp23b15
  REAL :: temp31b34
  REAL :: temp19
  REAL :: temp23b14
  REAL :: temp31b33
  REAL :: cb
  REAL :: temp18
  REAL :: temp23b13
  REAL :: temp31b32
  REAL :: temp17
  REAL :: temp23b12
  REAL :: temp31b31
  REAL :: temp43b9
  INTEGER :: temp16
  REAL :: temp23b11
  REAL :: temp31b30
  REAL :: temp43b8
  REAL :: temp15
  REAL :: temp23b10
  REAL :: temp43b7
  REAL :: temp14
  REAL :: temp11b1
  REAL :: temp43b6
  REAL :: temp13
  REAL :: temp11b0
  REAL :: temp43b5
  INTEGER :: temp12
  REAL :: temp43b4
  REAL :: temp11
  REAL :: temp43b3
  REAL :: temp10
  REAL :: temp43b2
  REAL :: temp15b
  REAL :: temp43b1
  REAL :: temp46
  REAL :: temp23b
  REAL :: temp43b0
  REAL :: temp45
  REAL :: temp31b
  INTEGER :: temp44
  REAL :: temp43
  REAL :: temp42
  REAL :: temp19b3
  REAL :: temp31b9
  REAL :: temp41
  REAL :: temp19b2
  REAL :: temp31b8
  INTEGER :: temp40
  REAL :: temp19b1
  REAL :: temp31b7
  REAL :: temp19b0
  REAL :: temp31b6
  REAL :: temp31b5
  REAL :: temp31b4
  REAL :: temp31b3
  REAL :: tempb
  REAL :: temp31b2
  REAL :: temp31b1
  REAL :: temp31b0
  REAL :: temp31b29
  REAL :: temp31b28
  REAL :: temp31b27
  REAL :: temp31b26
  REAL :: temp31b25
  REAL :: temp31b24
  REAL :: temp31b23
  REAL :: temp31b22
  REAL :: temp31b21
  REAL :: temp11b
  REAL :: temp31b20
  REAL :: temp39b1
  REAL :: temp39b0
  REAL :: temp31b53
  REAL :: temp39
  REAL :: temp31b52
  REAL :: temp38
  REAL :: temp3b3
  REAL :: temp31b51
  REAL :: temp37
  REAL :: temp3b2
  REAL :: temp31b50
  INTEGER :: temp36
  REAL :: temp3b1
  REAL :: temp35
  REAL :: temp3b0
  REAL :: temp34
  REAL :: temp33
  INTEGER :: temp32
  REAL :: temp31
  REAL :: temp30
  REAL :: temp27b1
  REAL :: temp27b0
  REAL :: temp31b19
  REAL :: temp31b18
  REAL :: temp31b17
  REAL :: temp15b3
  REAL :: temp31b16
  REAL :: temp
  REAL :: temp15b2
  REAL :: temp31b15
  REAL :: temp15b1
  REAL :: temp31b14
  REAL :: temp47b6
  REAL :: temp15b0
  REAL :: temp31b13
  REAL :: temp43b10
  REAL :: temp47b5
  REAL :: temp9
  REAL :: temp31b12
  REAL :: temp31b49
  REAL :: temp47b4
  INTEGER :: temp8
  REAL :: temp31b11
  REAL :: temp31b48
  REAL :: temp39b
  REAL :: temp47b3
  REAL :: temp7
  REAL :: temp31b10
  REAL :: temp31b47
  REAL :: temp47b
  REAL :: temp47b2
  REAL :: temp6
  REAL :: temp31b46
  REAL :: temp47b1
  REAL :: temp5
  REAL :: temp31b45
  REAL :: temp47b0
  INTEGER :: temp4
  REAL :: temp31b44
  specified = .false.
  IF (config_flags%specified .OR. config_flags%nested) specified = &
&      .true.
  IF (kte .GT. kde - 1) THEN
    ktf = kde - 1
  ELSE
    ktf = kte
  END IF
  horz_order = config_flags%h_mom_adv_order
  vert_order = config_flags%v_mom_adv_order
!  here is the choice of flux operators
  IF (horz_order .EQ. 6) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 3) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 3) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 3) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 3) degrade_ye = .false.
!--------------- y - advection first
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      IF (jts .LT. jds + 1) THEN
        j_start = jds + 1
      ELSE
        j_start = jts
      END IF
      j_start_f = jds + 3
    END IF
    IF (degrade_ye) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
      j_end_f = jde - 2
    END IF
!  compute fluxes, 5th or 6th order
    jp1 = 2
    jp0 = 1
    ad_from45 = j_start
j_loop_y_flux_6:DO j=ad_from45,j_end+1
      IF (j .GE. j_start_f .AND. j .LE. j_end_f) THEN
        DO k=kts,ktf
          ad_from37 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from37)
        END DO
        CALL PUSHCONTROL3B(0)
      ELSE IF (j .EQ. jds + 1) THEN
!  we must be close to some boundary where we need to reduce the order of the stencil
!  specified uses upstream normal wind at boundaries
! 2nd order flux next to south boundary
        DO k=kts,ktf
          ad_from38 = i_start
          DO i=ad_from38,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j-1)
            IF (specified .AND. v(i, k, j) .LT. 0.) THEN
              vb = v(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from38)
        END DO
        CALL PUSHCONTROL3B(1)
      ELSE IF (j .EQ. jds + 2) THEN
! third of 4th order flux 2 in from south boundary
        DO k=kts,ktf
          ad_from39 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from39)
        END DO
        CALL PUSHCONTROL3B(2)
      ELSE IF (j .EQ. jde) THEN
! 2nd order flux next to north boundary
        DO k=kts,ktf
          ad_from40 = i_start
          DO i=ad_from40,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j)
            IF (specified .AND. v(i, k, j-1) .GT. 0.) THEN
              vb = v(i, k, j-1)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from40)
        END DO
        CALL PUSHCONTROL3B(3)
      ELSE IF (j .EQ. jde - 1) THEN
! 3rd or 4th order flux 2 in from north boundary
        DO k=kts,ktf
          ad_from41 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from41)
        END DO
        CALL PUSHCONTROL3B(4)
      ELSE
        CALL PUSHCONTROL3B(5)
      END IF
!  y flux-divergence into tendency
! Comments on polar boundary conditions
! No advection over the poles means tendencies (held from jds [S. pole]
! to jde [N pole], i.e., on v grid) must be zero at poles
! [tendency(jds) and tendency(jde)=0]
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from42 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from42)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde + 1) THEN
! If j_end were set to jde in a special if statement apart from
! degrade_ye, then we would hit the next conditional.  But since
! we want the tendency to be zero anyway, not looping to jde+1
! will produce the same effect.
        DO k=kts,ktf
          ad_from43 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from43)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! Normal code
        DO k=kts,ktf
          ad_from44 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from44)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO j_loop_y_flux_6
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from45)
!  next, x - flux divergence
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
! Polar boundary conditions are like open or specified
    IF ((config_flags%open_ys .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF ((config_flags%open_ye .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
      IF (i_start + 2 .GT. ids + 3) THEN
        i_start_f = ids + 3
      ELSE
        i_start_f = i_start + 2
      END IF
    END IF
    IF (degrade_xe) THEN
      IF (ide - 2 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 2
      END IF
      i_end_f = ide - 3
    END IF
    ad_from48 = j_start
!  compute fluxes
    DO j=ad_from48,j_end
!  lower order fluxes close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        ad_from46 = i_start
        DO i=ad_from46,i_start_f-1
          IF (i .EQ. ids + 1) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ids + 2) THEN
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(ad_from46)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        DO i=i_end_f+1,i_end+1
          IF (i .EQ. ide - 1) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ide - 2) THEN
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from47 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from47)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from48)
    CALL PUSHCONTROL3B(0)
  ELSE IF (horz_order .EQ. 5) THEN
!  5th order horizontal flux calculation
!  This code is EXACTLY the same as the 6th order code
!  EXCEPT the 5th order and 3rd operators are used in
!  place of the 6th and 4th order operators
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 3) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 3) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 3) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 3) degrade_ye = .false.
!--------------- y - advection first
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      IF (jts .LT. jds + 1) THEN
        j_start = jds + 1
      ELSE
        j_start = jts
      END IF
      j_start_f = jds + 3
    END IF
    IF (degrade_ye) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
      j_end_f = jde - 2
    END IF
!  compute fluxes, 5th or 6th order
    jp1 = 2
    jp0 = 1
    ad_from7 = j_start
j_loop_y_flux_5:DO j=ad_from7,j_end+1
      IF (j .GE. j_start_f .AND. j .LE. j_end_f) THEN
        DO k=kts,ktf
          ad_from = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from)
        END DO
        CALL PUSHCONTROL3B(0)
      ELSE IF (j .EQ. jds + 1) THEN
!  we must be close to some boundary where we need to reduce the order of the stencil
!  specified uses upstream normal wind at boundaries
! 2nd order flux next to south boundary
        DO k=kts,ktf
          ad_from0 = i_start
          DO i=ad_from0,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j-1)
            IF (specified .AND. v(i, k, j) .LT. 0.) THEN
              vb = v(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from0)
        END DO
        CALL PUSHCONTROL3B(1)
      ELSE IF (j .EQ. jds + 2) THEN
! third of 4th order flux 2 in from south boundary
        DO k=kts,ktf
          ad_from1 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from1)
        END DO
        CALL PUSHCONTROL3B(2)
      ELSE IF (j .EQ. jde) THEN
! 2nd order flux next to north boundary
        DO k=kts,ktf
          ad_from2 = i_start
          DO i=ad_from2,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j)
            IF (specified .AND. v(i, k, j-1) .GT. 0.) THEN
              vb = v(i, k, j-1)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from2)
        END DO
        CALL PUSHCONTROL3B(3)
      ELSE IF (j .EQ. jde - 1) THEN
! 3rd or 4th order flux 2 in from north boundary
        DO k=kts,ktf
          ad_from3 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from3)
        END DO
        CALL PUSHCONTROL3B(4)
      ELSE
        CALL PUSHCONTROL3B(5)
      END IF
!  y flux-divergence into tendency
! Comments on polar boundary conditions
! No advection over the poles means tendencies (held from jds [S. pole]
! to jde [N pole], i.e., on v grid) must be zero at poles
! [tendency(jds) and tendency(jde)=0]
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from4 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from4)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde + 1) THEN
! If j_end were set to jde in a special if statement apart from
! degrade_ye, then we would hit the next conditional.  But since
! we want the tendency to be zero anyway, not looping to jde+1
! will produce the same effect.
        DO k=kts,ktf
          ad_from5 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from5)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! Normal code
        DO k=kts,ktf
          ad_from6 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from6)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO j_loop_y_flux_5
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from7)
!  next, x - flux divergence
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
! Polar boundary conditions are like open or specified
    IF ((config_flags%open_ys .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF ((config_flags%open_ye .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
      IF (i_start + 2 .GT. ids + 3) THEN
        i_start_f = ids + 3
      ELSE
        i_start_f = i_start + 2
      END IF
    END IF
    IF (degrade_xe) THEN
      IF (ide - 2 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 2
      END IF
      i_end_f = ide - 3
    END IF
    ad_from10 = j_start
!  compute fluxes
    DO j=ad_from10,j_end
!  lower order fluxes close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        ad_from8 = i_start
        DO i=ad_from8,i_start_f-1
          IF (i .EQ. ids + 1) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ids + 2) THEN
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(ad_from8)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        DO i=i_end_f+1,i_end+1
          IF (i .EQ. ide - 1) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ide - 2) THEN
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from9 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from9)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from10)
    CALL PUSHCONTROL3B(1)
  ELSE IF (horz_order .EQ. 4) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 2) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 2) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 2) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 2) degrade_ye = .false.
    IF (kte .GT. kde - 1) THEN
      ktf = kde - 1
    ELSE
      ktf = kte
    END IF
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
!CJM May not work with tiling because defined in terms of domain dims
    IF (degrade_ys) j_start = jds + 1
    IF (degrade_ye) j_end = jde - 1
!  compute fluxes
!  specified uses upstream normal wind at boundaries
    jp0 = 1
    jp1 = 2
    ad_from17 = j_start
    DO j=ad_from17,j_end+1
      IF (j .EQ. j_start .AND. degrade_ys) THEN
        DO k=kts,ktf
          ad_from11 = i_start
          DO i=ad_from11,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j-1)
            IF (specified .AND. v(i, k, j) .LT. 0.) THEN
              vb = v(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from11)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (j .EQ. j_end + 1 .AND. degrade_ye) THEN
        DO k=kts,ktf
          ad_from12 = i_start
          DO i=ad_from12,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j)
            IF (specified .AND. v(i, k, j-1) .GT. 0.) THEN
              vb = v(i, k, j-1)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from12)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE
        DO k=kts,ktf
          ad_from13 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from13)
        END DO
        CALL PUSHCONTROL2B(2)
      END IF
! Comments on polar boundary conditions
! No advection over the poles means tendencies (held from jds [S. pole]
! to jde [N pole], i.e., on v grid) must be zero at poles
! [tendency(jds) and tendency(jde)=0]
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from14 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from14)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde + 1) THEN
! If j_end were set to jde in a special if statement apart from
! degrade_ye, then we would hit the next conditional.  But since
! we want the tendency to be zero anyway, not looping to jde+1
! will produce the same effect.
        DO k=kts,ktf
          ad_from15 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from15)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! Normal code
        DO k=kts,ktf
          ad_from16 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from16)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from17)
!  next, x - flux divergence
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
! Polar boundary conditions are like open or specified
    IF ((config_flags%open_ys .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF ((config_flags%open_ye .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      i_start = ids + 1
      i_start_f = i_start + 1
    END IF
    IF (degrade_xe) THEN
      i_end = ide - 2
      i_end_f = ide - 2
    END IF
    ad_from19 = j_start
!  compute fluxes
    DO j=ad_from19,j_end
!  second order flux close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from18 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from18)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from19)
    CALL PUSHCONTROL3B(2)
  ELSE IF (horz_order .EQ. 3) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 2) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 2) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 2) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 2) degrade_ye = .false.
    IF (kte .GT. kde - 1) THEN
      ktf = kde - 1
    ELSE
      ktf = kte
    END IF
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
!CJM May not work with tiling because defined in terms of domain dims
    IF (degrade_ys) j_start = jds + 1
    IF (degrade_ye) j_end = jde - 1
!  compute fluxes
!  specified uses upstream normal wind at boundaries
    jp0 = 1
    jp1 = 2
    ad_from26 = j_start
    DO j=ad_from26,j_end+1
      IF (j .EQ. j_start .AND. degrade_ys) THEN
        DO k=kts,ktf
          ad_from20 = i_start
          DO i=ad_from20,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j-1)
            IF (specified .AND. v(i, k, j) .LT. 0.) THEN
              vb = v(i, k, j)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from20)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (j .EQ. j_end + 1 .AND. degrade_ye) THEN
        DO k=kts,ktf
          ad_from21 = i_start
          DO i=ad_from21,i_end
            CALL PUSHREAL8(vb)
            vb = v(i, k, j)
            IF (specified .AND. v(i, k, j-1) .GT. 0.) THEN
              vb = v(i, k, j-1)
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from21)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE
        DO k=kts,ktf
          ad_from22 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from22)
        END DO
        CALL PUSHCONTROL2B(2)
      END IF
! Comments on polar boundary conditions
! No advection over the poles means tendencies (held from jds [S. pole]
! to jde [N pole], i.e., on v grid) must be zero at poles
! [tendency(jds) and tendency(jde)=0]
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        DO k=kts,ktf
          ad_from23 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from23)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde + 1) THEN
! If j_end were set to jde in a special if statement apart from
! degrade_ye, then we would hit the next conditional.  But since
! we want the tendency to be zero anyway, not looping to jde+1
! will produce the same effect.
        DO k=kts,ktf
          ad_from24 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from24)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! Normal code
        DO k=kts,ktf
          ad_from25 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from25)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from26)
!  next, x - flux divergence
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
! Polar boundary conditions are like open or specified
    IF ((config_flags%open_ys .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF ((config_flags%open_ye .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      i_start = ids + 1
      i_start_f = i_start + 1
    END IF
    IF (degrade_xe) THEN
      i_end = ide - 2
      i_end_f = ide - 2
    END IF
    ad_from28 = j_start
!  compute fluxes
    DO j=ad_from28,j_end
!  second order flux close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
!  x flux-divergence into tendency
      DO k=kts,ktf
        ad_from27 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from27)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from28)
    CALL PUSHCONTROL3B(3)
  ELSE IF (horz_order .EQ. 2) THEN
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    j_end = jte
    IF (config_flags%open_ys) THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF (config_flags%open_ye) THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
    IF (specified) THEN
      IF (jds + 2 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 2
      END IF
    END IF
    IF (specified) THEN
      IF (jde - 2 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 2
      END IF
    END IF
    IF (config_flags%polar) THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF (config_flags%polar) THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
    ad_from30 = j_start
    DO j=ad_from30,j_end
      DO k=kts,ktf
        ad_from29 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from29)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from30)
! Comments on polar boundary conditions
! tendencies = 0 at poles, and polar points do not contribute at points
! next to poles
    IF (config_flags%polar) THEN
      IF (jts .EQ. jds) THEN
        DO k=kts,ktf
          ad_from31 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from31)
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (jte .EQ. jde) THEN
        DO k=kts,ktf
          ad_from32 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from32)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE
        CALL PUSHCONTROL2B(1)
      END IF
    ELSE
      CALL PUSHCONTROL2B(2)
    END IF
!  specified uses upstream normal wind at boundaries
    IF (specified .AND. jts .LE. jds + 1) THEN
      j = jds + 1
      DO k=kts,ktf
        ad_from33 = i_start
        DO i=ad_from33,i_end
          CALL PUSHREAL8(vb)
! ADT eqn 45, 2nd term on RHS
          vb = v(i, k, j-1)
          IF (v(i, k, j) .LT. 0.) THEN
            vb = v(i, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from33)
      END DO
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHCONTROL1B(1)
    END IF
    IF (specified .AND. jte .GE. jde - 1) THEN
      CALL PUSHINTEGER4(j)
      j = jde - 1
      DO k=kts,ktf
        ad_from34 = i_start
        DO i=ad_from34,i_end
          CALL PUSHREAL8(vb)
! ADT eqn 45, 2nd term on RHS
          vb = v(i, k, j+1)
          IF (v(i, k, j) .GT. 0.) THEN
            vb = v(i, k, j)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from34)
      END DO
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHCONTROL1B(1)
    END IF
    IF (.NOT.config_flags%periodic_x) THEN
      IF (config_flags%open_xs .OR. specified) THEN
        IF (ids + 1 .LT. its) THEN
          i_start = its
        ELSE
          i_start = ids + 1
        END IF
      END IF
      IF (config_flags%open_xe .OR. specified) THEN
        IF (ide - 2 .GT. ite) THEN
          i_end = ite
        ELSE
          i_end = ide - 2
        END IF
      END IF
    END IF
    IF (config_flags%polar) THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF (config_flags%polar) THEN
      IF (jde - 1 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 1
      END IF
    END IF
    ad_from36 = j_start
    CALL PUSHINTEGER4(j)
    DO j=ad_from36,j_end
      DO k=kts,ktf
        ad_from35 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from35)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from36)
    CALL PUSHCONTROL3B(4)
  ELSE
    CALL PUSHCONTROL3B(5)
  END IF
!  Comments on polar boundary condition
!  Force tendency=0 at NP and SP
!  We keep setting this everywhere, but it can't hurt...
  IF (config_flags%polar .AND. jts .EQ. jds) THEN
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%polar .AND. jte .EQ. jde) THEN
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
!  radiative lateral boundary condition in y for normal velocity (v)
  IF (config_flags%open_ys .AND. jts .EQ. jds) THEN
    CALL PUSHINTEGER4(i_start)
    i_start = its
    IF (ite .GT. ide - 1) THEN
      CALL PUSHINTEGER4(i_end)
      i_end = ide - 1
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHINTEGER4(i_end)
      i_end = ite
      CALL PUSHCONTROL1B(1)
    END IF
    ad_from49 = i_start
    DO i=ad_from49,i_end
      DO k=kts,ktf
        IF (rv(i, k, jts) - cb*mut(i, jts) .GT. 0.) THEN
          CALL PUSHREAL8(vb)
          vb = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(vb)
          vb = rv(i, k, jts) - cb*mut(i, jts)
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from49)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_ye .AND. jte .EQ. jde) THEN
    CALL PUSHINTEGER4(i_start)
    i_start = its
    IF (ite .GT. ide - 1) THEN
      CALL PUSHINTEGER4(i_end)
      i_end = ide - 1
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHINTEGER4(i_end)
      i_end = ite
      CALL PUSHCONTROL1B(1)
    END IF
    ad_from50 = i_start
    DO i=ad_from50,i_end
      DO k=kts,ktf
        IF (rv(i, k, jte) + cb*mut(i, jte-1) .LT. 0.) THEN
          CALL PUSHREAL8(vb)
          vb = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(vb)
          vb = rv(i, k, jte) + cb*mut(i, jte-1)
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from50)
    CALL PUSHCONTROL1B(1)
  ELSE
    CALL PUSHCONTROL1B(0)
  END IF
!  pick up the rest of the horizontal radiation boundary conditions.
!  (these are the computations that don't require 'cb'.
!  first, set to index ranges
  j_start = jts
  IF (jte .GT. jde) THEN
    j_end = jde
  ELSE
    j_end = jte
  END IF
  jmin = jds
  jmax = jde - 1
  IF (config_flags%open_ys) THEN
    IF (jds + 1 .LT. jts) THEN
      j_start = jts
    ELSE
      j_start = jds + 1
    END IF
    jmin = jds
  END IF
  IF (config_flags%open_ye) THEN
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
    jmax = jde - 1
  END IF
!  compute x (u) conditions for v, w, or scalar
  IF (config_flags%open_xs .AND. its .EQ. ids) THEN
    ad_from51 = j_start
    DO j=ad_from51,j_end
      CALL PUSHREAL8(mrdx)
! ADT eqn 45, 1st term on RHS
      mrdx = msfvy(its, j)*rdx
      IF (jmax .GT. j) THEN
        CALL PUSHINTEGER4(jp)
        jp = j
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(jp)
        jp = jmax
        CALL PUSHCONTROL1B(1)
      END IF
      IF (jmin .LT. j - 1) THEN
        CALL PUSHINTEGER4(jm)
        jm = j - 1
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(jm)
        jm = jmin
        CALL PUSHCONTROL1B(1)
      END IF
      DO k=kts,ktf
        uw = 0.5*(ru(its, k, jp)+ru(its, k, jm))
        IF (uw .GT. 0.) THEN
          CALL PUSHREAL8(ub)
          ub = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(ub)
          ub = uw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from51)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_xe .AND. ite .EQ. ide) THEN
    ad_from52 = j_start
    DO j=ad_from52,j_end
      CALL PUSHREAL8(mrdx)
! ADT eqn 45, 1st term on RHS
      mrdx = msfvy(ite-1, j)*rdx
      IF (jmax .GT. j) THEN
        CALL PUSHINTEGER4(jp)
        jp = j
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(jp)
        jp = jmax
        CALL PUSHCONTROL1B(1)
      END IF
      IF (jmin .LT. j - 1) THEN
        CALL PUSHINTEGER4(jm)
        jm = j - 1
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHINTEGER4(jm)
        jm = jmin
        CALL PUSHCONTROL1B(1)
      END IF
      DO k=kts,ktf
        uw = 0.5*(ru(ite, k, jp)+ru(ite, k, jm))
        IF (uw .LT. 0.) THEN
          CALL PUSHREAL8(ub)
          ub = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(ub)
          ub = uw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from52)
    CALL PUSHCONTROL1B(1)
  ELSE
    CALL PUSHCONTROL1B(0)
  END IF
  CALL PUSHINTEGER4(i_start)
!-------------------- vertical advection
!     ADT eqn 45 has 3rd term on RHS = -(1/mx) partial d/dz (rho v w)
!     Here we have: - partial d/dz (v*rom) = - partial d/dz (v rho w / my)
!     We therefore need to make a correction for advect_v
!     since 'my' (map scale factor in y direction) isn't a function of z,
!     we can do this using *(my/mx) (see eqn. 45 for example)
  i_start = its
  IF (ite .GT. ide - 1) THEN
    CALL PUSHINTEGER4(i_end)
    i_end = ide - 1
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHINTEGER4(i_end)
    i_end = ite
    CALL PUSHCONTROL1B(1)
  END IF
  j_start = jts
  j_end = jte
! Polar boundary conditions are like open or specified
! We don't want to calculate vertical v tendencies at the N or S pole
  IF ((config_flags%open_ys .OR. specified) .OR. config_flags%polar) &
&  THEN
    IF (jds + 1 .LT. jts) THEN
      j_start = jts
    ELSE
      j_start = jds + 1
    END IF
  END IF
  IF ((config_flags%open_ye .OR. specified) .OR. config_flags%polar) &
&  THEN
    IF (jde - 1 .GT. jte) THEN
      j_end = jte
    ELSE
      j_end = jde - 1
    END IF
  END IF
  IF (vert_order .EQ. 6) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          temp31b50 = -(msfvy(i, j)*rdzw(k)*tendencyb(i, k, j)/msfvx(i, &
&            j))
          vfluxb(i, k+1) = vfluxb(i, k+1) + temp31b50
          vfluxb(i, k) = vfluxb(i, k) - temp31b50
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp31b44 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i&
&          , k)
        temp31b45 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp31b44
        romb(i, k, j-1) = romb(i, k, j-1) + temp31b44
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp31b45
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp31b45
        vfluxb(i, k) = 0.0
        k = ktf - 1
        vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
        temp31b46 = vel*vfluxb(i, k)/12.0
        velb = (7.*(v(i, k, j)+v(i, k-1, j))-v(i, k+1, j)-v(i, k-2, j))*&
&          vfluxb(i, k)/12.0
        vb0(i, k, j) = vb0(i, k, j) + 7.*temp31b46
        vb0(i, k-1, j) = vb0(i, k-1, j) + 7.*temp31b46
        vb0(i, k+1, j) = vb0(i, k+1, j) - temp31b46
        vb0(i, k-2, j) = vb0(i, k-2, j) - temp31b46
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        k = kts + 2
        vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
        temp31b47 = vel*vfluxb(i, k)/12.0
        velb = (7.*(v(i, k, j)+v(i, k-1, j))-v(i, k+1, j)-v(i, k-2, j))*&
&          vfluxb(i, k)/12.0
        vb0(i, k, j) = vb0(i, k, j) + 7.*temp31b47
        vb0(i, k-1, j) = vb0(i, k-1, j) + 7.*temp31b47
        vb0(i, k+1, j) = vb0(i, k+1, j) - temp31b47
        vb0(i, k-2, j) = vb0(i, k-2, j) - temp31b47
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        k = kts + 1
        temp31b48 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i&
&          , k)
        temp31b49 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp31b48
        romb(i, k, j-1) = romb(i, k, j-1) + temp31b48
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp31b49
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp31b49
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf-2,kts+3,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
          temp31b43 = vel*vfluxb(i, k)/60.0
          velb = (37.*(v(i, k, j)+v(i, k-1, j))-8.*(v(i, k+1, j)+v(i, k-&
&            2, j))+v(i, k+2, j)+v(i, k-3, j))*vfluxb(i, k)/60.0
          vb0(i, k, j) = vb0(i, k, j) + 37.*temp31b43
          vb0(i, k-1, j) = vb0(i, k-1, j) + 37.*temp31b43
          vb0(i, k+1, j) = vb0(i, k+1, j) - 8.*temp31b43
          vb0(i, k-2, j) = vb0(i, k-2, j) - 8.*temp31b43
          vb0(i, k+2, j) = vb0(i, k+2, j) + temp31b43
          vb0(i, k-3, j) = vb0(i, k-3, j) + temp31b43
          vfluxb(i, k) = 0.0
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        END DO
      END DO
    END DO
  ELSE IF (vert_order .EQ. 5) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          temp43b1 = -(msfvy(i, j)*rdzw(k)*tendencyb(i, k, j)/msfvx(i, j&
&            ))
          vfluxb(i, k+1) = vfluxb(i, k+1) + temp43b1
          vfluxb(i, k) = vfluxb(i, k) - temp43b1
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp43b = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i, &
&          k)
        temp43b0 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp43b
        romb(i, k, j-1) = romb(i, k, j-1) + temp43b
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp43b0
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp43b0
        vfluxb(i, k) = 0.0
        k = ktf - 1
        vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
        temp39 = v(i, k+1, j) - v(i, k-2, j) - 3.*(v(i, k, j)-v(i, k-1, &
&          j))
        temp42 = SIGN(1., -vel)
        temp41 = temp42/12.0
        temp40 = SIGN(1, time_step)
        temp39b = vel*vfluxb(i, k)
        temp39b0 = temp39b/12.0
        temp39b1 = temp40*temp41*temp39b
        velb = ((7.*(v(i, k, j)+v(i, k-1, j))-v(i, k+1, j)-v(i, k-2, j))&
&          /12.0+temp40*(temp41*temp39))*vfluxb(i, k)
        vb0(i, k, j) = vb0(i, k, j) + 7.*temp39b0 - 3.*temp39b1
        vb0(i, k-1, j) = vb0(i, k-1, j) + 3.*temp39b1 + 7.*temp39b0
        vb0(i, k+1, j) = vb0(i, k+1, j) + temp39b1 - temp39b0
        vb0(i, k-2, j) = vb0(i, k-2, j) - temp39b1 - temp39b0
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        k = kts + 2
        vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
        temp35 = v(i, k+1, j) - v(i, k-2, j) - 3.*(v(i, k, j)-v(i, k-1, &
&          j))
        temp38 = SIGN(1., -vel)
        temp37 = temp38/12.0
        temp36 = SIGN(1, time_step)
        temp35b = vel*vfluxb(i, k)
        temp35b0 = temp35b/12.0
        temp35b1 = temp36*temp37*temp35b
        velb = ((7.*(v(i, k, j)+v(i, k-1, j))-v(i, k+1, j)-v(i, k-2, j))&
&          /12.0+temp36*(temp37*temp35))*vfluxb(i, k)
        vb0(i, k, j) = vb0(i, k, j) + 7.*temp35b0 - 3.*temp35b1
        vb0(i, k-1, j) = vb0(i, k-1, j) + 3.*temp35b1 + 7.*temp35b0
        vb0(i, k+1, j) = vb0(i, k+1, j) + temp35b1 - temp35b0
        vb0(i, k-2, j) = vb0(i, k-2, j) - temp35b1 - temp35b0
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        k = kts + 1
        temp35b2 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i&
&          , k)
        temp35b3 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp35b2
        romb(i, k, j-1) = romb(i, k, j-1) + temp35b2
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp35b3
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp35b3
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf-2,kts+3,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
          temp31 = v(i, k+2, j) - v(i, k-3, j) + 10.*(v(i, k, j)-v(i, k-&
&            1, j)) - 5.*(v(i, k+1, j)-v(i, k-2, j))
          temp34 = SIGN(1., -vel)
          temp33 = temp34/60.0
          temp32 = SIGN(1, time_step)
          temp31b51 = vel*vfluxb(i, k)
          temp31b52 = temp31b51/60.0
          temp31b53 = -(temp32*temp33*temp31b51)
          velb = ((37.*(v(i, k, j)+v(i, k-1, j))-8.*(v(i, k+1, j)+v(i, k&
&            -2, j))+v(i, k+2, j)+v(i, k-3, j))/60.0-temp32*(temp33*&
&            temp31))*vfluxb(i, k)
          vb0(i, k, j) = vb0(i, k, j) + 10.*temp31b53 + 37.*temp31b52
          vb0(i, k-1, j) = vb0(i, k-1, j) + 37.*temp31b52 - 10.*&
&            temp31b53
          vb0(i, k+1, j) = vb0(i, k+1, j) - 5.*temp31b53 - 8.*temp31b52
          vb0(i, k-2, j) = vb0(i, k-2, j) + 5.*temp31b53 - 8.*temp31b52
          vb0(i, k+2, j) = vb0(i, k+2, j) + temp31b53 + temp31b52
          vb0(i, k-3, j) = vb0(i, k-3, j) + temp31b52 - temp31b53
          vfluxb(i, k) = 0.0
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        END DO
      END DO
    END DO
  ELSE IF (vert_order .EQ. 4) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          temp43b7 = -(msfvy(i, j)*rdzw(k)*tendencyb(i, k, j)/msfvx(i, j&
&            ))
          vfluxb(i, k+1) = vfluxb(i, k+1) + temp43b7
          vfluxb(i, k) = vfluxb(i, k) - temp43b7
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp43b3 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i&
&          , k)
        temp43b4 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp43b3
        romb(i, k, j-1) = romb(i, k, j-1) + temp43b3
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp43b4
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp43b4
        vfluxb(i, k) = 0.0
        k = kts + 1
        temp43b5 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i&
&          , k)
        temp43b6 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp43b5
        romb(i, k, j-1) = romb(i, k, j-1) + temp43b5
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp43b6
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp43b6
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf-1,kts+2,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
          temp43b2 = vel*vfluxb(i, k)/12.0
          velb = (7.*(v(i, k, j)+v(i, k-1, j))-v(i, k+1, j)-v(i, k-2, j)&
&            )*vfluxb(i, k)/12.0
          vb0(i, k, j) = vb0(i, k, j) + 7.*temp43b2
          vb0(i, k-1, j) = vb0(i, k-1, j) + 7.*temp43b2
          vb0(i, k+1, j) = vb0(i, k+1, j) - temp43b2
          vb0(i, k-2, j) = vb0(i, k-2, j) - temp43b2
          vfluxb(i, k) = 0.0
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        END DO
      END DO
    END DO
  ELSE IF (vert_order .EQ. 3) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          temp47b3 = -(msfvy(i, j)*rdzw(k)*tendencyb(i, k, j)/msfvx(i, j&
&            ))
          vfluxb(i, k+1) = vfluxb(i, k+1) + temp47b3
          vfluxb(i, k) = vfluxb(i, k) - temp47b3
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf
        temp47b = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i, &
&          k)
        temp47b0 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp47b
        romb(i, k, j-1) = romb(i, k, j-1) + temp47b
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp47b0
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp47b0
        vfluxb(i, k) = 0.0
        k = kts + 1
        temp47b1 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(i&
&          , k)
        temp47b2 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp47b1
        romb(i, k, j-1) = romb(i, k, j-1) + temp47b1
        vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp47b2
        vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp47b2
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf-1,kts+2,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k, j-1))
          temp43 = v(i, k+1, j) - v(i, k-2, j) - 3.*(v(i, k, j)-v(i, k-1&
&            , j))
          temp46 = SIGN(1., -vel)
          temp45 = temp46/12.0
          temp44 = SIGN(1, time_step)
          temp43b8 = vel*vfluxb(i, k)
          temp43b9 = temp43b8/12.0
          temp43b10 = temp44*temp45*temp43b8
          velb = ((7.*(v(i, k, j)+v(i, k-1, j))-v(i, k+1, j)-v(i, k-2, j&
&            ))/12.0+temp44*(temp45*temp43))*vfluxb(i, k)
          vb0(i, k, j) = vb0(i, k, j) + 7.*temp43b9 - 3.*temp43b10
          vb0(i, k-1, j) = vb0(i, k-1, j) + 3.*temp43b10 + 7.*temp43b9
          vb0(i, k+1, j) = vb0(i, k+1, j) + temp43b10 - temp43b9
          vb0(i, k-2, j) = vb0(i, k-2, j) - temp43b10 - temp43b9
          vfluxb(i, k) = 0.0
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k, j-1) = romb(i, k, j-1) + 0.5*velb
        END DO
      END DO
    END DO
  ELSE IF (vert_order .EQ. 2) THEN
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO k=ktf,kts,-1
        DO i=i_end,i_start,-1
          temp47b6 = -(msfvy(i, j)*rdzw(k)*tendencyb(i, k, j)/msfvx(i, j&
&            ))
          vfluxb(i, k+1) = vfluxb(i, k+1) + temp47b6
          vfluxb(i, k) = vfluxb(i, k) - temp47b6
        END DO
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          temp47b4 = 0.5*(fzm(k)*v(i, k, j)+fzp(k)*v(i, k-1, j))*vfluxb(&
&            i, k)
          temp47b5 = 0.5*(rom(i, k, j)+rom(i, k, j-1))*vfluxb(i, k)
          romb(i, k, j) = romb(i, k, j) + temp47b4
          romb(i, k, j-1) = romb(i, k, j-1) + temp47b4
          vb0(i, k, j) = vb0(i, k, j) + fzm(k)*temp47b5
          vb0(i, k-1, j) = vb0(i, k-1, j) + fzp(k)*temp47b5
          vfluxb(i, k) = 0.0
        END DO
      END DO
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(i_end)
  ELSE
    CALL POPINTEGER4(i_end)
  END IF
  CALL POPINTEGER4(i_start)
  CALL POPCONTROL1B(branch)
  IF (branch .NE. 0) THEN
    CALL POPINTEGER4(ad_from52)
    CALL POPINTEGER4(ad_to52)
    DO j=ad_to52,ad_from52,-1
      DO k=ktf,kts,-1
        dum = ru(ite, k, jm) - ru(ite-1, k, jm)
        dup = ru(ite, k, jp) - ru(ite-1, k, jp)
        temp31b41 = -(mrdx*tendencyb(ite-1, k, j))
        temp31b42 = 0.5*v(ite-1, k, j)*temp31b41
        ubb = (v_old(ite-1, k, j)-v_old(ite-2, k, j))*temp31b41
        v_oldb(ite-1, k, j) = v_oldb(ite-1, k, j) + ub*temp31b41
        v_oldb(ite-2, k, j) = v_oldb(ite-2, k, j) - ub*temp31b41
        vb0(ite-1, k, j) = vb0(ite-1, k, j) + 0.5*(dup+dum)*temp31b41
        dupb = temp31b42
        dumb = temp31b42
        rub(ite, k, jm) = rub(ite, k, jm) + dumb
        rub(ite-1, k, jm) = rub(ite-1, k, jm) - dumb
        rub(ite, k, jp) = rub(ite, k, jp) + dupb
        rub(ite-1, k, jp) = rub(ite-1, k, jp) - dupb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(ub)
          uwb = 0.0
        ELSE
          CALL POPREAL8(ub)
          uwb = ubb
        END IF
        rub(ite, k, jp) = rub(ite, k, jp) + 0.5*uwb
        rub(ite, k, jm) = rub(ite, k, jm) + 0.5*uwb
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(jm)
      ELSE
        CALL POPINTEGER4(jm)
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(jp)
      ELSE
        CALL POPINTEGER4(jp)
      END IF
      CALL POPREAL8(mrdx)
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from51)
    CALL POPINTEGER4(ad_to51)
    DO j=ad_to51,ad_from51,-1
      DO k=ktf,kts,-1
        dum = ru(its+1, k, jm) - ru(its, k, jm)
        dup = ru(its+1, k, jp) - ru(its, k, jp)
        temp31b39 = -(mrdx*tendencyb(its, k, j))
        temp31b40 = 0.5*v(its, k, j)*temp31b39
        ubb = (v_old(its+1, k, j)-v_old(its, k, j))*temp31b39
        v_oldb(its+1, k, j) = v_oldb(its+1, k, j) + ub*temp31b39
        v_oldb(its, k, j) = v_oldb(its, k, j) - ub*temp31b39
        vb0(its, k, j) = vb0(its, k, j) + 0.5*(dup+dum)*temp31b39
        dupb = temp31b40
        dumb = temp31b40
        rub(its+1, k, jm) = rub(its+1, k, jm) + dumb
        rub(its, k, jm) = rub(its, k, jm) - dumb
        rub(its+1, k, jp) = rub(its+1, k, jp) + dupb
        rub(its, k, jp) = rub(its, k, jp) - dupb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(ub)
          uwb = 0.0
        ELSE
          CALL POPREAL8(ub)
          uwb = ubb
        END IF
        rub(its, k, jp) = rub(its, k, jp) + 0.5*uwb
        rub(its, k, jm) = rub(its, k, jm) + 0.5*uwb
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(jm)
      ELSE
        CALL POPINTEGER4(jm)
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(jp)
      ELSE
        CALL POPINTEGER4(jp)
      END IF
      CALL POPREAL8(mrdx)
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .NE. 0) THEN
    CALL POPINTEGER4(ad_from50)
    CALL POPINTEGER4(ad_to50)
    DO i=ad_to50,ad_from50,-1
      DO k=ktf,kts,-1
        temp31b38 = -(rdy*tendencyb(i, k, jte))
        vbb = (v_old(i, k, jte)-v_old(i, k, jte-1))*temp31b38
        v_oldb(i, k, jte) = v_oldb(i, k, jte) + vb*temp31b38
        v_oldb(i, k, jte-1) = v_oldb(i, k, jte-1) - vb*temp31b38
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(vb)
        ELSE
          CALL POPREAL8(vb)
          rvb(i, k, jte) = rvb(i, k, jte) + vbb
          mutb(i, jte-1) = mutb(i, jte-1) + cb*vbb
        END IF
      END DO
    END DO
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      CALL POPINTEGER4(i_end)
    ELSE
      CALL POPINTEGER4(i_end)
    END IF
    CALL POPINTEGER4(i_start)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from49)
    CALL POPINTEGER4(ad_to49)
    DO i=ad_to49,ad_from49,-1
      DO k=ktf,kts,-1
        temp31b37 = -(rdy*tendencyb(i, k, jts))
        vbb = (v_old(i, k, jts+1)-v_old(i, k, jts))*temp31b37
        v_oldb(i, k, jts+1) = v_oldb(i, k, jts+1) + vb*temp31b37
        v_oldb(i, k, jts) = v_oldb(i, k, jts) - vb*temp31b37
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(vb)
        ELSE
          CALL POPREAL8(vb)
          rvb(i, k, jts) = rvb(i, k, jts) + vbb
          mutb(i, jts) = mutb(i, jts) - cb*vbb
        END IF
      END DO
    END DO
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      CALL POPINTEGER4(i_end)
    ELSE
      CALL POPINTEGER4(i_end)
    END IF
    CALL POPINTEGER4(i_start)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    DO i=ite,its,-1
      DO k=ktf,kts,-1
        tendencyb(i, k, jte) = 0.0
      END DO
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    DO i=ite,its,-1
      DO k=ktf,kts,-1
        tendencyb(i, k, jts) = 0.0
      END DO
    END DO
  END IF
  CALL POPCONTROL3B(branch)
  IF (branch .LT. 3) THEN
    IF (branch .EQ. 0) THEN
      fqxb = 0.0
      CALL POPINTEGER4(ad_from48)
      CALL POPINTEGER4(ad_to48)
      DO j=ad_to48,ad_from48,-1
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from47)
          CALL POPINTEGER4(ad_to47)
          DO i=ad_to47,ad_from47,-1
            mrdx = msfvy(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
        END DO
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          CALL POPINTEGER4(ad_to46)
          DO i=ad_to46,i_end_f+1,-1
            CALL POPCONTROL1B(branch)
            IF (branch .NE. 0) THEN
              DO k=ktf,kts,-1
                vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
                temp31b36 = vel*fqxb(i, k)/12.0
                velb = (7.*(v(i, k, j)+v(i-1, k, j))-v(i+1, k, j)-v(i-2&
&                  , k, j))*fqxb(i, k)/12.0
                vb0(i, k, j) = vb0(i, k, j) + 7.*temp31b36
                vb0(i-1, k, j) = vb0(i-1, k, j) + 7.*temp31b36
                vb0(i+1, k, j) = vb0(i+1, k, j) - temp31b36
                vb0(i-2, k, j) = vb0(i-2, k, j) - temp31b36
                fqxb(i, k) = 0.0
                rub(i, k, j) = rub(i, k, j) + 0.5*velb
                rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
              END DO
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              DO k=ktf,kts,-1
                temp31b34 = 0.25*(v(i_end+1, k, j)+v(i_end, k, j))*fqxb(&
&                  i, k)
                temp31b35 = 0.25*(ru(i_end+1, k, j)+ru(i_end+1, k, j-1))&
&                  *fqxb(i, k)
                rub(i_end+1, k, j) = rub(i_end+1, k, j) + temp31b34
                rub(i_end+1, k, j-1) = rub(i_end+1, k, j-1) + temp31b34
                vb0(i_end+1, k, j) = vb0(i_end+1, k, j) + temp31b35
                vb0(i_end, k, j) = vb0(i_end, k, j) + temp31b35
                fqxb(i, k) = 0.0
              END DO
            END IF
          END DO
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPINTEGER4(ad_from46)
          DO i=i_start_f-1,ad_from46,-1
            CALL POPCONTROL1B(branch)
            IF (branch .NE. 0) THEN
              DO k=ktf,kts,-1
                vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
                temp31b33 = vel*fqxb(i, k)/12.0
                velb = (7.*(v(i, k, j)+v(i-1, k, j))-v(i+1, k, j)-v(i-2&
&                  , k, j))*fqxb(i, k)/12.0
                vb0(i, k, j) = vb0(i, k, j) + 7.*temp31b33
                vb0(i-1, k, j) = vb0(i-1, k, j) + 7.*temp31b33
                vb0(i+1, k, j) = vb0(i+1, k, j) - temp31b33
                vb0(i-2, k, j) = vb0(i-2, k, j) - temp31b33
                fqxb(i, k) = 0.0
                rub(i, k, j) = rub(i, k, j) + 0.5*velb
                rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
              END DO
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              DO k=ktf,kts,-1
                temp31b31 = 0.25*(v(i, k, j)+v(i-1, k, j))*fqxb(i, k)
                temp31b32 = 0.25*(ru(i, k, j)+ru(i, k, j-1))*fqxb(i, k)
                rub(i, k, j) = rub(i, k, j) + temp31b31
                rub(i, k, j-1) = rub(i, k, j-1) + temp31b31
                vb0(i, k, j) = vb0(i, k, j) + temp31b32
                vb0(i-1, k, j) = vb0(i-1, k, j) + temp31b32
                fqxb(i, k) = 0.0
              END DO
            END IF
          END DO
        END IF
        DO k=ktf,kts,-1
          DO i=i_end_f,i_start_f,-1
            vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
            temp31b30 = vel*fqxb(i, k)/60.0
            velb = (37.*(v(i, k, j)+v(i-1, k, j))-8.*(v(i+1, k, j)+v(i-2&
&              , k, j))+v(i+2, k, j)+v(i-3, k, j))*fqxb(i, k)/60.0
            vb0(i, k, j) = vb0(i, k, j) + 37.*temp31b30
            vb0(i-1, k, j) = vb0(i-1, k, j) + 37.*temp31b30
            vb0(i+1, k, j) = vb0(i+1, k, j) - 8.*temp31b30
            vb0(i-2, k, j) = vb0(i-2, k, j) - 8.*temp31b30
            vb0(i+2, k, j) = vb0(i+2, k, j) + temp31b30
            vb0(i-3, k, j) = vb0(i-3, k, j) + temp31b30
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
          END DO
        END DO
      END DO
      fqyb = 0.0
      CALL POPINTEGER4(ad_from45)
      CALL POPINTEGER4(ad_to45)
      DO j=ad_to45,ad_from45,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from42)
              CALL POPINTEGER4(ad_to42)
              DO i=ad_to42,ad_from42,-1
                tendencyb(i, k, j-1) = 0.0
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from43)
              CALL POPINTEGER4(ad_to43)
              DO i=ad_to43,ad_from43,-1
                tendencyb(i, k, j-1) = 0.0
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from44)
            CALL POPINTEGER4(ad_to44)
            DO i=ad_to44,ad_from44,-1
              mrdy = msfvy(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
        END IF
        CALL POPCONTROL3B(branch)
        IF (branch .LT. 3) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from37)
              CALL POPINTEGER4(ad_to37)
              DO i=ad_to37,ad_from37,-1
                vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
                temp31b23 = vel*fqyb(i, k, jp1)/60.0
                velb = (37.*(v(i, k, j)+v(i, k, j-1))-8.*(v(i, k, j+1)+v&
&                  (i, k, j-2))+v(i, k, j+2)+v(i, k, j-3))*fqyb(i, k, jp1&
&                  )/60.0
                vb0(i, k, j) = vb0(i, k, j) + 37.*temp31b23
                vb0(i, k, j-1) = vb0(i, k, j-1) + 37.*temp31b23
                vb0(i, k, j+1) = vb0(i, k, j+1) - 8.*temp31b23
                vb0(i, k, j-2) = vb0(i, k, j-2) - 8.*temp31b23
                vb0(i, k, j+2) = vb0(i, k, j+2) + temp31b23
                vb0(i, k, j-3) = vb0(i, k, j-3) + temp31b23
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
              END DO
            END DO
          ELSE IF (branch .EQ. 1) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from38)
              CALL POPINTEGER4(ad_to38)
              DO i=ad_to38,ad_from38,-1
                temp31b24 = 0.25*(v(i, k, j)+vb)*fqyb(i, k, jp1)
                temp31b25 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, &
&                  jp1)
                rvb(i, k, j) = rvb(i, k, j) + temp31b24
                rvb(i, k, j-1) = rvb(i, k, j-1) + temp31b24
                vb0(i, k, j) = vb0(i, k, j) + temp31b25
                vbb = temp31b25
                fqyb(i, k, jp1) = 0.0
                CALL POPCONTROL1B(branch)
                IF (branch .EQ. 0) THEN
                  vb0(i, k, j) = vb0(i, k, j) + vbb
                  vbb = 0.0
                END IF
                CALL POPREAL8(vb)
                vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from39)
              CALL POPINTEGER4(ad_to39)
              DO i=ad_to39,ad_from39,-1
                vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
                temp31b26 = vel*fqyb(i, k, jp1)/12.0
                velb = (7.*(v(i, k, j)+v(i, k, j-1))-v(i, k, j+1)-v(i, k&
&                  , j-2))*fqyb(i, k, jp1)/12.0
                vb0(i, k, j) = vb0(i, k, j) + 7.*temp31b26
                vb0(i, k, j-1) = vb0(i, k, j-1) + 7.*temp31b26
                vb0(i, k, j+1) = vb0(i, k, j+1) - temp31b26
                vb0(i, k, j-2) = vb0(i, k, j-2) - temp31b26
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 3) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from40)
            CALL POPINTEGER4(ad_to40)
            DO i=ad_to40,ad_from40,-1
              temp31b27 = 0.25*(vb+v(i, k, j-1))*fqyb(i, k, jp1)
              temp31b28 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, &
&                jp1)
              rvb(i, k, j) = rvb(i, k, j) + temp31b27
              rvb(i, k, j-1) = rvb(i, k, j-1) + temp31b27
              vbb = temp31b28
              vb0(i, k, j-1) = vb0(i, k, j-1) + temp31b28
              fqyb(i, k, jp1) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
                vbb = 0.0
              END IF
              CALL POPREAL8(vb)
              vb0(i, k, j) = vb0(i, k, j) + vbb
            END DO
          END DO
        ELSE IF (branch .EQ. 4) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from41)
            CALL POPINTEGER4(ad_to41)
            DO i=ad_to41,ad_from41,-1
              vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
              temp31b29 = vel*fqyb(i, k, jp1)/12.0
              velb = (7.*(v(i, k, j)+v(i, k, j-1))-v(i, k, j+1)-v(i, k, &
&                j-2))*fqyb(i, k, jp1)/12.0
              vb0(i, k, j) = vb0(i, k, j) + 7.*temp31b29
              vb0(i, k, j-1) = vb0(i, k, j-1) + 7.*temp31b29
              vb0(i, k, j+1) = vb0(i, k, j+1) - temp31b29
              vb0(i, k, j-2) = vb0(i, k, j-2) - temp31b29
              fqyb(i, k, jp1) = 0.0
              rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
              rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
            END DO
          END DO
        END IF
      END DO
    ELSE IF (branch .EQ. 1) THEN
      fqxb = 0.0
      CALL POPINTEGER4(ad_from10)
      CALL POPINTEGER4(ad_to10)
      DO j=ad_to10,ad_from10,-1
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from9)
          CALL POPINTEGER4(ad_to9)
          DO i=ad_to9,ad_from9,-1
            mrdx = msfvy(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
        END DO
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          CALL POPINTEGER4(ad_to8)
          DO i=ad_to8,i_end_f+1,-1
            CALL POPCONTROL1B(branch)
            IF (branch .NE. 0) THEN
              DO k=ktf,kts,-1
                vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
                temp19 = v(i+1, k, j) - v(i-2, k, j) - 3.*(v(i, k, j)-v(&
&                  i-1, k, j))
                temp22 = SIGN(1., vel)
                temp21 = temp22/12.0
                temp20 = SIGN(1, time_step)
                temp19b1 = vel*fqxb(i, k)
                temp19b2 = temp19b1/12.0
                temp19b3 = temp20*temp21*temp19b1
                velb = ((7.*(v(i, k, j)+v(i-1, k, j))-v(i+1, k, j)-v(i-2&
&                  , k, j))/12.0+temp20*(temp21*temp19))*fqxb(i, k)
                vb0(i, k, j) = vb0(i, k, j) + 7.*temp19b2 - 3.*temp19b3
                vb0(i-1, k, j) = vb0(i-1, k, j) + 3.*temp19b3 + 7.*&
&                  temp19b2
                vb0(i+1, k, j) = vb0(i+1, k, j) + temp19b3 - temp19b2
                vb0(i-2, k, j) = vb0(i-2, k, j) - temp19b3 - temp19b2
                fqxb(i, k) = 0.0
                rub(i, k, j) = rub(i, k, j) + 0.5*velb
                rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
              END DO
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              DO k=ktf,kts,-1
                temp19b = 0.25*(v(i_end+1, k, j)+v(i_end, k, j))*fqxb(i&
&                  , k)
                temp19b0 = 0.25*(ru(i_end+1, k, j)+ru(i_end+1, k, j-1))*&
&                  fqxb(i, k)
                rub(i_end+1, k, j) = rub(i_end+1, k, j) + temp19b
                rub(i_end+1, k, j-1) = rub(i_end+1, k, j-1) + temp19b
                vb0(i_end+1, k, j) = vb0(i_end+1, k, j) + temp19b0
                vb0(i_end, k, j) = vb0(i_end, k, j) + temp19b0
                fqxb(i, k) = 0.0
              END DO
            END IF
          END DO
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPINTEGER4(ad_from8)
          DO i=i_start_f-1,ad_from8,-1
            CALL POPCONTROL1B(branch)
            IF (branch .NE. 0) THEN
              DO k=ktf,kts,-1
                vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
                temp15 = v(i+1, k, j) - v(i-2, k, j) - 3.*(v(i, k, j)-v(&
&                  i-1, k, j))
                temp18 = SIGN(1., vel)
                temp17 = temp18/12.0
                temp16 = SIGN(1, time_step)
                temp15b1 = vel*fqxb(i, k)
                temp15b2 = temp15b1/12.0
                temp15b3 = temp16*temp17*temp15b1
                velb = ((7.*(v(i, k, j)+v(i-1, k, j))-v(i+1, k, j)-v(i-2&
&                  , k, j))/12.0+temp16*(temp17*temp15))*fqxb(i, k)
                vb0(i, k, j) = vb0(i, k, j) + 7.*temp15b2 - 3.*temp15b3
                vb0(i-1, k, j) = vb0(i-1, k, j) + 3.*temp15b3 + 7.*&
&                  temp15b2
                vb0(i+1, k, j) = vb0(i+1, k, j) + temp15b3 - temp15b2
                vb0(i-2, k, j) = vb0(i-2, k, j) - temp15b3 - temp15b2
                fqxb(i, k) = 0.0
                rub(i, k, j) = rub(i, k, j) + 0.5*velb
                rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
              END DO
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              DO k=ktf,kts,-1
                temp15b = 0.25*(v(i, k, j)+v(i-1, k, j))*fqxb(i, k)
                temp15b0 = 0.25*(ru(i, k, j)+ru(i, k, j-1))*fqxb(i, k)
                rub(i, k, j) = rub(i, k, j) + temp15b
                rub(i, k, j-1) = rub(i, k, j-1) + temp15b
                vb0(i, k, j) = vb0(i, k, j) + temp15b0
                vb0(i-1, k, j) = vb0(i-1, k, j) + temp15b0
                fqxb(i, k) = 0.0
              END DO
            END IF
          END DO
        END IF
        DO k=ktf,kts,-1
          DO i=i_end_f,i_start_f,-1
            vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
            temp11 = v(i+2, k, j) - v(i-3, k, j) + 10.*(v(i, k, j)-v(i-1&
&              , k, j)) - 5.*(v(i+1, k, j)-v(i-2, k, j))
            temp14 = SIGN(1., vel)
            temp13 = temp14/60.0
            temp12 = SIGN(1, time_step)
            temp11b = vel*fqxb(i, k)
            temp11b0 = temp11b/60.0
            temp11b1 = -(temp12*temp13*temp11b)
            velb = ((37.*(v(i, k, j)+v(i-1, k, j))-8.*(v(i+1, k, j)+v(i-&
&              2, k, j))+v(i+2, k, j)+v(i-3, k, j))/60.0-temp12*(temp13*&
&              temp11))*fqxb(i, k)
            vb0(i, k, j) = vb0(i, k, j) + 10.*temp11b1 + 37.*temp11b0
            vb0(i-1, k, j) = vb0(i-1, k, j) + 37.*temp11b0 - 10.*&
&              temp11b1
            vb0(i+1, k, j) = vb0(i+1, k, j) - 5.*temp11b1 - 8.*temp11b0
            vb0(i-2, k, j) = vb0(i-2, k, j) + 5.*temp11b1 - 8.*temp11b0
            vb0(i+2, k, j) = vb0(i+2, k, j) + temp11b1 + temp11b0
            vb0(i-3, k, j) = vb0(i-3, k, j) + temp11b0 - temp11b1
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
          END DO
        END DO
      END DO
      fqyb = 0.0
      CALL POPINTEGER4(ad_from7)
      CALL POPINTEGER4(ad_to7)
      DO j=ad_to7,ad_from7,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from4)
              CALL POPINTEGER4(ad_to4)
              DO i=ad_to4,ad_from4,-1
                tendencyb(i, k, j-1) = 0.0
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from5)
              CALL POPINTEGER4(ad_to5)
              DO i=ad_to5,ad_from5,-1
                tendencyb(i, k, j-1) = 0.0
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from6)
            CALL POPINTEGER4(ad_to6)
            DO i=ad_to6,ad_from6,-1
              mrdy = msfvy(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
        END IF
        CALL POPCONTROL3B(branch)
        IF (branch .LT. 3) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from)
              CALL POPINTEGER4(ad_to)
              DO i=ad_to,ad_from,-1
                vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
                temp = v(i, k, j+2) - v(i, k, j-3) + 10.*(v(i, k, j)-v(i&
&                  , k, j-1)) - 5.*(v(i, k, j+1)-v(i, k, j-2))
                temp2 = SIGN(1., vel)
                temp1 = temp2/60.0
                temp0 = SIGN(1, time_step)
                tempb = vel*fqyb(i, k, jp1)
                tempb0 = tempb/60.0
                tempb1 = -(temp0*temp1*tempb)
                velb = ((37.*(v(i, k, j)+v(i, k, j-1))-8.*(v(i, k, j+1)+&
&                  v(i, k, j-2))+v(i, k, j+2)+v(i, k, j-3))/60.0-temp0*(&
&                  temp1*temp))*fqyb(i, k, jp1)
                vb0(i, k, j) = vb0(i, k, j) + 10.*tempb1 + 37.*tempb0
                vb0(i, k, j-1) = vb0(i, k, j-1) + 37.*tempb0 - 10.*&
&                  tempb1
                vb0(i, k, j+1) = vb0(i, k, j+1) - 5.*tempb1 - 8.*tempb0
                vb0(i, k, j-2) = vb0(i, k, j-2) + 5.*tempb1 - 8.*tempb0
                vb0(i, k, j+2) = vb0(i, k, j+2) + tempb1 + tempb0
                vb0(i, k, j-3) = vb0(i, k, j-3) + tempb0 - tempb1
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
              END DO
            END DO
          ELSE IF (branch .EQ. 1) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from0)
              CALL POPINTEGER4(ad_to0)
              DO i=ad_to0,ad_from0,-1
                temp3b = 0.25*(v(i, k, j)+vb)*fqyb(i, k, jp1)
                temp3b0 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, &
&                  jp1)
                rvb(i, k, j) = rvb(i, k, j) + temp3b
                rvb(i, k, j-1) = rvb(i, k, j-1) + temp3b
                vb0(i, k, j) = vb0(i, k, j) + temp3b0
                vbb = temp3b0
                fqyb(i, k, jp1) = 0.0
                CALL POPCONTROL1B(branch)
                IF (branch .EQ. 0) THEN
                  vb0(i, k, j) = vb0(i, k, j) + vbb
                  vbb = 0.0
                END IF
                CALL POPREAL8(vb)
                vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from1)
              CALL POPINTEGER4(ad_to1)
              DO i=ad_to1,ad_from1,-1
                vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
                temp3 = v(i, k, j+1) - v(i, k, j-2) - 3.*(v(i, k, j)-v(i&
&                  , k, j-1))
                temp6 = SIGN(1., vel)
                temp5 = temp6/12.0
                temp4 = SIGN(1, time_step)
                temp3b1 = vel*fqyb(i, k, jp1)
                temp3b2 = temp3b1/12.0
                temp3b3 = temp4*temp5*temp3b1
                velb = ((7.*(v(i, k, j)+v(i, k, j-1))-v(i, k, j+1)-v(i, &
&                  k, j-2))/12.0+temp4*(temp5*temp3))*fqyb(i, k, jp1)
                vb0(i, k, j) = vb0(i, k, j) + 7.*temp3b2 - 3.*temp3b3
                vb0(i, k, j-1) = vb0(i, k, j-1) + 3.*temp3b3 + 7.*&
&                  temp3b2
                vb0(i, k, j+1) = vb0(i, k, j+1) + temp3b3 - temp3b2
                vb0(i, k, j-2) = vb0(i, k, j-2) - temp3b3 - temp3b2
                fqyb(i, k, jp1) = 0.0
                rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
                rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 3) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from2)
            CALL POPINTEGER4(ad_to2)
            DO i=ad_to2,ad_from2,-1
              temp7b = 0.25*(vb+v(i, k, j-1))*fqyb(i, k, jp1)
              temp7b0 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, jp1)
              rvb(i, k, j) = rvb(i, k, j) + temp7b
              rvb(i, k, j-1) = rvb(i, k, j-1) + temp7b
              vbb = temp7b0
              vb0(i, k, j-1) = vb0(i, k, j-1) + temp7b0
              fqyb(i, k, jp1) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
                vbb = 0.0
              END IF
              CALL POPREAL8(vb)
              vb0(i, k, j) = vb0(i, k, j) + vbb
            END DO
          END DO
        ELSE IF (branch .EQ. 4) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from3)
            CALL POPINTEGER4(ad_to3)
            DO i=ad_to3,ad_from3,-1
              vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
              temp7 = v(i, k, j+1) - v(i, k, j-2) - 3.*(v(i, k, j)-v(i, &
&                k, j-1))
              temp10 = SIGN(1., vel)
              temp9 = temp10/12.0
              temp8 = SIGN(1, time_step)
              temp7b1 = vel*fqyb(i, k, jp1)
              temp7b2 = temp7b1/12.0
              temp7b3 = temp8*temp9*temp7b1
              velb = ((7.*(v(i, k, j)+v(i, k, j-1))-v(i, k, j+1)-v(i, k&
&                , j-2))/12.0+temp8*(temp9*temp7))*fqyb(i, k, jp1)
              vb0(i, k, j) = vb0(i, k, j) + 7.*temp7b2 - 3.*temp7b3
              vb0(i, k, j-1) = vb0(i, k, j-1) + 3.*temp7b3 + 7.*temp7b2
              vb0(i, k, j+1) = vb0(i, k, j+1) + temp7b3 - temp7b2
              vb0(i, k, j-2) = vb0(i, k, j-2) - temp7b3 - temp7b2
              fqyb(i, k, jp1) = 0.0
              rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
              rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
            END DO
          END DO
        END IF
      END DO
    ELSE
      fqxb = 0.0
      CALL POPINTEGER4(ad_from19)
      CALL POPINTEGER4(ad_to19)
      DO j=ad_to19,ad_from19,-1
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from18)
          CALL POPINTEGER4(ad_to18)
          DO i=ad_to18,ad_from18,-1
            mrdx = msfvy(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
        END DO
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          DO k=ktf,kts,-1
            temp23b7 = 0.25*(v(i_end+1, k, j)+v(i_end, k, j))*fqxb(i_end&
&              +1, k)
            temp23b8 = 0.25*(ru(i_end+1, k, j)+ru(i_end+1, k, j-1))*fqxb&
&              (i_end+1, k)
            rub(i_end+1, k, j) = rub(i_end+1, k, j) + temp23b7
            rub(i_end+1, k, j-1) = rub(i_end+1, k, j-1) + temp23b7
            vb0(i_end+1, k, j) = vb0(i_end+1, k, j) + temp23b8
            vb0(i_end, k, j) = vb0(i_end, k, j) + temp23b8
            fqxb(i_end+1, k) = 0.0
          END DO
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            temp23b5 = 0.25*(v(i_start, k, j)+v(i_start-1, k, j))*fqxb(&
&              i_start, k)
            temp23b6 = 0.25*(ru(i_start, k, j)+ru(i_start, k, j-1))*fqxb&
&              (i_start, k)
            rub(i_start, k, j) = rub(i_start, k, j) + temp23b5
            rub(i_start, k, j-1) = rub(i_start, k, j-1) + temp23b5
            vb0(i_start, k, j) = vb0(i_start, k, j) + temp23b6
            vb0(i_start-1, k, j) = vb0(i_start-1, k, j) + temp23b6
            fqxb(i_start, k) = 0.0
          END DO
        END IF
        DO k=ktf,kts,-1
          DO i=i_end_f,i_start_f,-1
            vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
            temp23b4 = vel*fqxb(i, k)/12.0
            velb = (7.*(v(i, k, j)+v(i-1, k, j))-v(i+1, k, j)-v(i-2, k, &
&              j))*fqxb(i, k)/12.0
            vb0(i, k, j) = vb0(i, k, j) + 7.*temp23b4
            vb0(i-1, k, j) = vb0(i-1, k, j) + 7.*temp23b4
            vb0(i+1, k, j) = vb0(i+1, k, j) - temp23b4
            vb0(i-2, k, j) = vb0(i-2, k, j) - temp23b4
            fqxb(i, k) = 0.0
            rub(i, k, j) = rub(i, k, j) + 0.5*velb
            rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
          END DO
        END DO
      END DO
      fqyb = 0.0
      CALL POPINTEGER4(ad_from17)
      CALL POPINTEGER4(ad_to17)
      DO j=ad_to17,ad_from17,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from14)
              CALL POPINTEGER4(ad_to14)
              DO i=ad_to14,ad_from14,-1
                tendencyb(i, k, j-1) = 0.0
              END DO
            END DO
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from15)
              CALL POPINTEGER4(ad_to15)
              DO i=ad_to15,ad_from15,-1
                tendencyb(i, k, j-1) = 0.0
              END DO
            END DO
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from16)
            CALL POPINTEGER4(ad_to16)
            DO i=ad_to16,ad_from16,-1
              mrdy = msfvy(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
        END IF
        CALL POPCONTROL2B(branch)
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from11)
            CALL POPINTEGER4(ad_to11)
            DO i=ad_to11,ad_from11,-1
              temp23b = 0.25*(v(i, k, j)+vb)*fqyb(i, k, jp1)
              temp23b0 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, jp1&
&                )
              rvb(i, k, j) = rvb(i, k, j) + temp23b
              rvb(i, k, j-1) = rvb(i, k, j-1) + temp23b
              vb0(i, k, j) = vb0(i, k, j) + temp23b0
              vbb = temp23b0
              fqyb(i, k, jp1) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                vb0(i, k, j) = vb0(i, k, j) + vbb
                vbb = 0.0
              END IF
              CALL POPREAL8(vb)
              vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
            END DO
          END DO
        ELSE IF (branch .EQ. 1) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from12)
            CALL POPINTEGER4(ad_to12)
            DO i=ad_to12,ad_from12,-1
              temp23b1 = 0.25*(vb+v(i, k, j-1))*fqyb(i, k, jp1)
              temp23b2 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, jp1&
&                )
              rvb(i, k, j) = rvb(i, k, j) + temp23b1
              rvb(i, k, j-1) = rvb(i, k, j-1) + temp23b1
              vbb = temp23b2
              vb0(i, k, j-1) = vb0(i, k, j-1) + temp23b2
              fqyb(i, k, jp1) = 0.0
              CALL POPCONTROL1B(branch)
              IF (branch .EQ. 0) THEN
                vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
                vbb = 0.0
              END IF
              CALL POPREAL8(vb)
              vb0(i, k, j) = vb0(i, k, j) + vbb
            END DO
          END DO
        ELSE
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from13)
            CALL POPINTEGER4(ad_to13)
            DO i=ad_to13,ad_from13,-1
              vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
              temp23b3 = vel*fqyb(i, k, jp1)/12.0
              velb = (7.*(v(i, k, j)+v(i, k, j-1))-v(i, k, j+1)-v(i, k, &
&                j-2))*fqyb(i, k, jp1)/12.0
              vb0(i, k, j) = vb0(i, k, j) + 7.*temp23b3
              vb0(i, k, j-1) = vb0(i, k, j-1) + 7.*temp23b3
              vb0(i, k, j+1) = vb0(i, k, j+1) - temp23b3
              vb0(i, k, j-2) = vb0(i, k, j-2) - temp23b3
              fqyb(i, k, jp1) = 0.0
              rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
              rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
            END DO
          END DO
        END IF
      END DO
    END IF
  ELSE IF (branch .EQ. 3) THEN
    fqxb = 0.0
    CALL POPINTEGER4(ad_from28)
    CALL POPINTEGER4(ad_to28)
    DO j=ad_to28,ad_from28,-1
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from27)
        CALL POPINTEGER4(ad_to27)
        DO i=ad_to27,ad_from27,-1
          mrdx = msfvy(i, j)*rdx
          fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
          fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .NE. 0) THEN
        DO k=ktf,kts,-1
          temp31b1 = 0.25*(v(i_end+1, k, j)+v(i_end, k, j))*fqxb(i_end+1&
&            , k)
          temp31b2 = 0.25*(ru(i_end+1, k, j)+ru(i_end+1, k, j-1))*fqxb(&
&            i_end+1, k)
          rub(i_end+1, k, j) = rub(i_end+1, k, j) + temp31b1
          rub(i_end+1, k, j-1) = rub(i_end+1, k, j-1) + temp31b1
          vb0(i_end+1, k, j) = vb0(i_end+1, k, j) + temp31b2
          vb0(i_end, k, j) = vb0(i_end, k, j) + temp31b2
          fqxb(i_end+1, k) = 0.0
        END DO
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        DO k=ktf,kts,-1
          temp31b = 0.25*(v(i_start, k, j)+v(i_start-1, k, j))*fqxb(&
&            i_start, k)
          temp31b0 = 0.25*(ru(i_start, k, j)+ru(i_start, k, j-1))*fqxb(&
&            i_start, k)
          rub(i_start, k, j) = rub(i_start, k, j) + temp31b
          rub(i_start, k, j-1) = rub(i_start, k, j-1) + temp31b
          vb0(i_start, k, j) = vb0(i_start, k, j) + temp31b0
          vb0(i_start-1, k, j) = vb0(i_start-1, k, j) + temp31b0
          fqxb(i_start, k) = 0.0
        END DO
      END IF
      DO k=ktf,kts,-1
        DO i=i_end_f,i_start_f,-1
          vel = 0.5*(ru(i, k, j)+ru(i, k, j-1))
          temp27 = v(i+1, k, j) - v(i-2, k, j) - 3.*(v(i, k, j)-v(i-1, k&
&            , j))
          temp30 = SIGN(1., vel)
          temp29 = temp30/12.0
          temp28 = SIGN(1, time_step)
          temp27b = vel*fqxb(i, k)
          temp27b0 = temp27b/12.0
          temp27b1 = temp28*temp29*temp27b
          velb = ((7.*(v(i, k, j)+v(i-1, k, j))-v(i+1, k, j)-v(i-2, k, j&
&            ))/12.0+temp28*(temp29*temp27))*fqxb(i, k)
          vb0(i, k, j) = vb0(i, k, j) + 7.*temp27b0 - 3.*temp27b1
          vb0(i-1, k, j) = vb0(i-1, k, j) + 3.*temp27b1 + 7.*temp27b0
          vb0(i+1, k, j) = vb0(i+1, k, j) + temp27b1 - temp27b0
          vb0(i-2, k, j) = vb0(i-2, k, j) - temp27b1 - temp27b0
          fqxb(i, k) = 0.0
          rub(i, k, j) = rub(i, k, j) + 0.5*velb
          rub(i, k, j-1) = rub(i, k, j-1) + 0.5*velb
        END DO
      END DO
    END DO
    fqyb = 0.0
    CALL POPINTEGER4(ad_from26)
    CALL POPINTEGER4(ad_to26)
    DO j=ad_to26,ad_from26,-1
      CALL POPINTEGER4(jp0)
      CALL POPINTEGER4(jp1)
      CALL POPCONTROL2B(branch)
      IF (branch .LT. 2) THEN
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from23)
            CALL POPINTEGER4(ad_to23)
            DO i=ad_to23,ad_from23,-1
              tendencyb(i, k, j-1) = 0.0
            END DO
          END DO
        ELSE
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from24)
            CALL POPINTEGER4(ad_to24)
            DO i=ad_to24,ad_from24,-1
              tendencyb(i, k, j-1) = 0.0
            END DO
          END DO
        END IF
      ELSE IF (branch .EQ. 2) THEN
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from25)
          CALL POPINTEGER4(ad_to25)
          DO i=ad_to25,ad_from25,-1
            mrdy = msfvy(i, j-1)*rdy
            fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j-1&
&              )
            fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j-1&
&              )
          END DO
        END DO
      END IF
      CALL POPCONTROL2B(branch)
      IF (branch .EQ. 0) THEN
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from20)
          CALL POPINTEGER4(ad_to20)
          DO i=ad_to20,ad_from20,-1
            temp23b9 = 0.25*(v(i, k, j)+vb)*fqyb(i, k, jp1)
            temp23b10 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, jp1)
            rvb(i, k, j) = rvb(i, k, j) + temp23b9
            rvb(i, k, j-1) = rvb(i, k, j-1) + temp23b9
            vb0(i, k, j) = vb0(i, k, j) + temp23b10
            vbb = temp23b10
            fqyb(i, k, jp1) = 0.0
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              vb0(i, k, j) = vb0(i, k, j) + vbb
              vbb = 0.0
            END IF
            CALL POPREAL8(vb)
            vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
          END DO
        END DO
      ELSE IF (branch .EQ. 1) THEN
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from21)
          CALL POPINTEGER4(ad_to21)
          DO i=ad_to21,ad_from21,-1
            temp23b11 = 0.25*(vb+v(i, k, j-1))*fqyb(i, k, jp1)
            temp23b12 = 0.25*(rv(i, k, j)+rv(i, k, j-1))*fqyb(i, k, jp1)
            rvb(i, k, j) = rvb(i, k, j) + temp23b11
            rvb(i, k, j-1) = rvb(i, k, j-1) + temp23b11
            vbb = temp23b12
            vb0(i, k, j-1) = vb0(i, k, j-1) + temp23b12
            fqyb(i, k, jp1) = 0.0
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
              vbb = 0.0
            END IF
            CALL POPREAL8(vb)
            vb0(i, k, j) = vb0(i, k, j) + vbb
          END DO
        END DO
      ELSE
        DO k=ktf,kts,-1
          CALL POPINTEGER4(ad_from22)
          CALL POPINTEGER4(ad_to22)
          DO i=ad_to22,ad_from22,-1
            vel = 0.5*(rv(i, k, j)+rv(i, k, j-1))
            temp23 = v(i, k, j+1) - v(i, k, j-2) - 3.*(v(i, k, j)-v(i, k&
&              , j-1))
            temp26 = SIGN(1., vel)
            temp25 = temp26/12.0
            temp24 = SIGN(1, time_step)
            temp23b13 = vel*fqyb(i, k, jp1)
            temp23b14 = temp23b13/12.0
            temp23b15 = temp24*temp25*temp23b13
            velb = ((7.*(v(i, k, j)+v(i, k, j-1))-v(i, k, j+1)-v(i, k, j&
&              -2))/12.0+temp24*(temp25*temp23))*fqyb(i, k, jp1)
            vb0(i, k, j) = vb0(i, k, j) + 7.*temp23b14 - 3.*temp23b15
            vb0(i, k, j-1) = vb0(i, k, j-1) + 3.*temp23b15 + 7.*&
&              temp23b14
            vb0(i, k, j+1) = vb0(i, k, j+1) + temp23b15 - temp23b14
            vb0(i, k, j-2) = vb0(i, k, j-2) - temp23b15 - temp23b14
            fqyb(i, k, jp1) = 0.0
            rvb(i, k, j) = rvb(i, k, j) + 0.5*velb
            rvb(i, k, j-1) = rvb(i, k, j-1) + 0.5*velb
          END DO
        END DO
      END IF
    END DO
  ELSE IF (branch .EQ. 4) THEN
    CALL POPINTEGER4(ad_from36)
    CALL POPINTEGER4(ad_to36)
    DO j=ad_to36,ad_from36,-1
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from35)
        CALL POPINTEGER4(ad_to35)
        DO i=ad_to35,ad_from35,-1
          mrdx = msfvy(i, j)*rdx
          temp31b18 = -(mrdx*0.25*tendencyb(i, k, j))
          temp31b19 = (v(i+1, k, j)+v(i, k, j))*temp31b18
          temp31b20 = (ru(i+1, k, j)+ru(i+1, k, j-1))*temp31b18
          temp31b21 = -((v(i, k, j)+v(i-1, k, j))*temp31b18)
          temp31b22 = -((ru(i, k, j)+ru(i, k, j-1))*temp31b18)
          rub(i+1, k, j) = rub(i+1, k, j) + temp31b19
          rub(i+1, k, j-1) = rub(i+1, k, j-1) + temp31b19
          vb0(i+1, k, j) = vb0(i+1, k, j) + temp31b20
          vb0(i, k, j) = vb0(i, k, j) + temp31b22 + temp31b20
          rub(i, k, j) = rub(i, k, j) + temp31b21
          rub(i, k, j-1) = rub(i, k, j-1) + temp31b21
          vb0(i-1, k, j) = vb0(i-1, k, j) + temp31b22
        END DO
      END DO
    END DO
    CALL POPINTEGER4(j)
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from34)
        CALL POPINTEGER4(ad_to34)
        DO i=ad_to34,ad_from34,-1
          mrdy = msfvy(i, j)*rdy
          temp31b13 = -(mrdy*0.25*tendencyb(i, k, j))
          temp31b14 = (vb+v(i, k, j))*temp31b13
          temp31b15 = (rv(i, k, j+1)+rv(i, k, j))*temp31b13
          temp31b16 = -((v(i, k, j)+v(i, k, j-1))*temp31b13)
          temp31b17 = -((rv(i, k, j)+rv(i, k, j-1))*temp31b13)
          rvb(i, k, j+1) = rvb(i, k, j+1) + temp31b14
          rvb(i, k, j) = rvb(i, k, j) + temp31b16 + temp31b14
          vbb = temp31b15
          vb0(i, k, j) = vb0(i, k, j) + temp31b17 + temp31b15
          rvb(i, k, j-1) = rvb(i, k, j-1) + temp31b16
          vb0(i, k, j-1) = vb0(i, k, j-1) + temp31b17
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            vb0(i, k, j) = vb0(i, k, j) + vbb
            vbb = 0.0
          END IF
          CALL POPREAL8(vb)
          vb0(i, k, j+1) = vb0(i, k, j+1) + vbb
        END DO
      END DO
      CALL POPINTEGER4(j)
    END IF
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from33)
        CALL POPINTEGER4(ad_to33)
        DO i=ad_to33,ad_from33,-1
          mrdy = msfvy(i, j)*rdy
          temp31b8 = -(mrdy*0.25*tendencyb(i, k, j))
          temp31b9 = (v(i, k, j+1)+v(i, k, j))*temp31b8
          temp31b10 = (rv(i, k, j+1)+rv(i, k, j))*temp31b8
          temp31b11 = -((v(i, k, j)+vb)*temp31b8)
          temp31b12 = -((rv(i, k, j)+rv(i, k, j-1))*temp31b8)
          rvb(i, k, j+1) = rvb(i, k, j+1) + temp31b9
          rvb(i, k, j) = rvb(i, k, j) + temp31b11 + temp31b9
          vb0(i, k, j+1) = vb0(i, k, j+1) + temp31b10
          vb0(i, k, j) = vb0(i, k, j) + temp31b12 + temp31b10
          rvb(i, k, j-1) = rvb(i, k, j-1) + temp31b11
          vbb = temp31b12
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            vb0(i, k, j) = vb0(i, k, j) + vbb
            vbb = 0.0
          END IF
          CALL POPREAL8(vb)
          vb0(i, k, j-1) = vb0(i, k, j-1) + vbb
        END DO
      END DO
    END IF
    CALL POPCONTROL2B(branch)
    IF (branch .EQ. 0) THEN
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from32)
        CALL POPINTEGER4(ad_to32)
        DO i=ad_to32,ad_from32,-1
          tendencyb(i, k, jde) = 0.0
        END DO
      END DO
    ELSE IF (branch .NE. 1) THEN
      GOTO 100
    END IF
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from31)
        CALL POPINTEGER4(ad_to31)
        DO i=ad_to31,ad_from31,-1
          tendencyb(i, k, jds) = 0.0
        END DO
      END DO
    END IF
 100 CALL POPINTEGER4(ad_from30)
    CALL POPINTEGER4(ad_to30)
    DO j=ad_to30,ad_from30,-1
      DO k=ktf,kts,-1
        CALL POPINTEGER4(ad_from29)
        CALL POPINTEGER4(ad_to29)
        DO i=ad_to29,ad_from29,-1
          mrdy = msfvy(i, j)*rdy
          temp31b3 = -(mrdy*0.25*tendencyb(i, k, j))
          temp31b4 = (v(i, k, j+1)+v(i, k, j))*temp31b3
          temp31b5 = (rv(i, k, j+1)+rv(i, k, j))*temp31b3
          temp31b6 = -((v(i, k, j)+v(i, k, j-1))*temp31b3)
          temp31b7 = -((rv(i, k, j)+rv(i, k, j-1))*temp31b3)
          rvb(i, k, j+1) = rvb(i, k, j+1) + temp31b4
          rvb(i, k, j) = rvb(i, k, j) + temp31b6 + temp31b4
          vb0(i, k, j+1) = vb0(i, k, j+1) + temp31b5
          vb0(i, k, j) = vb0(i, k, j) + temp31b7 + temp31b5
          rvb(i, k, j-1) = rvb(i, k, j-1) + temp31b6
          vb0(i, k, j-1) = vb0(i, k, j-1) + temp31b7
        END DO
      END DO
    END DO
  END IF
END SUBROUTINE A_ADVECT_V
   SUBROUTINE a_advect_scalar(field,a_field,field_old,a_field_old,tendency, &
   a_tendency,ru,a_ru,rv,a_rv,rom,a_rom,mut,a_mut,time_step,config_flags, &
   msfux,msfuy,msfvx,msfvy,msftx,msfty,fzm,fzp,rdx,rdy,rdzw,ids,ide,jds,jde,kds,kde,ims, &
   ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   TYPE(grid_config_rec_type) :: config_flags
   INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,a_field,field_old,a_field_old, &
   ru,a_ru,rv,a_rv,rom,a_rom
   REAL,DIMENSION(ims:ime,jms:jme) :: mut,a_mut
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,a_tendency
   REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty
   REAL,DIMENSION(kms:kme) :: fzm,fzp,rdzw
   REAL :: rdx,rdy
   INTEGER :: time_step
   INTEGER :: i,j,k,itf,jtf,ktf
   INTEGER :: i_start,i_end,j_start,j_end
   INTEGER :: i_start_f,i_end_f,j_start_f,j_end_f
   INTEGER :: jmin,jmax,jp,jm,imin,imax
   REAL :: mrdx,mrdy,ub,a_ub,vb,a_vb,uw,a_uw,vw,a_vw
   REAL,DIMENSION(its:ite,kts:kte) :: vflux,a_vflux
   REAL,DIMENSION(ims:ime,kms:kme) :: fqx,a_fqx
   REAL,DIMENSION(ims:ime,kms:kme,2) :: fqy,a_fqy
   INTEGER :: horz_order,vert_order
   LOGICAL :: degrade_xs,degrade_ys
   LOGICAL :: degrade_xe,degrade_ye
   INTEGER :: jp1,jp0,jtmp
   REAL :: flux3,Diff_flux3,flux4,Diff_flux4,flux5,Diff_flux5,flux6,Diff_flux6
   REAL :: q_im3,a_q_im3,q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1, &
   q_ip2,a_q_ip2,ua,a_ua,vel,a_vel

   INTEGER, DIMENSION(jms:jme) :: WALLS_jp03,WALLS_jp13
   INTEGER, DIMENSION(jms:jme) :: WALLS_jp04,WALLS_jp14
   INTEGER, DIMENSION(jms:jme) :: WALLS_jp05,WALLS_jp15
   INTEGER, DIMENSION(jms:jme) :: WALLS_jp06,WALLS_jp16

   Diff_flux4(q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1,ua, &
   a_ua) =(7.*(a_q_i +a_q_im1) -(a_q_ip1 +a_q_im2))/12.0
   flux4(q_im2,q_im1,q_i,q_ip1,ua) =(7.*(q_i +q_im1) -(q_ip1 +q_im2))/12.0

   Diff_flux3(q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1,ua, &
   a_ua) =Diff_flux4(q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1, &
   ua,a_ua) +(sign(1, time_step) *sign(1., ua)*((a_q_ip1 -a_q_im2) &
   -3.*(a_q_i -a_q_im1))/12.0)
   flux3(q_im2,q_im1,q_i,q_ip1,ua) =flux4(q_im2,q_im1,q_i,q_ip1,ua) +sign(1, time_step) &
   *sign(1., ua)*((q_ip1 -q_im2) -3.*(q_i -q_im1))/12.0

   Diff_flux6(q_im3,a_q_im3,q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1, &
   a_q_ip1,q_ip2,a_q_ip2,ua,a_ua) =(37.*(a_q_i +a_q_im1) -8.*( &
   a_q_ip1 +a_q_im2) +(a_q_ip2 +a_q_im3))/60.0
   flux6(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2,ua) =(37.*(q_i +q_im1) -8.*(q_ip1 +q_im2) &
   +(q_ip2 +q_im3))/60.0

   Diff_flux5(q_im3,a_q_im3,q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1, &
   a_q_ip1,q_ip2,a_q_ip2,ua,a_ua) =Diff_flux6(q_im3,a_q_im3,q_im2, &
   a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1,q_ip2,a_q_ip2,ua, &
   a_ua) -(sign(1, time_step) *sign(1., ua)*((a_q_ip2 -a_q_im3) -5.*( &
   a_q_ip1 -a_q_im2) +10.*(a_q_i -a_q_im1))/60.0)
   flux5(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2,ua) =flux6(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2, &
   ua) -sign(1, time_step) *sign(1., ua)*((q_ip2 -q_im3) -5.*(q_ip1 -q_im2) &
   +10.*(q_i -q_im1))/60.0

   LOGICAL :: specified

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007

   REAL :: gwalls, qwalls, kwalls

!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[0]

     specified = .false.
     if(config_flags%specified .or. config_flags%nested) specified = .true.
     ktf=MIN(kte,kde-1)
     horz_order = config_flags%h_sca_adv_order
     vert_order = config_flags%v_sca_adv_order

!LPB[3]
  horizontal_order_test : IF( horz_order == 6 ) THEN

      degrade_xs = .true.
      degrade_xe = .true.
      degrade_ys = .true.
      degrade_ye = .true.
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+3)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-3)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+3)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-4)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_ys) then

           j_start = MAX(jts,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte,jde-2)
           j_end_f = jde-3
         ENDIF
      IF(config_flags%polar) j_end = MIN(jte,jde-1)

        jp1 = 2
        jp0 = 1

        j_loop_y_flux_6 : DO j = j_start, j_end+1
           WALLS_jp16(j)=jp1
           WALLS_jp06(j)=jp0
           jtmp = jp1
           jp1 = jp0
           jp0 = jtmp
         ENDDO j_loop_y_flux_6

    ELSE IF( horz_order == 5 ) THEN
      degrade_xs = .true.
      degrade_xe = .true.
      degrade_ys = .true.
      degrade_ye = .true.
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+3)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-3)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+3)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-4)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_ys) then
         j_start = MAX(jts,jds+1)
         j_start_f = jds+3
      ELSE
         j_start = j_start - 3
         j_start_f = j_start_f - 2
      ENDIF
      IF(degrade_ye) then
         j_end = MIN(jte,jde-2)
         j_end_f = jde-3
      ELSE
         j_end = j_end + 3
         j_end_f = j_end_f + 3
      ENDIF
      IF(config_flags%polar) j_end = MIN(jte,jde-1)

        jp1 = 2
        jp0 = 1

        j_loop_y_flux_5 : DO j = j_start, j_end+1
           WALLS_jp15(j)=jp1
           WALLS_jp05(j)=jp0
           jtmp = jp1
           jp1 = jp0
           jp0 = jtmp
         ENDDO j_loop_y_flux_5

   ELSE IF( horz_order == 4 ) THEN
      degrade_xs = .true.
      degrade_xe = .true.
      degrade_ys = .true.
      degrade_ye = .true.
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+2)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-2)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+2)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-3)                ) degrade_ye = .false.

      ktf=MIN(kte,kde-1)
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         i_start_f = i_start
         i_end_f   = i_end+1
      IF(degrade_xs) then
           i_start = ids+1
           i_start_f = i_start+1
         ENDIF
      IF(degrade_xe) then
           i_end = ide-2
           i_end_f = ide-2
         ENDIF

         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_ys) then
           j_start = jds+1
           j_start_f = j_start+1
         ENDIF
      IF(degrade_ye) then
           j_end = jde-2
           j_end_f = jde-2
         ENDIF
      IF(config_flags%polar) j_end = MIN(jte,jde-1)

       jp1 = 2
       jp0 = 1

     DO j = j_start, j_end+1
       WALLS_jp14(j)=jp1
       WALLS_jp04(j)=jp0
       jtmp = jp1
       jp1 = jp0
       jp0 = jtmp
     ENDDO
   ELSE IF( horz_order == 3 ) THEN
      degrade_xs = .true.
      degrade_xe = .true.
      degrade_ys = .true.
      degrade_ye = .true.
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+2)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-2)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+2)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-3)                ) degrade_ye = .false.
      ktf=MIN(kte,kde-1)
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         i_start_f = i_start
         i_end_f   = i_end+1
      IF(degrade_xs) then
           i_start = ids+1
           i_start_f = i_start+1
         ENDIF
      IF(degrade_xe) then

           i_end = ide-2
           i_end_f = ide-2
         ENDIF
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_ys) then
           j_start = jds+1
           j_start_f = j_start+1
         ENDIF
      IF(degrade_ye) then
           j_end = jde-2
           j_end_f = jde-2
         ENDIF
      IF(config_flags%polar) j_end = MIN(jte,jde-1)

       jp1 = 2
       jp0 = 1

     DO j = j_start, j_end+1
       WALLS_jp13(j)=jp1
       WALLS_jp03(j)=jp0
       jtmp = jp1
       jp1 = jp0
       jp0 = jtmp
     ENDDO

   ELSE IF( horz_order == 2 ) THEN
   ELSE IF ( horz_order == 0 ) THEN
   ELSE
   ENDIF horizontal_order_test 

   i_start = its
   i_end   = MIN(ite,ide-1)
   j_start = jts
   j_end   = MIN(jte,jde-1)

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

   a_ub =0.0
   a_vb =0.0
   a_uw =0.0
   a_vw =0.0

   Do K1_ADJ =kts, kte
   Do K0_ADJ =its, ite
   a_vflux(K0_ADJ,K1_ADJ) =0.0
   End Do
   End Do

   Do K1_ADJ =kms, kme
   Do K0_ADJ =ims, ime
   a_fqx(K0_ADJ,K1_ADJ) =0.0
   End Do
   End Do

   Do K2_ADJ =1, 2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its, ite
   a_fqy(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   a_q_im3 =0.0
   a_q_im2 =0.0
   a_q_im1 =0.0
   a_q_i =0.0
   a_q_ip1 =0.0
   a_q_ip2 =0.0
   a_ua =0.0

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[15]

   i_start = its
   i_end   = MIN(ite,ide-1)
   j_start = jts
   j_end   = MIN(jte,jde-1)

   IF(vert_order == 6) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_tendency(i,k,j)
   a_Tmpv2 =-a_Tmpv3
   a_Tmpv1 =rdzw(k)*a_Tmpv2
   a_vflux(i,k+1) =a_vflux(i,k+1) +a_Tmpv1
   a_vflux(i,k) =a_vflux(i,k) -a_Tmpv1
   ENDDO
   ENDDO
   DO i =i_end, i_start, -1
   k=ktf
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1

   k = ktf-1
   vel =rom(i,k,j)
   Tmpv001 =flux4(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux4(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel

   k = kts+2
   vel =rom(i,k,j)
   Tmpv001 =flux4(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux4(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel

   k=kts+1

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   ENDDO

   DO k =ktf-2, kts+3, -1
   DO i =i_end, i_start, -1
   vel =rom(i,k,j)
   Tmpv001 =flux6(field(i,k-3,j),field(i,k-2,j),field(i,k-1,j),field(i,k,j)  &
   ,field(i,k+1,j),field(i,k+2,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2

   a_vel =a_vel -Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+2,j) =a_field(i,k+2,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,j)  &
   ,0.0,field(i,k-1,j),0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),1.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-3,j) =a_field(i,k-3,j) +Diff_flux6(field(i,k-3,j),1.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   ENDDO
   ENDDO
   ENDDO

   ELSE IF(vert_order == 5) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_tendency(i,k,j)
   a_Tmpv2 =-a_Tmpv3
   a_Tmpv1 =rdzw(k)*a_Tmpv2
   a_vflux(i,k+1) =a_vflux(i,k+1) +a_Tmpv1
   a_vflux(i,k) =a_vflux(i,k) -a_Tmpv1
   ENDDO
   ENDDO
   DO i =i_end, i_start, -1
!ADDED BY WALLS
   k=ktf
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1

   k = ktf-1
   vel =rom(i,k,j)
   Tmpv001 =flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel

   k = kts+2
   vel =rom(i,k,j)
   Tmpv001 =flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel

   k =kts+1
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   ENDDO
   DO k =ktf-2, kts+3, -1
   DO i =i_end, i_start, -1
   vel =rom(i,k,j)
   Tmpv001 =flux5(field(i,k-3,j),field(i,k-2,j),field(i,k-1,j),field(i,k,j)  &
   ,field(i,k+1,j),field(i,k+2,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+2,j) =a_field(i,k+2,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,j)  &
   ,0.0,field(i,k-1,j),0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),1.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-3,j) =a_field(i,k-3,j) +Diff_flux5(field(i,k-3,j),1.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   ENDDO
   ENDDO
   ENDDO

   ELSE IF(vert_order == 4) THEN
!ADDED BY WALLS

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_tendency(i,k,j)
   a_Tmpv2 =-a_Tmpv3
   a_Tmpv1 =rdzw(k)*a_Tmpv2
   a_vflux(i,k+1) =a_vflux(i,k+1) +a_Tmpv1
   a_vflux(i,k) =a_vflux(i,k) -a_Tmpv1
   ENDDO
   ENDDO
   DO i =i_end, i_start, -1
!ADDED BY WALLS
   k=ktf
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
!ADDED BY WALLS
   k=kts+1
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   ENDDO
   DO k =ktf-1, kts+2, -1
   DO i =i_end, i_start, -1
   vel =rom(i,k,j)
   Tmpv001 =flux4(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux4(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   ENDDO
   ENDDO
   ENDDO

   ELSE IF(vert_order == 3) THEN

   DO j =j_end, j_start, -1

   DO k =ktf, kts, -1
   gwalls =rdzw(k)
   DO i =i_end, i_start, -1
   a_vflux(i,k+1) =a_vflux(i,k+1) -gwalls*a_tendency(i,k,j)
   a_vflux(i,k) =a_vflux(i,k) +gwalls*a_tendency(i,k,j)
   ENDDO
   ENDDO

   DO i =i_end, i_start, -1
   k=ktf
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1

   k=kts+1
   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   ENDDO

   DO k =ktf-1, kts+2, -1
   DO i =i_end, i_start, -1
   vel =rom(i,k,j)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_vel =flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)*a_Tmpv2

   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   ENDDO
   ENDDO
   ENDDO

   ELSE IF(vert_order == 2) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_tendency(i,k,j)
   a_Tmpv2 =-a_Tmpv3
   a_Tmpv1 =rdzw(k)*a_Tmpv2
   a_vflux(i,k+1) =a_vflux(i,k+1) +a_Tmpv1
   a_vflux(i,k) =a_vflux(i,k) -a_Tmpv1
   ENDDO
   ENDDO
   DO k =ktf, kts+1, -1
   DO i =i_end, i_start, -1
   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)

   a_Tmpv2 =a_vflux(i,k)
   a_vflux(i,k) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv001*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   ELSE

   ENDIF

!LPB[13]
   DO i =i_end, i_start, -1
   a_vflux(i,kte) =0.0
   a_vflux(i,kts) =0.0
   ENDDO

!LPB[12]

!LPB[11]
   IF( (config_flags%open_ye) .and. (jte == jde)) THEN
   DO i =i_start, i_end
   DO k =kts, ktf
   vb =max(0.5*(rv(i,k,jte-1) +rv(i,k,jte)), 0.)

   Tmpv002 =vb*(field_old(i,k,j_end) -field_old(i,k,j_end-1))
   Tmpv004 =field(i,k,j_end)*(rv(i,k,jte) -rv(i,k,jte-1))
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdy*Tmpv005
   Tmpv007 =tendency(i,k,j_end) -Tmpv006
   tendency(i,k,j_end) =Tmpv007
   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_ye) .and. (jte == jde)) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   vb =max(0.5*(rv(i,k,jte-1) +rv(i,k,jte)), 0.)

   a_Tmpv7 =a_tendency(i,k,j_end)
   a_tendency(i,k,j_end) =0.0
   a_tendency(i,k,j_end) =a_tendency(i,k,j_end) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdy*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i,k,j_end) =a_field(i,k,j_end) +(rv(i,k,jte) -rv(i,k,jte-1))*a_Tmpv4
   a_Tmpv3 =field(i,k,j_end)*a_Tmpv4
   a_rv(i,k,jte) =a_rv(i,k,jte) +a_Tmpv3
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) -a_Tmpv3
   a_vb =a_vb +(field_old(i,k,j_end) -field_old(i,k,j_end-1))*a_Tmpv2
   a_Tmpv1 =vb*a_Tmpv2
   a_field_old(i,k,j_end) =a_field_old(i,k,j_end) +a_Tmpv1
   a_field_old(i,k,j_end-1) =a_field_old(i,k,j_end-1) -a_Tmpv1

   a_Tmpv2 =(1.0 +(1.0)*sign(1.0, 0.5*(rv(i,k,jte-1) +rv(i,k,jte))))*0.5*a_vb
   a_vb =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) +a_Tmpv1
   a_rv(i,k,jte) =a_rv(i,k,jte) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[10]

!LPB[9]

   IF( (config_flags%open_ys) .and. (jts == jds) ) THEN
   DO i =i_start, i_end
   DO k =kts, ktf
   vb =min(0.5*(rv(i,k,jts) +rv(i,k,jts+1)), 0.)

   Tmpv002 =vb*(field_old(i,k,jts+1) -field_old(i,k,jts))
   Tmpv004 =field(i,k,jts)*(rv(i,k,jts+1) -rv(i,k,jts))
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdy*Tmpv005
   Tmpv007 =tendency(i,k,jts) -Tmpv006
   tendency(i,k,jts) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_ys) .and. (jts == jds) ) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   vb =min(0.5*(rv(i,k,jts) +rv(i,k,jts+1)), 0.)

   a_Tmpv7 =a_tendency(i,k,jts)
   a_tendency(i,k,jts) =0.0
   a_tendency(i,k,jts) =a_tendency(i,k,jts) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdy*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i,k,jts) =a_field(i,k,jts) +(rv(i,k,jts+1) -rv(i,k,jts))*a_Tmpv4
   a_Tmpv3 =field(i,k,jts)*a_Tmpv4
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +a_Tmpv3
   a_rv(i,k,jts) =a_rv(i,k,jts) -a_Tmpv3
   a_vb =a_vb +(field_old(i,k,jts+1) -field_old(i,k,jts))*a_Tmpv2
   a_Tmpv1 =vb*a_Tmpv2
   a_field_old(i,k,jts+1) =a_field_old(i,k,jts+1) +a_Tmpv1
   a_field_old(i,k,jts) =a_field_old(i,k,jts) -a_Tmpv1

   a_Tmpv2 =(1.0 -(1.0)*sign(1.0, 0.5*(rv(i,k,jts) +rv(i,k,jts+1))))*0.5*a_vb
   a_vb =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_rv(i,k,jts) =a_rv(i,k,jts) +a_Tmpv1
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[7]

   IF( (config_flags%open_xe) .and. (ite == ide) ) THEN
   DO j =j_start, j_end
   DO k =kts, ktf
   ub =max(0.5*(ru(ite-1,k,j) +ru(ite,k,j)), 0.)

   Tmpv002 =ub*(field_old(i_end,k,j) -field_old(i_end-1,k,j))
   Tmpv004 =field(i_end,k,j)*(ru(ite,k,j) -ru(ite-1,k,j))
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdx*Tmpv005
   Tmpv007 =tendency(i_end,k,j) -Tmpv006
   tendency(i_end,k,j) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_xe) .and. (ite == ide) ) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   ub =max(0.5*(ru(ite-1,k,j) +ru(ite,k,j)), 0.)

   a_Tmpv7 =a_tendency(i_end,k,j)
   a_tendency(i_end,k,j) =0.0
   a_tendency(i_end,k,j) =a_tendency(i_end,k,j) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdx*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i_end,k,j) =a_field(i_end,k,j) +(ru(ite,k,j) -ru(ite-1,k,j))*a_Tmpv4
   a_Tmpv3 =field(i_end,k,j)*a_Tmpv4
   a_ru(ite,k,j) =a_ru(ite,k,j) +a_Tmpv3
   a_ru(ite-1,k,j) =a_ru(ite-1,k,j) -a_Tmpv3
   a_ub =a_ub +(field_old(i_end,k,j) -field_old(i_end-1,k,j))*a_Tmpv2
   a_Tmpv1 =ub*a_Tmpv2
   a_field_old(i_end,k,j) =a_field_old(i_end,k,j) +a_Tmpv1
   a_field_old(i_end-1,k,j) =a_field_old(i_end-1,k,j) -a_Tmpv1

   a_Tmpv2 =(1.0 +(1.0)*sign(1.0, 0.5*(ru(ite-1,k,j) +ru(ite,k,j))))*0.5*a_vb
   a_ub =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_ru(ite-1,k,j) =a_ru(ite-1,k,j) +a_Tmpv1
   a_ru(ite,k,j) =a_ru(ite,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[6]

!LPB[5]

!ADDED BY WALLS
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

   IF( (config_flags%open_xs) .and. (its == ids) ) THEN
   DO j =j_start, j_end
   DO k =kts, ktf
   ub =min(0.5*(ru(its,k,j) +ru(its+1,k,j)), 0.)

   Tmpv002 =ub*(field_old(its+1,k,j) -field_old(its,k,j))
   Tmpv004 =field(its,k,j)*(ru(its+1,k,j) -ru(its,k,j))
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdx*Tmpv005
   Tmpv007 =tendency(its,k,j) -Tmpv006
   tendency(its,k,j) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_xs) .and. (its == ids) ) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   ub =min(0.5*(ru(its,k,j) +ru(its+1,k,j)), 0.)

   a_Tmpv7 =a_tendency(its,k,j)
   a_tendency(its,k,j) =0.0
   a_tendency(its,k,j) =a_tendency(its,k,j) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdx*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(its,k,j) =a_field(its,k,j) +(ru(its+1,k,j) -ru(its,k,j))*a_Tmpv4
   a_Tmpv3 =field(its,k,j)*a_Tmpv4
   a_ru(its+1,k,j) =a_ru(its+1,k,j) +a_Tmpv3
   a_ru(its,k,j) =a_ru(its,k,j) -a_Tmpv3
   a_ub =a_ub +(field_old(its+1,k,j) -field_old(its,k,j))*a_Tmpv2
   a_Tmpv1 =ub*a_Tmpv2
   a_field_old(its+1,k,j) =a_field_old(its+1,k,j) +a_Tmpv1
   a_field_old(its,k,j) =a_field_old(its,k,j) -a_Tmpv1

   a_Tmpv2 =(1.0 -(1.0)*sign(1.0, 0.5*(ru(its,k,j) +ru(its+1,k,j))))*0.5*a_vb
   a_ub =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_ru(its,k,j) =a_ru(its,k,j) +a_Tmpv1
   a_ru(its+1,k,j) =a_ru(its+1,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[3]
   specified = .false.
   if(config_flags%specified .or. config_flags%nested) specified = .true.
   ktf=MIN(kte,kde-1)
   horz_order = config_flags%h_sca_adv_order
   vert_order = config_flags%v_sca_adv_order

   IF( horz_order == 6 ) THEN
   degrade_xs = .true.
   degrade_xe = .true.
   degrade_ys = .true.
   degrade_ye = .true.

   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xs .or. &
       (its > ids+3)                ) degrade_xs = .false.
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xe .or. &
       (ite < ide-3)                ) degrade_xe = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ys .or. &
       (jts > jds+3)                ) degrade_ys = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ye .or. &
       (jte < jde-4)                ) degrade_ye = .false.

      ktf=MIN(kte,kde-1)
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      j_start_f = j_start
      j_end_f   = j_end+1

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+3
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-3
      ENDIF

      IF(config_flags%polar) j_end = MIN(jte,jde-1)

     jp1 = 2
     jp0 = 1
!ABOVE WERE ADDED BY WALLS

!ADDED BY WALLS
      i_start = its
      i_end   = MIN(ite,ide-1)

      j_start = jts
      j_end   = MIN(jte,jde-1)

      i_start_f = i_start
      i_end_f   = i_end+1

      IF(degrade_xs) then
        i_start = MAX(ids+1,its)
        i_start_f = MIN(i_start+2,ids+3)
      ENDIF

      IF(degrade_xe) then
        i_end = MIN(ide-2,ite)
        i_end_f = ide-3
      ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =-a_tendency(i,k,j)
   a_Tmpv1 =msftx(i,j)*rdx*a_Tmpv2
   a_fqx(i+1,k) =a_fqx(i+1,k) +a_Tmpv1
   a_fqx(i,k) =a_fqx(i,k) -a_Tmpv1
   ENDDO
   ENDDO

   IF( degrade_xe ) THEN

   DO i =i_end+1, i_end_f+1, -1

   IF( i == ide-2 ) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)
   Tmpv001 =flux4(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux4(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   ENDDO

   ENDIF

   IF( i == ide-1 ) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*(field(i,k,j) +field(i-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   ENDDO

   ENDIF
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO i =i_start_f-1, i_start, -1

   IF(i == ids+2) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)
   Tmpv001 =flux4(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux4(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   ENDDO

   END IF

   IF(i == ids+1) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*(field(i,k,j) +field(i-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   ENDDO

   ENDIF
   ENDDO

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   vel =ru(i,k,j)
   Tmpv001 =flux6(field(i-3,k,j),field(i-2,k,j),field(i-1,k,j),field(i,k,j)  &
   ,field(i+1,k,j),field(i+2,k,j),vel)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+2,k,j) =a_field(i+2,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,j)  &
   ,0.0,field(i-1,k,j),0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),1.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-3,k,j) =a_field(i-3,k,j) +Diff_flux6(field(i-3,k,j),1.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

!START ADJOINT OF j_loop_y_flux_6
!ADDED BY WALLS

      ktf=MIN(kte,kde-1)
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      j_start_f = j_start
      j_end_f   = j_end+1

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+3
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-3
      ENDIF

      IF(config_flags%polar) j_end = MIN(jte,jde-1)

     jp1 = 2
     jp0 = 1

   DO j =j_end+1, j_start, -1
   jp1=WALLS_jp16(j)
   jp0=WALLS_jp06(j)

   IF( config_flags%polar .AND. (j == jds+1) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) -msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE IF( config_flags%polar .AND. (j == jde) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) +msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE

   IF(j > j_start) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) +a_Tmpv1
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) -a_Tmpv1
   ENDDO
   ENDDO

   ENDIF
!ABOVE ARE MOVED FROM ABOVE LINES

   END IF

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   Tmpv001 =flux6(field(i,k,j-3),field(i,k,j-2),field(i,k,j-1),field(i,k,j)  &
   ,field(i,k,j+1),field(i,k,j+2),vel)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+2) =a_field(i,k,j+2) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-2)  &
   ,0.0,field(i,k,j-1),0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),1.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-3) =a_field(i,k,j-3) +Diff_flux6(field(i,k,j-3),1.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE IF( j == jds+2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   Tmpv001 =flux4(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux4(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE IF( j == jde-2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   Tmpv001 =flux4(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux4(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   ELSE IF( horz_order == 5 ) THEN
   degrade_xs = .true.
   degrade_xe = .true.
   degrade_ys = .true.
   degrade_ye = .true.

   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xs .or. &
       (its > ids+3)                ) degrade_xs = .false.
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xe .or. &
       (ite < ide-3)                ) degrade_xe = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ys .or. &
       (jts > jds+3)                ) degrade_ys = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ye .or. &
       (jte < jde-4)                ) degrade_ye = .false.

      ktf=MIN(kte,kde-1)
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      j_start_f = j_start
      j_end_f   = j_end+1

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+3
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-3
      ENDIF

      IF(config_flags%polar) j_end = MIN(jte,jde-1)

     jp1 = 2
     jp0 = 1

      i_start = its
      i_end   = MIN(ite,ide-1)

      j_start = jts
      j_end   = MIN(jte,jde-1)

      i_start_f = i_start
      i_end_f   = i_end+1

      IF(degrade_xs) then
        i_start = MAX(ids+1,its)
        i_start_f = MIN(i_start+2,ids+3)
      ELSE
        i_start =  i_start - 3
        i_start_f = i_start_f - 2
      ENDIF

      IF(degrade_xe) then
        i_end = MIN(ide-2,ite)
        i_end_f = ide-3
      ELSE
        i_end = i_end + 3
        i_end_f = i_end_f + 2
      ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =msftx(i,j)*rdx*a_tendency(i,k,j)
   a_fqx(i+1,k) =a_fqx(i+1,k) -a_Tmpv1
   a_fqx(i,k) =a_fqx(i,k) +a_Tmpv1
   ENDDO
   ENDDO

   IF( degrade_xe ) THEN

   DO i =i_end+1, i_end_f+1, -1

   IF( i == ide-2 ) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_vel =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   ENDDO

   ENDIF

   IF( i == ide-1 ) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*(field(i,k,j) +field(i-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   ENDDO

   ENDIF
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO i =i_start_f-1, i_start, -1

   IF(i == ids+2) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_vel =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   ENDDO

   END IF

   IF(i == ids+1) THEN

   DO k =ktf, kts, -1
   Tmpv001 =field(i,k,j) +field(i-1,k,j)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv001*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   ENDDO

   ENDIF
   ENDDO

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   vel =ru(i,k,j)
   Tmpv001 =flux5(field(i-3,k,j),field(i-2,k,j),field(i-1,k,j),field(i,k,j)  &
   ,field(i+1,k,j),field(i+2,k,j),vel)

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+2,k,j) =a_field(i+2,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,j)  &
   ,0.0,field(i-1,k,j),0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),1.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-3,k,j) =a_field(i-3,k,j) +Diff_flux5(field(i-3,k,j),1.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   ENDDO
   ENDDO
   ENDDO

      ktf=MIN(kte,kde-1)
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      j_start_f = j_start
      j_end_f   = j_end+1

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+3
      ELSE
        j_start = j_start - 3
        j_start_f = j_start_f - 2
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-3
      ELSE
        j_end = j_end + 3
        j_end_f = j_end_f + 3
      ENDIF

      IF(config_flags%polar) j_end = MIN(jte,jde-1)

     jp1 = 2
     jp0 = 1

   DO j =j_end+1, j_start, -1
   jp1=WALLS_jp15(j)
   jp0=WALLS_jp05(j)

   IF( config_flags%polar .AND. (j == jds+1) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) -msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE IF( config_flags%polar .AND. (j == jde) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) +msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE

   IF(j > j_start) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =-msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) +a_Tmpv2
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) -a_Tmpv2
   ENDDO
   ENDDO

   ENDIF
   END IF

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   Tmpv001 =flux5(field(i,k,j-3),field(i,k,j-2),field(i,k,j-1),field(i,k,j)  &
   ,field(i,k,j+1),field(i,k,j+2),vel)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_vel =Tmpv001*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+2) =a_field(i,k,j+2) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-2)  &
   ,0.0,field(i,k,j-1),0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),1.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-3) =a_field(i,k,j-3) +Diff_flux5(field(i,k,j-3),1.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   Tmpv001 =field(i,k,j) +field(i,k,j-1)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv001*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE IF( j == jds+2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_vel =flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE IF( j == jde-2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_vel =flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   ELSE IF( horz_order == 4 ) THEN

      degrade_xs = .true.
      degrade_xe = .true.
      degrade_ys = .true.
      degrade_ye = .true.
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+2)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-2)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+2)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-3)                ) degrade_ye = .false.

      ktf=MIN(kte,kde-1)
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         i_start_f = i_start
         i_end_f   = i_end+1
      IF(degrade_xs) then

           i_start = ids+1
           i_start_f = i_start+1
         ENDIF

      IF(degrade_xe) then

           i_end = ide-2
           i_end_f = ide-2
         ENDIF

!ADDED BY WALLS
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_ys) then

           j_start = jds+1
           j_start_f = j_start+1
         ENDIF
      IF(degrade_ye) then

           j_end = jde-2
           j_end_f = jde-2
         ENDIF
      IF(config_flags%polar) j_end = MIN(jte,jde-1)

       jp1 = 2
       jp0 = 1

   DO j =j_end+1, j_start, -1
   jp1=WALLS_jp14(j)
   jp0=WALLS_jp04(j)

   IF( config_flags%polar .AND. (j == jds+1) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) -msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE IF( config_flags%polar .AND. (j == jde) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) +msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE

   IF( j > j_start ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) +a_Tmpv1
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) -a_Tmpv1
   ENDDO
   ENDDO

   END IF
   END IF

   IF((j < j_start_f) .and. degrade_ys) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j_start) =a_rv(i,k,j_start) +0.5*(field(i,k,j_start) +field(i,k,j_start-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j_start)*a_Tmpv2
   a_field(i,k,j_start) =a_field(i,k,j_start) +a_Tmpv1
   a_field(i,k,j_start-1) =a_field(i,k,j_start-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE IF((j > j_end_f) .and. degrade_ye) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   Tmpv001 =flux4(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),rv(i,k,j))

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +Tmpv001*a_Tmpv2
   a_Tmpv1 =rv(i,k,j)*a_Tmpv2
   a_rv(i,k,j) =a_rv(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,rv(i,k,j),1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,rv(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,rv(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,rv(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux4(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,rv(i,k,j),0.0)*a_Tmpv1

   ENDDO
   ENDDO

   END IF
   ENDDO

   IF(config_flags%polar) THEN

   END IF

   IF(degrade_ye) THEN

   ENDIF

   IF(degrade_ys) THEN

   ENDIF
!ADDED BY WALLS
      ktf=MIN(kte,kde-1)
         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)
         i_start_f = i_start
         i_end_f   = i_end+1
      IF(degrade_xs) then

           i_start = ids+1
           i_start_f = i_start+1
         ENDIF
      IF(degrade_xe) then

           i_end = ide-2
           i_end_f = ide-2
         ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv3 =a_tendency(i,k,j)
   a_Tmpv2 =-a_Tmpv3
   a_Tmpv1 =msftx(i,j)*rdx*a_Tmpv2
   a_fqx(i+1,k) =a_fqx(i+1,k) +a_Tmpv1
   a_fqx(i,k) =a_fqx(i,k) -a_Tmpv1

   ENDDO
   ENDDO

   IF( degrade_xe ) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i_end+1,k)
   a_fqx(i_end+1,k) =0.0
   a_ru(i_end+1,k,j) =a_ru(i_end+1,k,j) +0.5*(field(i_end+1,k,j) +field(i_end,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*ru(i_end+1,k,j)*a_Tmpv2
   a_field(i_end+1,k,j) =a_field(i_end+1,k,j) +a_Tmpv1
   a_field(i_end,k,j) =a_field(i_end,k,j) +a_Tmpv1
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i_start,k)
   a_fqx(i_start,k) =0.0
   a_ru(i_start,k,j) =a_ru(i_start,k,j) +0.5*(field(i_start,k,j) +field(i_start-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*ru(i_start,k,j)*a_Tmpv2
   a_field(i_start,k,j) =a_field(i_start,k,j) +a_Tmpv1
   a_field(i_start-1,k,j) =a_field(i_start-1,k,j) +a_Tmpv1
   ENDDO

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   Tmpv001 =flux4(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),ru(i,k,j))

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +Tmpv001*a_Tmpv2
   a_Tmpv1 =ru(i,k,j)*a_Tmpv2
   a_ru(i,k,j) =a_ru(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,ru(i,k,j),1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,ru(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,ru(i,k,j),0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,ru(i,k,j),0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux4(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,ru(i,k,j),0.0)*a_Tmpv1

   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-3)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+2)                ) THEN

   END IF

   ELSE IF( horz_order == 3 ) THEN

!ADDED BY WALLS
   degrade_xs = .true.
   degrade_xe = .true.
   degrade_ys = .true.
   degrade_ye = .true.

   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xs .or. &
       (its > ids+2)                ) degrade_xs = .false.
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xe .or. &
       (ite < ide-2)                ) degrade_xe = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ys .or. &
       (jts > jds+2)                ) degrade_ys = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ye .or. &
       (jte < jde-3)                ) degrade_ye = .false.

!  begin flux computations
!  start with x flux divergence

   ktf=MIN(kte,kde-1)

      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      i_start_f = i_start
      i_end_f   = i_end+1

      IF(degrade_xs) then
        i_start = ids+1
        i_start_f = i_start+1
      ENDIF

      IF(degrade_xe) then
        i_end = ide-2
        i_end_f = ide-2
      ENDIF
!ABOVE IS ADDED BY WALLS

!ADDED BY WALLS
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      j_start_f = j_start
      j_end_f   = j_end+1

      IF(degrade_ys) then
        j_start = jds+1
        j_start_f = j_start+1
      ENDIF

      IF(degrade_ye) then
        j_end = jde-2
        j_end_f = jde-2
      ENDIF

      IF(config_flags%polar) j_end = MIN(jte,jde-1)

    jp1 = 2
    jp0 = 1

!ABOVE IS ADDED BY WALLS

   DO j =j_end+1, j_start, -1
   jp1=WALLS_jp13(j)
   jp0=WALLS_jp03(j)

   IF( config_flags%polar .AND. (j == jds+1) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) -msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   ENDDO
   ENDDO

   ELSE IF( config_flags%polar .AND. (j == jde) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =a_tendency(i,k,j-1)
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) +msftx(i,j-1)*rdy*a_tendency(i,k,j-1)

   ENDDO
   ENDDO

   ELSE

   IF( j > j_start ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-msftx(i,j-1)*rdy*a_tendency(i,k,j-1)
   a_fqy(i,k,jp1) =a_fqy(i,k,jp1) +a_Tmpv1
   a_fqy(i,k,jp0) =a_fqy(i,k,jp0) -a_Tmpv1
   ENDDO
   ENDDO

   END IF
   END IF

   IF((j < j_start_f) .and. degrade_ys) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j_start) =a_rv(i,k,j_start) +0.5*(field(i,k,j_start) +field(i,k,j_start-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j_start)*a_Tmpv2
   a_field(i,k,j_start) =a_field(i,k,j_start) +a_Tmpv1
   a_field(i,k,j_start-1) =a_field(i,k,j_start-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE IF((j > j_end_f) .and. degrade_ye) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   ENDDO
   ENDDO

   ELSE

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   Tmpv001 =flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),rv(i,k,j))

   a_Tmpv2 =a_fqy(i,k,jp1)
   a_fqy(i,k,jp1) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +Tmpv001*a_Tmpv2
   a_Tmpv1 =rv(i,k,j)*a_Tmpv2
   a_rv(i,k,j) =a_rv(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,rv(i,k,j),1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,rv(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,rv(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,rv(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,rv(i,k,j),0.0)*a_Tmpv1

   ENDDO
   ENDDO

   END IF
   ENDDO

   IF(config_flags%polar) THEN

   END IF

   IF(degrade_ye) THEN

   ENDIF

   IF(degrade_ys) THEN

   ENDIF

!ADDED BY WALLS
      ktf=MIN(kte,kde-1)
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      i_start_f = i_start
      i_end_f   = i_end+1

      IF(degrade_xs) then
        i_start = ids+1
        i_start_f = i_start+1
      ENDIF

      IF(degrade_xe) then
        i_end = ide-2
        i_end_f = ide-2
      ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-msftx(i,j)*rdx*a_tendency(i,k,j)
   a_fqx(i+1,k) =a_fqx(i+1,k) +a_Tmpv1
   a_fqx(i,k) =a_fqx(i,k) -a_Tmpv1
   ENDDO
   ENDDO

   IF( degrade_xe ) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i_end+1,k)
   a_fqx(i_end+1,k) =0.0
   a_ru(i_end+1,k,j) =a_ru(i_end+1,k,j) +0.5*(field(i_end+1,k,j) +field(i_end,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*ru(i_end+1,k,j)*a_Tmpv2
   a_field(i_end+1,k,j) =a_field(i_end+1,k,j) +a_Tmpv1
   a_field(i_end,k,j) =a_field(i_end,k,j) +a_Tmpv1
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO k =ktf, kts, -1
   a_Tmpv2 =a_fqx(i_start,k)
   a_fqx(i_start,k) =0.0
   a_ru(i_start,k,j) =a_ru(i_start,k,j) +0.5*(field(i_start,k,j) +field(i_start-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*ru(i_start,k,j)*a_Tmpv2
   a_field(i_start,k,j) =a_field(i_start,k,j) +a_Tmpv1
   a_field(i_start-1,k,j) =a_field(i_start-1,k,j) +a_Tmpv1
   ENDDO

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   Tmpv001 =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),ru(i,k,j))

   a_Tmpv2 =a_fqx(i,k)
   a_fqx(i,k) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +Tmpv001*a_Tmpv2
   a_Tmpv1 =ru(i,k,j)*a_Tmpv2
   a_ru(i,k,j) =a_ru(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,ru(i,k,j),1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,ru(i,k,j),0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,ru(i,k,j),0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,ru(i,k,j),0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,ru(i,k,j),0.0)*a_Tmpv1

   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-3)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+2)                ) THEN

   END IF

   ELSE IF( horz_order == 2 ) THEN

!ADDED BY WALLS
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      IF ( .NOT. config_flags%periodic_x ) THEN
        IF ( config_flags%open_xs .or. specified ) i_start = MAX(ids+1,its)
        IF ( config_flags%open_xe .or. specified ) i_end   = MIN(ide-2,ite)
      ENDIF

!ADDED BY WALLS
      i_start = its
      i_end   = MIN(ite,ide-1)

      ! Polar boundary conditions are like open or specified
      IF ( config_flags%open_ys .or. specified .or. config_flags%polar ) j_start = MAX(jds+1,jts)
      IF ( config_flags%open_ye .or. specified .or. config_flags%polar ) j_end   = MIN(jde-2,jte)

   IF(config_flags%polar) THEN

   IF(jts == jds) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   mrdy =msftx(i,jds)*rdy

   a_Tmpv4 =a_tendency(i,k,jds)
   a_tendency(i,k,jds) =0.0
   a_tendency(i,k,jds) =a_tendency(i,k,jds) +a_Tmpv4
   a_Tmpv3 =-a_Tmpv4
   a_Tmpv1 =(field(i,k,jds+1) +field(i,k,jds))*a_Tmpv3
   a_Tmpv2 =mrdy*0.5*rv(i,k,jds+1)*a_Tmpv3
   a_field(i,k,jds+1) =a_field(i,k,jds+1) +a_Tmpv2
   a_field(i,k,jds) =a_field(i,k,jds) +a_Tmpv2
   a_rv(i,k,jds+1) =a_rv(i,k,jds+1) +mrdy*0.5*a_Tmpv1

   ENDDO
   ENDDO

   END IF

   IF(jte == jde) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   mrdy =msftx(i,jde-1)*rdy

   a_Tmpv3 =a_tendency(i,k,jde-1)
   a_Tmpv1 =(field(i,k,jde-1) +field(i,k,jde-2))*a_Tmpv3
   a_Tmpv2 =mrdy*0.5*rv(i,k,jde-1)*a_Tmpv3
   a_field(i,k,jde-1) =a_field(i,k,jde-1) +a_Tmpv2
   a_field(i,k,jde-2) =a_field(i,k,jde-2) +a_Tmpv2
   a_rv(i,k,jde-1) =a_rv(i,k,jde-1) +mrdy*0.5*a_Tmpv1

   ENDDO
   ENDDO

   END IF

   END IF
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   mrdy =msftx(i,j)*rdy

   a_Tmpv7 =a_tendency(i,k,j)
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =mrdy*0.5*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =-a_Tmpv5
   a_rv(i,k,j) =a_rv(i,k,j) +(field(i,k,j) +field(i,k,j-1))*a_Tmpv4
   a_Tmpv3 =rv(i,k,j)*a_Tmpv4
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv3
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv3
   a_rv(i,k,j+1) =a_rv(i,k,j+1) +(field(i,k,j+1) +field(i,k,j))*a_Tmpv2
   a_Tmpv1 =rv(i,k,j+1)*a_Tmpv2
   a_field(i,k,j+1) =a_field(i,k,j+1) +a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1

   ENDDO
   ENDDO
   ENDDO

   IF( config_flags%open_ye .or. specified .or. config_flags%polar ) THEN

   END IF

   IF( config_flags%open_ys .or. specified .or. config_flags%polar ) THEN

   END IF
!ADDED BY WALLS
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

      IF ( .NOT. config_flags%periodic_x ) THEN
        IF ( config_flags%open_xs .or. specified ) i_start = MAX(ids+1,its)
        IF ( config_flags%open_xe .or. specified ) i_end   = MIN(ide-2,ite)
      ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   mrdx =msftx(i,j)*rdx

   a_Tmpv7 =a_tendency(i,k,j)
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =mrdx*0.5*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =-a_Tmpv5
   a_ru(i,k,j) =a_ru(i,k,j) +(field(i,k,j) +field(i-1,k,j))*a_Tmpv4
   a_Tmpv3 =ru(i,k,j)*a_Tmpv4
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv3
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv3
   a_ru(i+1,k,j) =a_ru(i+1,k,j) +(field(i+1,k,j) +field(i,k,j))*a_Tmpv2
   a_Tmpv1 =ru(i+1,k,j)*a_Tmpv2
   a_field(i+1,k,j) =a_field(i+1,k,j) +a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1

   ENDDO
   ENDDO
   ENDDO

   ELSE IF( horz_order == 0 ) THEN

   ELSE

   ENDIF

   END SUBROUTINE a_advect_scalar

!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.5 (r3785) - 22 Mar 2011 18:35
!
!  Differentiation of advect_w in reverse (adjoint) mode:
!   gradient     of useful results: rom tendency w ru rv w_old
!   with respect to varying inputs: rom tendency w ru rv w_old
!   RW status of diff variables: rom:incr tendency:in-out w:incr
!                ru:incr rv:incr w_old:incr
SUBROUTINE A_ADVECT_W(w, wb, w_old, w_oldb, tendency, tendencyb, ru, rub&
&  , rv, rvb, rom, romb, mut, time_step, config_flags, msfux, msfuy, &
&  msfvx, msfvy, msftx, msfty, fzm, fzp, rdx, rdy, rdzu, ids, ide, jds, &
&  jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, &
&  kte)
  IMPLICIT NONE
! Input data
  TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
  INTEGER, INTENT(IN) :: ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&  jme, kms, kme, its, ite, jts, jte, kts, kte
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: w, w_old, ru&
&  , rv, rom
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: wb, w_oldb, rub, rvb, &
&  romb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: mut
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(INOUT) :: tendency
  REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: tendencyb
  REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: msfux, msfuy, msfvx, &
&  msfvy, msftx, msfty
  REAL, DIMENSION(kms:kme), INTENT(IN) :: fzm, fzp, rdzu
  REAL, INTENT(IN) :: rdx, rdy
  INTEGER, INTENT(IN) :: time_step
! Local data
  INTEGER :: i, j, k, itf, jtf, ktf
  INTEGER :: i_start, i_end, j_start, j_end
  INTEGER :: i_start_f, i_end_f, j_start_f, j_end_f
  INTEGER :: jmin, jmax, jp, jm, imin, imax
  REAL :: mrdx, mrdy, ub, vb, uw, vw
  REAL :: ubb, vbb, uwb, vwb
  REAL, DIMENSION(its:ite, kts:kte) :: vflux
  REAL, DIMENSION(its:ite, kts:kte) :: vfluxb
  INTEGER :: horz_order, vert_order
  REAL, DIMENSION(its:ite + 1, kts:kte) :: fqx
  REAL, DIMENSION(its:ite+1, kts:kte) :: fqxb
  REAL, DIMENSION(its:ite, kts:kte, 2) :: fqy
  REAL, DIMENSION(its:ite, kts:kte, 2) :: fqyb
  LOGICAL :: degrade_xs, degrade_ys
  LOGICAL :: degrade_xe, degrade_ye
  INTEGER :: jp1, jp0, jtmp
! definition of flux operators, 3rd, 4th, 5th or 6th order
  REAL :: flux3, flux4, flux5, flux6
  REAL :: q_im3, q_im2, q_im1, q_i, q_ip1, q_ip2, ua, vel
  REAL :: velb
  LOGICAL :: specified
  EXTERNAL WRF_ERROR_FATAL
  INTEGER :: ad_from
  INTEGER :: ad_to
  INTEGER :: ad_from0
  INTEGER :: ad_to0
  INTEGER :: ad_from1
  INTEGER :: ad_to1
  INTEGER :: ad_from2
  INTEGER :: ad_to2
  INTEGER :: ad_from3
  INTEGER :: ad_to3
  INTEGER :: ad_from4
  INTEGER :: ad_to4
  INTEGER :: ad_from5
  INTEGER :: ad_to5
  INTEGER :: ad_from6
  INTEGER :: ad_to6
  INTEGER :: ad_from7
  INTEGER :: ad_to7
  INTEGER :: ad_from8
  INTEGER :: ad_to8
  INTEGER :: ad_from9
  INTEGER :: ad_to9
  INTEGER :: ad_from10
  INTEGER :: ad_to10
  INTEGER :: ad_from11
  INTEGER :: ad_to11
  INTEGER :: branch
  INTEGER :: ad_from12
  INTEGER :: ad_to12
  INTEGER :: ad_from13
  INTEGER :: ad_to13
  INTEGER :: ad_from14
  INTEGER :: ad_to14
  INTEGER :: ad_from15
  INTEGER :: ad_to15
  INTEGER :: ad_from16
  INTEGER :: ad_to16
  INTEGER :: ad_from17
  INTEGER :: ad_to17
  INTEGER :: ad_from18
  INTEGER :: ad_to18
  INTEGER :: ad_from19
  INTEGER :: ad_to19
  INTEGER :: ad_from20
  INTEGER :: ad_to20
  INTEGER :: ad_from21
  INTEGER :: ad_to21
  INTEGER :: ad_from22
  INTEGER :: ad_to22
  INTEGER :: ad_from23
  INTEGER :: ad_to23
  INTEGER :: ad_from24
  INTEGER :: ad_to24
  INTEGER :: ad_from25
  INTEGER :: ad_to25
  INTEGER :: ad_from26
  INTEGER :: ad_to26
  INTEGER :: ad_from27
  INTEGER :: ad_to27
  INTEGER :: ad_from28
  INTEGER :: ad_to28
  INTEGER :: ad_from29
  INTEGER :: ad_to29
  INTEGER :: ad_from30
  INTEGER :: ad_to30
  INTEGER :: ad_from31
  INTEGER :: ad_to31
  INTEGER :: ad_from32
  INTEGER :: ad_to32
  INTEGER :: ad_from33
  INTEGER :: ad_to33
  INTEGER :: ad_from34
  INTEGER :: ad_to34
  INTEGER :: ad_from35
  INTEGER :: ad_to35
  INTEGER :: ad_from36
  INTEGER :: ad_to36
  INTEGER :: ad_from37
  INTEGER :: ad_to37
  INTEGER :: ad_from38
  INTEGER :: ad_to38
  INTEGER :: ad_from39
  INTEGER :: ad_to39
  INTEGER :: ad_from40
  INTEGER :: ad_to40
  INTEGER :: ad_from41
  INTEGER :: ad_to41
  INTEGER :: ad_from42
  INTEGER :: ad_to42
  INTEGER :: ad_from43
  INTEGER :: ad_to43
  INTEGER :: ad_from44
  INTEGER :: ad_to44
  INTEGER :: ad_from45
  INTEGER :: ad_to45
  INTEGER :: ad_from46
  INTEGER :: ad_to46
  INTEGER :: ad_from47
  INTEGER :: ad_to47
  INTEGER :: ad_from48
  INTEGER :: ad_to48
  INTEGER :: ad_from49
  INTEGER :: ad_to49
  INTEGER :: ad_from50
  INTEGER :: ad_to50
  INTEGER :: ad_from51
  INTEGER :: ad_to51
  INTEGER :: ad_from52
  INTEGER :: ad_to52
  INTEGER :: ad_from53
  INTEGER :: ad_to53
  INTEGER :: ad_from54
  INTEGER :: ad_to54
  INTEGER :: ad_from55
  INTEGER :: ad_to55
  INTEGER :: ad_from56
  INTEGER :: ad_to56
  INTEGER :: ad_from57
  INTEGER :: ad_to57
  INTEGER :: ad_from58
  INTEGER :: ad_to58
  INTEGER :: ad_from59
  INTEGER :: ad_to59
  INTEGER :: ad_from60
  INTEGER :: ad_to60
  INTEGER :: ad_from61
  INTEGER :: ad_to61
  INTEGER :: ad_from62
  INTEGER :: ad_to62
  INTEGER :: ad_from63
  INTEGER :: ad_to63
  INTEGER :: ad_from64
  INTEGER :: ad_to64
  INTEGER :: ad_from65
  INTEGER :: ad_to65
  INTEGER :: ad_from66
  INTEGER :: ad_to66
  INTEGER :: ad_from67
  INTEGER :: ad_to67
  INTEGER :: ad_from68
  INTEGER :: ad_to68
  INTEGER :: ad_from69
  INTEGER :: ad_to69
  INTEGER :: ad_from70
  INTEGER :: ad_to70
  INTEGER :: ad_from71
  INTEGER :: ad_to71
  INTEGER :: ad_from72
  INTEGER :: ad_to72
  INTEGER :: ad_from73
  INTEGER :: ad_to73
  INTEGER :: ad_from74
  INTEGER :: ad_to74
  REAL :: temp3
  REAL :: temp29
  REAL :: temp63b93
  REAL :: temp79b3
  REAL :: temp2
  INTEGER :: temp28
  REAL :: temp63b92
  REAL :: temp79b2
  REAL :: temp1
  REAL :: temp27
  REAL :: temp63b91
  REAL :: temp79b1
  INTEGER :: temp0
  REAL :: temp26
  REAL :: temp63b90
  REAL :: temp63b104
  REAL :: temp79b0
  REAL :: temp7b
  REAL :: temp25
  REAL :: temp63b103
  INTEGER :: temp24
  REAL :: temp63b102
  REAL :: temp23
  REAL :: temp63b101
  REAL :: temp22
  REAL :: temp59
  REAL :: temp63b100
  REAL :: temp21
  REAL :: temp58
  INTEGER :: temp20
  REAL :: temp57
  REAL :: temp35b1
  INTEGER :: temp56
  REAL :: temp35b0
  REAL :: temp55
  REAL :: temp63b29
  REAL :: temp54
  REAL :: temp63b28
  REAL :: temp53
  REAL :: temp63b27
  REAL :: temp67b3
  INTEGER :: temp52
  REAL :: temp63b26
  REAL :: temp67b2
  REAL :: temp51
  REAL :: temp63b25
  REAL :: temp67b1
  REAL :: temp50
  REAL :: temp63b24
  REAL :: temp67b0
  REAL :: temp19b
  REAL :: temp63b23
  REAL :: temp27b
  REAL :: temp63b22
  REAL :: temp63b59
  REAL :: temp35b
  REAL :: temp63b21
  REAL :: temp63b58
  REAL :: tempb1
  REAL :: temp43b
  REAL :: temp47b19
  REAL :: temp55b9
  REAL :: temp63b20
  REAL :: temp63b57
  REAL :: tempb0
  REAL :: temp47b18
  REAL :: temp51b
  REAL :: temp55b8
  REAL :: temp63b56
  REAL :: temp47b17
  REAL :: temp55b7
  REAL :: temp63b55
  INTRINSIC MAX
  REAL :: temp23b1
  REAL :: temp47b16
  REAL :: temp55b6
  REAL :: temp63b54
  REAL :: temp23b0
  REAL :: temp47b15
  REAL :: temp55b5
  REAL :: temp63b53
  REAL :: temp7b5
  REAL :: temp47b14
  REAL :: temp55b4
  REAL :: temp63b52
  REAL :: temp63b89
  INTRINSIC SIGN
  REAL :: temp7b4
  REAL :: temp47b13
  REAL :: temp55b3
  REAL :: temp63b51
  REAL :: temp63b88
  REAL :: temp7b3
  REAL :: temp47b12
  REAL :: temp55b2
  REAL :: temp63b50
  REAL :: temp63b87
  REAL :: temp3b
  REAL :: temp7b2
  REAL :: temp47b11
  REAL :: temp55b1
  REAL :: temp63b86
  REAL :: temp7b1
  REAL :: temp47b10
  REAL :: temp55b0
  REAL :: temp63b85
  REAL :: temp7b0
  REAL :: temp63b84
  REAL :: temp19
  REAL :: temp63b83
  REAL :: temp18
  REAL :: temp63b82
  REAL :: temp17
  REAL :: temp63b81
  INTEGER :: temp16
  REAL :: temp63b80
  REAL :: temp15
  REAL :: temp14
  REAL :: temp11b1
  REAL :: temp13
  REAL :: temp11b0
  INTEGER :: temp12
  REAL :: temp49
  REAL :: temp11
  INTEGER :: temp48
  REAL :: temp75b8
  REAL :: temp10
  REAL :: temp47
  REAL :: temp75b7
  REAL :: temp15b
  REAL :: temp46
  REAL :: temp43b1
  REAL :: temp75b6
  REAL :: temp23b
  REAL :: temp45
  REAL :: temp43b0
  REAL :: temp63b19
  REAL :: temp75b5
  REAL :: temp31b
  INTEGER :: temp44
  REAL :: temp63b18
  REAL :: temp75b4
  REAL :: temp43
  REAL :: temp63b17
  REAL :: temp75b3
  REAL :: temp42
  REAL :: temp63b16
  REAL :: temp75b2
  REAL :: temp41
  REAL :: temp63b15
  REAL :: temp75b1
  REAL :: temp78
  INTEGER :: temp40
  REAL :: temp63b14
  REAL :: temp75b0
  REAL :: temp77
  REAL :: temp19b1
  REAL :: temp63b13
  INTEGER :: temp76
  REAL :: temp19b0
  REAL :: temp63b12
  REAL :: temp63b49
  REAL :: temp75
  REAL :: temp31b5
  REAL :: temp63b11
  REAL :: temp63b48
  REAL :: temp74
  REAL :: temp31b4
  REAL :: temp63b9
  REAL :: temp63b10
  REAL :: temp63b47
  REAL :: temp73
  REAL :: temp79b
  REAL :: temp31b3
  REAL :: temp63b8
  REAL :: temp63b46
  INTEGER :: temp72
  REAL :: tempb
  REAL :: temp31b2
  REAL :: temp63b7
  REAL :: temp63b45
  REAL :: temp71
  REAL :: temp31b1
  REAL :: temp63b6
  REAL :: temp63b44
  REAL :: temp70
  REAL :: temp31b0
  REAL :: temp63b5
  REAL :: temp63b43
  REAL :: temp63b4
  REAL :: temp63b42
  REAL :: temp63b79
  REAL :: temp63b3
  REAL :: temp63b41
  REAL :: temp63b78
  REAL :: temp63b2
  REAL :: temp63b40
  REAL :: temp63b77
  REAL :: temp63b1
  REAL :: temp63b76
  REAL :: temp63b0
  REAL :: temp63b75
  REAL :: temp63b74
  REAL :: temp39b5
  REAL :: temp63b73
  REAL :: temp39b4
  REAL :: temp63b72
  REAL :: temp39b3
  REAL :: temp63b71
  REAL :: temp11b
  REAL :: temp39b2
  REAL :: temp63b70
  REAL :: temp39b1
  REAL :: temp39b0
  REAL :: temp39
  REAL :: temp38
  REAL :: temp37
  INTEGER :: temp36
  REAL :: temp51b1
  REAL :: temp3b1
  REAL :: temp35
  REAL :: temp51b0
  REAL :: temp59b
  REAL :: temp3b0
  REAL :: temp34
  REAL :: temp67b
  REAL :: temp33
  REAL :: temp75b
  INTEGER :: temp32
  REAL :: temp69
  REAL :: temp31
  INTEGER :: temp68
  REAL :: temp30
  REAL :: temp67
  REAL :: temp27b1
  REAL :: temp66
  REAL :: temp27b0
  REAL :: temp63b39
  REAL :: temp65
  REAL :: temp63b38
  INTEGER :: temp64
  REAL :: temp63b37
  REAL :: temp63
  REAL :: temp55b17
  REAL :: temp62
  REAL :: temp63b36
  REAL :: temp55b16
  REAL :: temp61
  REAL :: temp59b1
  REAL :: temp63b35
  INTRINSIC MIN
  REAL :: temp55b15
  INTEGER :: temp60
  REAL :: temp59b0
  REAL :: temp63b34
  REAL :: temp55b14
  REAL :: temp63b33
  REAL :: temp55b13
  REAL :: temp63b32
  REAL :: temp63b69
  REAL :: temp15b5
  REAL :: temp55b12
  REAL :: temp63b31
  REAL :: temp63b68
  REAL :: temp15b4
  REAL :: temp47b9
  REAL :: temp55b11
  REAL :: temp63b30
  REAL :: temp63b67
  REAL :: temp15b3
  REAL :: temp47b8
  REAL :: temp55b10
  REAL :: temp63b66
  REAL :: temp71b1
  REAL :: temp
  REAL :: temp15b2
  REAL :: temp47b7
  REAL :: temp63b65
  REAL :: temp71b0
  REAL :: temp15b1
  REAL :: temp47b6
  REAL :: temp63b64
  REAL :: temp15b0
  REAL :: temp47b5
  REAL :: temp63b63
  REAL :: temp9
  REAL :: temp47b4
  REAL :: temp63b62
  REAL :: temp63b99
  INTEGER :: temp8
  REAL :: temp39b
  REAL :: temp47b3
  REAL :: temp63b61
  REAL :: temp63b98
  REAL :: temp7
  REAL :: temp47b
  REAL :: temp47b2
  REAL :: temp63b60
  REAL :: temp63b97
  REAL :: temp6
  REAL :: temp47b1
  REAL :: temp47b21
  REAL :: temp55b
  REAL :: temp63b96
  REAL :: temp5
  REAL :: temp47b0
  REAL :: temp47b20
  REAL :: temp63b
  REAL :: temp63b95
  INTEGER :: temp4
  REAL :: temp63b94
  REAL :: temp71b
  REAL :: temp79b4
  specified = .false.
  IF (config_flags%specified .OR. config_flags%nested) specified = &
&      .true.
  IF (kte .GT. kde - 1) THEN
    ktf = kde - 1
  ELSE
    ktf = kte
  END IF
  horz_order = config_flags%h_sca_adv_order
  vert_order = config_flags%v_sca_adv_order
!  here is the choice of flux operators
!  begin with horizontal flux divergence
  IF (horz_order .EQ. 6) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 3) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 3) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 3) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 4) degrade_ye = .false.
!--------------- y - advection first
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      IF (jts .LT. jds + 1) THEN
        j_start = jds + 1
      ELSE
        j_start = jts
      END IF
      j_start_f = jds + 3
    END IF
    IF (degrade_ye) THEN
      IF (jte .GT. jde - 2) THEN
        j_end = jde - 2
      ELSE
        j_end = jte
      END IF
      j_end_f = jde - 3
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
!  compute fluxes, 5th or 6th order
    jp1 = 2
    jp0 = 1
    ad_from63 = j_start
j_loop_y_flux_6:DO j=ad_from63,j_end+1
      IF (j .GE. j_start_f .AND. j .LE. j_end_f) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from50 = i_start
          DO i=ad_from50,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from50)
        END DO
        k = ktf + 1
        ad_from51 = i_start
        DO i=ad_from51,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from51)
        CALL PUSHCONTROL3B(0)
      ELSE IF (j .EQ. jds + 1) THEN
        CALL PUSHINTEGER4(k)
! 2nd order flux next to south boundary
        DO k=kts+1,ktf
          ad_from52 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from52)
        END DO
        k = ktf + 1
        ad_from53 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from53)
        CALL PUSHCONTROL3B(1)
      ELSE IF (j .EQ. jds + 2) THEN
        CALL PUSHINTEGER4(k)
! third of 4th order flux 2 in from south boundary
        DO k=kts+1,ktf
          ad_from54 = i_start
          DO i=ad_from54,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from54)
        END DO
        k = ktf + 1
        ad_from55 = i_start
        DO i=ad_from55,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from55)
        CALL PUSHCONTROL3B(2)
      ELSE IF (j .EQ. jde - 1) THEN
        CALL PUSHINTEGER4(k)
! 2nd order flux next to north boundary
        DO k=kts+1,ktf
          ad_from56 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from56)
        END DO
        k = ktf + 1
        ad_from57 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from57)
        CALL PUSHCONTROL3B(3)
      ELSE IF (j .EQ. jde - 2) THEN
        CALL PUSHINTEGER4(k)
! 3rd or 4th order flux 2 in from north boundary
        DO k=kts+1,ktf
          ad_from58 = i_start
          DO i=ad_from58,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from58)
        END DO
        k = ktf + 1
        ad_from59 = i_start
        DO i=ad_from59,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from59)
        CALL PUSHCONTROL3B(4)
      ELSE
        CALL PUSHCONTROL3B(5)
      END IF
!  y flux-divergence into tendency
! Comments for polar boundary conditions
! Same process as for advect_u - tendencies run from jds to jde-1 
! (latitudes are as for u grid, longitudes are displaced)
! Therefore: flow is only from one side for points next to poles
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from60 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from60)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from61 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from61)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf+1
          ad_from62 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from62)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO j_loop_y_flux_6
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from63)
!  next, x - flux divergence
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
      IF (i_start + 2 .GT. ids + 3) THEN
        i_start_f = ids + 3
      ELSE
        i_start_f = i_start + 2
      END IF
    END IF
    IF (degrade_xe) THEN
      IF (ide - 2 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 2
      END IF
      i_end_f = ide - 3
    END IF
    ad_from66 = j_start
!  compute fluxes
    DO j=ad_from66,j_end
      CALL PUSHINTEGER4(k)
!  5th or 6th order flux
      DO k=kts+1,ktf
        DO i=i_start_f,i_end_f
          CALL PUSHREAL8(vel)
        END DO
      END DO
      k = ktf + 1
      DO i=i_start_f,i_end_f
        CALL PUSHREAL8(vel)
        vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
      END DO
!  lower order fluxes close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        ad_from64 = i_start
        DO i=ad_from64,i_start_f-1
          IF (i .EQ. ids + 1) THEN
            CALL PUSHINTEGER4(k)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ids + 2) THEN
            CALL PUSHINTEGER4(k)
! third order
            DO k=kts+1,ktf
              CALL PUSHREAL8(vel)
            END DO
            k = ktf + 1
            CALL PUSHREAL8(vel)
            vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(ad_from64)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        DO i=i_end_f+1,i_end+1
          IF (i .EQ. ide - 1) THEN
            CALL PUSHINTEGER4(k)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ide - 2) THEN
            CALL PUSHINTEGER4(k)
! third order flux one in from the boundary
            DO k=kts+1,ktf
              CALL PUSHREAL8(vel)
            END DO
            k = ktf + 1
            CALL PUSHREAL8(vel)
            vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
      CALL PUSHINTEGER4(k)
!  x flux-divergence into tendency
      DO k=kts+1,ktf+1
        ad_from65 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from65)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from66)
    CALL PUSHCONTROL3B(7)
  ELSE IF (horz_order .EQ. 5) THEN
!  determine boundary mods for flux operators
!  We degrade the flux operators from 3rd/4th order
!   to second order one gridpoint in from the boundaries for
!   all boundary conditions except periodic and symmetry - these
!   conditions have boundary zone data fill for correct application
!   of the higher order flux stencils
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 3) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 3) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 3) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 4) degrade_ye = .false.
!--------------- y - advection first
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      IF (jts .LT. jds + 1) THEN
        j_start = jds + 1
      ELSE
        j_start = jts
      END IF
      j_start_f = jds + 3
    END IF
    IF (degrade_ye) THEN
      IF (jte .GT. jde - 2) THEN
        j_end = jde - 2
      ELSE
        j_end = jte
      END IF
      j_end_f = jde - 3
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
!  compute fluxes, 5th or 6th order
    jp1 = 2
    jp0 = 1
    ad_from12 = j_start
j_loop_y_flux_5:DO j=ad_from12,j_end+1
      IF (j .GE. j_start_f .AND. j .LE. j_end_f) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from = i_start
          DO i=ad_from,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from)
        END DO
        k = ktf + 1
        ad_from0 = i_start
        DO i=ad_from0,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from0)
        CALL PUSHCONTROL3B(0)
      ELSE IF (j .EQ. jds + 1) THEN
        CALL PUSHINTEGER4(k)
! 2nd order flux next to south boundary
        DO k=kts+1,ktf
          ad_from1 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from1)
        END DO
        k = ktf + 1
        ad_from2 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from2)
        CALL PUSHCONTROL3B(1)
      ELSE IF (j .EQ. jds + 2) THEN
        CALL PUSHINTEGER4(k)
! third of 4th order flux 2 in from south boundary
        DO k=kts+1,ktf
          ad_from3 = i_start
          DO i=ad_from3,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from3)
        END DO
        k = ktf + 1
        ad_from4 = i_start
        DO i=ad_from4,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from4)
        CALL PUSHCONTROL3B(2)
      ELSE IF (j .EQ. jde - 1) THEN
        CALL PUSHINTEGER4(k)
! 2nd order flux next to north boundary
        DO k=kts+1,ktf
          ad_from5 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from5)
        END DO
        k = ktf + 1
        ad_from6 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from6)
        CALL PUSHCONTROL3B(3)
      ELSE IF (j .EQ. jde - 2) THEN
        CALL PUSHINTEGER4(k)
! 3rd or 4th order flux 2 in from north boundary
        DO k=kts+1,ktf
          ad_from7 = i_start
          DO i=ad_from7,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from7)
        END DO
        k = ktf + 1
        ad_from8 = i_start
        DO i=ad_from8,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from8)
        CALL PUSHCONTROL3B(4)
      ELSE
        CALL PUSHCONTROL3B(5)
      END IF
!  y flux-divergence into tendency
! Comments for polar boundary conditions
! Same process as for advect_u - tendencies run from jds to jde-1 
! (latitudes are as for u grid, longitudes are displaced)
! Therefore: flow is only from one side for points next to poles
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from9 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from9)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from10 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from10)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf+1
          ad_from11 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from11)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO j_loop_y_flux_5
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from12)
!  next, x - flux divergence
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  higher order flux has a 5 or 7 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      IF (ids + 1 .LT. its) THEN
        i_start = its
      ELSE
        i_start = ids + 1
      END IF
      IF (i_start + 2 .GT. ids + 3) THEN
        i_start_f = ids + 3
      ELSE
        i_start_f = i_start + 2
      END IF
    END IF
    IF (degrade_xe) THEN
      IF (ide - 2 .GT. ite) THEN
        i_end = ite
      ELSE
        i_end = ide - 2
      END IF
      i_end_f = ide - 3
    END IF
    ad_from15 = j_start
!  compute fluxes
    DO j=ad_from15,j_end
      CALL PUSHINTEGER4(k)
!  5th or 6th order flux
      DO k=kts+1,ktf
        DO i=i_start_f,i_end_f
          CALL PUSHREAL8(vel)
        END DO
      END DO
      k = ktf + 1
      DO i=i_start_f,i_end_f
        CALL PUSHREAL8(vel)
        vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
      END DO
!  lower order fluxes close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        ad_from13 = i_start
        DO i=ad_from13,i_start_f-1
          IF (i .EQ. ids + 1) THEN
            CALL PUSHINTEGER4(k)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ids + 2) THEN
            CALL PUSHINTEGER4(k)
! third order
            DO k=kts+1,ktf
              CALL PUSHREAL8(vel)
            END DO
            k = ktf + 1
            CALL PUSHREAL8(vel)
            vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(ad_from13)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        DO i=i_end_f+1,i_end+1
          IF (i .EQ. ide - 1) THEN
            CALL PUSHINTEGER4(k)
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          IF (i .EQ. ide - 2) THEN
            CALL PUSHINTEGER4(k)
! third order flux one in from the boundary
            DO k=kts+1,ktf
              CALL PUSHREAL8(vel)
            END DO
            k = ktf + 1
            CALL PUSHREAL8(vel)
            vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
      CALL PUSHINTEGER4(k)
!  x flux-divergence into tendency
      DO k=kts+1,ktf+1
        ad_from14 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from14)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from15)
    CALL PUSHCONTROL3B(6)
  ELSE IF (horz_order .EQ. 4) THEN
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 2) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 2) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 2) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 3) degrade_ye = .false.
    IF (kte .GT. kde - 1) THEN
      ktf = kde - 1
    ELSE
      ktf = kte
    END IF
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      i_start = ids + 1
      i_start_f = i_start + 1
    END IF
    IF (degrade_xe) THEN
      i_end = ide - 2
      i_end_f = ide - 2
    END IF
    ad_from17 = j_start
!  compute fluxes
    DO j=ad_from17,j_end
      DO k=kts+1,ktf
        DO i=i_start_f,i_end_f
          CALL PUSHREAL8(vel)
        END DO
      END DO
      k = ktf + 1
      DO i=i_start_f,i_end_f
        CALL PUSHREAL8(vel)
        vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
      END DO
!  second order flux close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        CALL PUSHINTEGER4(k)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        CALL PUSHINTEGER4(k)
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
      CALL PUSHINTEGER4(k)
!  x flux-divergence into tendency
      DO k=kts+1,ktf+1
        ad_from16 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from16)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from17)
    CALL PUSHINTEGER4(i_start)
!  next -> y flux divergence calculation
    i_start = its
    IF (ite .GT. ide - 1) THEN
      CALL PUSHINTEGER4(i_end)
      i_end = ide - 1
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHINTEGER4(i_end)
      i_end = ite
      CALL PUSHCONTROL1B(1)
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      j_start = jds + 1
      j_start_f = j_start + 1
    END IF
    IF (degrade_ye) THEN
      j_end = jde - 2
      j_end_f = jde - 2
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
    jp1 = 2
    jp0 = 1
    ad_from27 = j_start
    DO j=ad_from27,j_end+1
      IF (j .LT. j_start_f .AND. degrade_ys) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from18 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from18)
        END DO
        k = ktf + 1
        ad_from19 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from19)
        CALL PUSHCONTROL2B(0)
      ELSE IF (j .GT. j_end_f .AND. degrade_ye) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from20 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from20)
        END DO
        k = ktf + 1
        ad_from21 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from21)
        CALL PUSHCONTROL2B(1)
      ELSE
        CALL PUSHINTEGER4(k)
!  3rd or 4th order flux
        DO k=kts+1,ktf
          ad_from22 = i_start
          DO i=ad_from22,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from22)
        END DO
        k = ktf + 1
        ad_from23 = i_start
        DO i=ad_from23,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from23)
        CALL PUSHCONTROL2B(2)
      END IF
!  y flux-divergence into tendency
! Comments for polar boundary conditions
! Same process as for advect_u - tendencies run from jds to jde-1 
! (latitudes are as for u grid, longitudes are displaced)
! Therefore: flow is only from one side for points next to poles
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from24 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from24)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from25 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from25)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf+1
          ad_from26 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from26)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from27)
    CALL PUSHCONTROL3B(5)
  ELSE IF (horz_order .EQ. 3) THEN
    degrade_xs = .true.
    degrade_xe = .true.
    degrade_ys = .true.
    degrade_ye = .true.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xs) .OR. &
&        its .GT. ids + 2) degrade_xs = .false.
    IF ((config_flags%periodic_x .OR. config_flags%symmetric_xe) .OR. &
&        ite .LT. ide - 2) degrade_xe = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ys) .OR. &
&        jts .GT. jds + 2) degrade_ys = .false.
    IF ((config_flags%periodic_y .OR. config_flags%symmetric_ye) .OR. &
&        jte .LT. jde - 3) degrade_ye = .false.
    IF (kte .GT. kde - 1) THEN
      ktf = kde - 1
    ELSE
      ktf = kte
    END IF
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    i_start_f = i_start
    i_end_f = i_end + 1
    IF (degrade_xs) THEN
      i_start = ids + 1
      i_start_f = i_start + 1
    END IF
    IF (degrade_xe) THEN
      i_end = ide - 2
      i_end_f = ide - 2
    END IF
    ad_from29 = j_start
!  compute fluxes
    DO j=ad_from29,j_end
      DO k=kts+1,ktf
        DO i=i_start_f,i_end_f
          CALL PUSHREAL8(vel)
        END DO
      END DO
      k = ktf + 1
      DO i=i_start_f,i_end_f
        CALL PUSHREAL8(vel)
        vel = (2.-fzm(k-1))*ru(i, k-1, j) - fzp(k-1)*ru(i, k-2, j)
      END DO
!  second order flux close to boundaries (if not periodic or symmetric)
      IF (degrade_xs) THEN
        CALL PUSHINTEGER4(k)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (degrade_xe) THEN
        CALL PUSHINTEGER4(k)
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
      CALL PUSHINTEGER4(k)
!  x flux-divergence into tendency
      DO k=kts+1,ktf+1
        ad_from28 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from28)
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from29)
    CALL PUSHINTEGER4(i_start)
!  next -> y flux divergence calculation
    i_start = its
    IF (ite .GT. ide - 1) THEN
      CALL PUSHINTEGER4(i_end)
      i_end = ide - 1
      CALL PUSHCONTROL1B(0)
    ELSE
      CALL PUSHINTEGER4(i_end)
      i_end = ite
      CALL PUSHCONTROL1B(1)
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
!  3rd or 4th order flux has a 5 point stencil, so compute
!  bounds so we can switch to second order flux close to the boundary
    j_start_f = j_start
    j_end_f = j_end + 1
    IF (degrade_ys) THEN
      j_start = jds + 1
      j_start_f = j_start + 1
    END IF
    IF (degrade_ye) THEN
      j_end = jde - 2
      j_end_f = jde - 2
    END IF
    IF (config_flags%polar) THEN
      IF (jte .GT. jde - 1) THEN
        j_end = jde - 1
      ELSE
        j_end = jte
      END IF
    END IF
    jp1 = 2
    jp0 = 1
    ad_from39 = j_start
    DO j=ad_from39,j_end+1
      IF (j .LT. j_start_f .AND. degrade_ys) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from30 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from30)
        END DO
        k = ktf + 1
        ad_from31 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from31)
        CALL PUSHCONTROL2B(0)
      ELSE IF (j .GT. j_end_f .AND. degrade_ye) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from32 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from32)
        END DO
        k = ktf + 1
        ad_from33 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from33)
        CALL PUSHCONTROL2B(1)
      ELSE
        CALL PUSHINTEGER4(k)
!  3rd or 4th order flux
        DO k=kts+1,ktf
          ad_from34 = i_start
          DO i=ad_from34,i_end
            CALL PUSHREAL8(vel)
          END DO
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from34)
        END DO
        k = ktf + 1
        ad_from35 = i_start
        DO i=ad_from35,i_end
          CALL PUSHREAL8(vel)
          vel = (2.-fzm(k-1))*rv(i, k-1, j) - fzp(k-1)*rv(i, k-2, j)
        END DO
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from35)
        CALL PUSHCONTROL2B(2)
      END IF
!  y flux-divergence into tendency
! Comments for polar boundary conditions
! Same process as for advect_u - tendencies run from jds to jde-1 
! (latitudes are as for u grid, longitudes are displaced)
! Therefore: flow is only from one side for points next to poles
      IF (config_flags%polar .AND. j .EQ. jds + 1) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from36 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from36)
        END DO
        CALL PUSHCONTROL2B(0)
      ELSE IF (config_flags%polar .AND. j .EQ. jde) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts,ktf
          ad_from37 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from37)
        END DO
        CALL PUSHCONTROL2B(1)
      ELSE IF (j .GT. j_start) THEN
! normal code
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf+1
          ad_from38 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from38)
        END DO
        CALL PUSHCONTROL2B(2)
      ELSE
        CALL PUSHCONTROL2B(3)
      END IF
      jtmp = jp1
      CALL PUSHINTEGER4(jp1)
      jp1 = jp0
      CALL PUSHINTEGER4(jp0)
      jp0 = jtmp
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from39)
    CALL PUSHCONTROL3B(4)
  ELSE IF (horz_order .EQ. 2) THEN
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
    j_start = jts
    IF (jte .GT. jde - 1) THEN
      j_end = jde - 1
    ELSE
      j_end = jte
    END IF
    IF (.NOT.config_flags%periodic_x) THEN
      IF (config_flags%open_xs .OR. specified) THEN
        IF (ids + 1 .LT. its) THEN
          i_start = its
        ELSE
          i_start = ids + 1
        END IF
      END IF
      IF (config_flags%open_xe .OR. specified) THEN
        IF (ide - 2 .GT. ite) THEN
          i_end = ite
        ELSE
          i_end = ide - 2
        END IF
      END IF
    END IF
    ad_from42 = j_start
    DO j=ad_from42,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+1,ktf
        ad_from40 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from40)
      END DO
      k = ktf + 1
      ad_from41 = i_start
      i = i_end + 1
      CALL PUSHINTEGER4(i - 1)
      CALL PUSHINTEGER4(ad_from41)
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from42)
    i_start = its
    IF (ite .GT. ide - 1) THEN
      i_end = ide - 1
    ELSE
      i_end = ite
    END IF
! Polar boundary conditions are like open or specified
    IF ((config_flags%open_ys .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jds + 1 .LT. jts) THEN
        j_start = jts
      ELSE
        j_start = jds + 1
      END IF
    END IF
    IF ((config_flags%open_ye .OR. specified) .OR. config_flags%polar) &
&    THEN
      IF (jde - 2 .GT. jte) THEN
        j_end = jte
      ELSE
        j_end = jde - 2
      END IF
    END IF
    ad_from45 = j_start
    DO j=ad_from45,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+1,ktf
        ad_from43 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from43)
      END DO
      k = ktf + 1
      ad_from44 = i_start
      i = i_end + 1
      CALL PUSHINTEGER4(i - 1)
      CALL PUSHINTEGER4(ad_from44)
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from45)
! Polar boundary condition ... not covered in above j-loop
    IF (config_flags%polar) THEN
      IF (jts .EQ. jds) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from46 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from46)
        END DO
        k = ktf + 1
        ad_from47 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from47)
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (jte .EQ. jde) THEN
        CALL PUSHINTEGER4(k)
        DO k=kts+1,ktf
          ad_from48 = i_start
          i = i_end + 1
          CALL PUSHINTEGER4(i - 1)
          CALL PUSHINTEGER4(ad_from48)
        END DO
        k = ktf + 1
        ad_from49 = i_start
        i = i_end + 1
        CALL PUSHINTEGER4(i - 1)
        CALL PUSHINTEGER4(ad_from49)
        CALL PUSHCONTROL3B(3)
      ELSE
        CALL PUSHCONTROL3B(2)
      END IF
    ELSE
      CALL PUSHCONTROL3B(1)
    END IF
  ELSE
    CALL PUSHCONTROL3B(0)
  END IF
!  pick up the the horizontal radiation boundary conditions.
!  (these are the computations that don't require 'cb'.
!  first, set to index ranges
  i_start = its
  IF (ite .GT. ide - 1) THEN
    i_end = ide - 1
  ELSE
    i_end = ite
  END IF
  CALL PUSHINTEGER4(j_start)
  j_start = jts
  IF (jte .GT. jde - 1) THEN
    j_end = jde - 1
  ELSE
    j_end = jte
  END IF
  IF (config_flags%open_xs .AND. its .EQ. ids) THEN
    ad_from67 = j_start
    DO j=ad_from67,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+1,ktf
        uw = 0.5*(fzm(k)*(ru(its, k, j)+ru(its+1, k, j))+fzp(k)*(ru(its&
&          , k-1, j)+ru(its+1, k-1, j)))
        IF (uw .GT. 0.) THEN
          CALL PUSHREAL8(ub)
          ub = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(ub)
          ub = uw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from67)
    CALL PUSHINTEGER4(k)
    k = ktf + 1
    ad_from68 = j_start
    DO j=ad_from68,j_end
      uw = 0.5*((2.-fzm(k-1))*(ru(its, k-1, j)+ru(its+1, k-1, j))-fzp(k-&
&        1)*(ru(its, k-2, j)+ru(its+1, k-2, j)))
      IF (uw .GT. 0.) THEN
        CALL PUSHREAL8(ub)
        ub = 0.
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHREAL8(ub)
        ub = uw
        CALL PUSHCONTROL1B(1)
      END IF
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from68)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_xe .AND. ite .EQ. ide) THEN
    ad_from69 = j_start
    DO j=ad_from69,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+1,ktf
        uw = 0.5*(fzm(k)*(ru(ite-1, k, j)+ru(ite, k, j))+fzp(k)*(ru(ite-&
&          1, k-1, j)+ru(ite, k-1, j)))
        IF (uw .LT. 0.) THEN
          CALL PUSHREAL8(ub)
          ub = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(ub)
          ub = uw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from69)
    CALL PUSHINTEGER4(k)
    k = ktf + 1
    ad_from70 = j_start
    DO j=ad_from70,j_end
      uw = 0.5*((2.-fzm(k-1))*(ru(ite-1, k-1, j)+ru(ite, k-1, j))-fzp(k-&
&        1)*(ru(ite-1, k-2, j)+ru(ite, k-2, j)))
      IF (uw .LT. 0.) THEN
        CALL PUSHREAL8(ub)
        ub = 0.
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHREAL8(ub)
        ub = uw
        CALL PUSHCONTROL1B(1)
      END IF
    END DO
    CALL PUSHINTEGER4(j - 1)
    CALL PUSHINTEGER4(ad_from70)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_ys .AND. jts .EQ. jds) THEN
    ad_from71 = i_start
    DO i=ad_from71,i_end
      CALL PUSHINTEGER4(k)
      DO k=kts+1,ktf
        vw = 0.5*(fzm(k)*(rv(i, k, jts)+rv(i, k, jts+1))+fzp(k)*(rv(i, k&
&          -1, jts)+rv(i, k-1, jts+1)))
        IF (vw .GT. 0.) THEN
          CALL PUSHREAL8(vb)
          vb = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(vb)
          vb = vw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from71)
    CALL PUSHINTEGER4(k)
    k = ktf + 1
    ad_from72 = i_start
    DO i=ad_from72,i_end
      vw = 0.5*((2.-fzm(k-1))*(rv(i, k-1, jts)+rv(i, k-1, jts+1))-fzp(k-&
&        1)*(rv(i, k-2, jts)+rv(i, k-2, jts+1)))
      IF (vw .GT. 0.) THEN
        CALL PUSHREAL8(vb)
        vb = 0.
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHREAL8(vb)
        vb = vw
        CALL PUSHCONTROL1B(1)
      END IF
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from72)
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHCONTROL1B(1)
  END IF
  IF (config_flags%open_ye .AND. jte .EQ. jde) THEN
    ad_from73 = i_start
    DO i=ad_from73,i_end
      CALL PUSHINTEGER4(k)
      DO k=kts+1,ktf
        vw = 0.5*(fzm(k)*(rv(i, k, jte-1)+rv(i, k, jte))+fzp(k)*(rv(i, k&
&          -1, jte-1)+rv(i, k-1, jte)))
        IF (vw .LT. 0.) THEN
          CALL PUSHREAL8(vb)
          vb = 0.
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHREAL8(vb)
          vb = vw
          CALL PUSHCONTROL1B(1)
        END IF
      END DO
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from73)
    CALL PUSHINTEGER4(k)
    k = ktf + 1
    ad_from74 = i_start
    DO i=ad_from74,i_end
      vw = 0.5*((2.-fzm(k-1))*(rv(i, k-1, jte-1)+rv(i, k-1, jte))-fzp(k-&
&        1)*(rv(i, k-2, jte-1)+rv(i, k-2, jte)))
      IF (vw .LT. 0.) THEN
        CALL PUSHREAL8(vb)
        vb = 0.
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHREAL8(vb)
        vb = vw
        CALL PUSHCONTROL1B(1)
      END IF
    END DO
    CALL PUSHINTEGER4(i - 1)
    CALL PUSHINTEGER4(ad_from74)
    CALL PUSHCONTROL1B(1)
  ELSE
    CALL PUSHCONTROL1B(0)
  END IF
!-------------------- vertical advection
!     ADT eqn 46 has 3rd term on RHS (dividing through by my) = - partial d/dz (w rho w /my)
!     Here we have:  - partial d/dz (w*rom) = - partial d/dz (w rho w / my)
!     Therefore we don't need to make a correction for advect_w
  i_start = its
  IF (ite .GT. ide - 1) THEN
    CALL PUSHINTEGER4(i_end)
    i_end = ide - 1
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHINTEGER4(i_end)
    i_end = ite
    CALL PUSHCONTROL1B(1)
  END IF
  j_start = jts
  IF (jte .GT. jde - 1) THEN
    CALL PUSHINTEGER4(j_end)
    j_end = jde - 1
    CALL PUSHCONTROL1B(0)
  ELSE
    CALL PUSHINTEGER4(j_end)
    j_end = jte
    CALL PUSHCONTROL1B(1)
  END IF
  IF (vert_order .EQ. 6) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+3,ktf-1
        DO i=i_start,i_end
          CALL PUSHREAL8(vel)
        END DO
      END DO
      DO i=i_start,i_end
        CALL PUSHREAL8(vel)
      END DO
      CALL PUSHINTEGER4(k)
! pick up flux contribution for w at the lid. wcs, 13 march 2004
      k = ktf + 1
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO i=i_end,i_start,-1
        vfluxb(i, k) = vfluxb(i, k) + rdzu(k-1)*2.*tendencyb(i, k, j)
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzu(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzu(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf + 1
        temp63b96 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp63b97 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp63b96
        romb(i, k-1, j) = romb(i, k-1, j) + temp63b96
        wb(i, k, j) = wb(i, k, j) + temp63b97
        wb(i, k-1, j) = wb(i, k-1, j) + temp63b97
        vfluxb(i, k) = 0.0
        k = ktf
        vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
        temp63b98 = vel*vfluxb(i, k)/12.0
        velb = (7.*(w(i, k, j)+w(i, k-1, j))-w(i, k+1, j)-w(i, k-2, j))*&
&          vfluxb(i, k)/12.0
        wb(i, k, j) = wb(i, k, j) + 7.*temp63b98
        wb(i, k-1, j) = wb(i, k-1, j) + 7.*temp63b98
        wb(i, k+1, j) = wb(i, k+1, j) - temp63b98
        wb(i, k-2, j) = wb(i, k-2, j) - temp63b98
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        k = kts + 2
        vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
        temp63b99 = vel*vfluxb(i, k)/12.0
        velb = (7.*(w(i, k, j)+w(i, k-1, j))-w(i, k+1, j)-w(i, k-2, j))*&
&          vfluxb(i, k)/12.0
        wb(i, k, j) = wb(i, k, j) + 7.*temp63b99
        wb(i, k-1, j) = wb(i, k-1, j) + 7.*temp63b99
        wb(i, k+1, j) = wb(i, k+1, j) - temp63b99
        wb(i, k-2, j) = wb(i, k-2, j) - temp63b99
        vfluxb(i, k) = 0.0
        CALL POPREAL8(vel)
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        k = kts + 1
        temp63b100 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp63b101 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp63b100
        romb(i, k-1, j) = romb(i, k-1, j) + temp63b100
        wb(i, k, j) = wb(i, k, j) + temp63b101
        wb(i, k-1, j) = wb(i, k-1, j) + temp63b101
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf-1,kts+3,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
          temp63b95 = vel*vfluxb(i, k)/60.0
          velb = (37.*(w(i, k, j)+w(i, k-1, j))-8.*(w(i, k+1, j)+w(i, k-&
&            2, j))+w(i, k+2, j)+w(i, k-3, j))*vfluxb(i, k)/60.0
          wb(i, k, j) = wb(i, k, j) + 37.*temp63b95
          wb(i, k-1, j) = wb(i, k-1, j) + 37.*temp63b95
          wb(i, k+1, j) = wb(i, k+1, j) - 8.*temp63b95
          wb(i, k-2, j) = wb(i, k-2, j) - 8.*temp63b95
          wb(i, k+2, j) = wb(i, k+2, j) + temp63b95
          wb(i, k-3, j) = wb(i, k-3, j) + temp63b95
          vfluxb(i, k) = 0.0
          CALL POPREAL8(vel)
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
  ELSE IF (vert_order .EQ. 5) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+3,ktf-1
        DO i=i_start,i_end
          CALL PUSHREAL8(vel)
        END DO
      END DO
      DO i=i_start,i_end
        CALL PUSHREAL8(vel)
      END DO
      CALL PUSHINTEGER4(k)
! pick up flux contribution for w at the lid, wcs. 13 march 2004
      k = ktf + 1
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO i=i_end,i_start,-1
        vfluxb(i, k) = vfluxb(i, k) + rdzu(k-1)*2.*tendencyb(i, k, j)
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzu(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzu(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf + 1
        temp75b = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp75b0 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp75b
        romb(i, k-1, j) = romb(i, k-1, j) + temp75b
        wb(i, k, j) = wb(i, k, j) + temp75b0
        wb(i, k-1, j) = wb(i, k-1, j) + temp75b0
        vfluxb(i, k) = 0.0
        k = ktf
        vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
        temp71 = w(i, k+1, j) - w(i, k-2, j) - 3.*(w(i, k, j)-w(i, k-1, &
&          j))
        temp74 = SIGN(1., -vel)
        temp73 = temp74/12.0
        temp72 = SIGN(1, time_step)
        temp71b = vel*vfluxb(i, k)
        temp71b0 = temp71b/12.0
        temp71b1 = temp72*temp73*temp71b
        velb = ((7.*(w(i, k, j)+w(i, k-1, j))-w(i, k+1, j)-w(i, k-2, j))&
&          /12.0+temp72*(temp73*temp71))*vfluxb(i, k)
        wb(i, k, j) = wb(i, k, j) + 7.*temp71b0 - 3.*temp71b1
        wb(i, k-1, j) = wb(i, k-1, j) + 3.*temp71b1 + 7.*temp71b0
        wb(i, k+1, j) = wb(i, k+1, j) + temp71b1 - temp71b0
        wb(i, k-2, j) = wb(i, k-2, j) - temp71b1 - temp71b0
        vfluxb(i, k) = 0.0
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        k = kts + 2
        vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
        temp67 = w(i, k+1, j) - w(i, k-2, j) - 3.*(w(i, k, j)-w(i, k-1, &
&          j))
        temp70 = SIGN(1., -vel)
        temp69 = temp70/12.0
        temp68 = SIGN(1, time_step)
        temp67b = vel*vfluxb(i, k)
        temp67b0 = temp67b/12.0
        temp67b1 = temp68*temp69*temp67b
        velb = ((7.*(w(i, k, j)+w(i, k-1, j))-w(i, k+1, j)-w(i, k-2, j))&
&          /12.0+temp68*(temp69*temp67))*vfluxb(i, k)
        wb(i, k, j) = wb(i, k, j) + 7.*temp67b0 - 3.*temp67b1
        wb(i, k-1, j) = wb(i, k-1, j) + 3.*temp67b1 + 7.*temp67b0
        wb(i, k+1, j) = wb(i, k+1, j) + temp67b1 - temp67b0
        wb(i, k-2, j) = wb(i, k-2, j) - temp67b1 - temp67b0
        vfluxb(i, k) = 0.0
        CALL POPREAL8(vel)
        romb(i, k, j) = romb(i, k, j) + 0.5*velb
        romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        k = kts + 1
        temp67b2 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp67b3 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp67b2
        romb(i, k-1, j) = romb(i, k-1, j) + temp67b2
        wb(i, k, j) = wb(i, k, j) + temp67b3
        wb(i, k-1, j) = wb(i, k-1, j) + temp67b3
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf-1,kts+3,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
          temp63 = w(i, k+2, j) - w(i, k-3, j) + 10.*(w(i, k, j)-w(i, k-&
&            1, j)) - 5.*(w(i, k+1, j)-w(i, k-2, j))
          temp66 = SIGN(1., -vel)
          temp65 = temp66/60.0
          temp64 = SIGN(1, time_step)
          temp63b102 = vel*vfluxb(i, k)
          temp63b103 = temp63b102/60.0
          temp63b104 = -(temp64*temp65*temp63b102)
          velb = ((37.*(w(i, k, j)+w(i, k-1, j))-8.*(w(i, k+1, j)+w(i, k&
&            -2, j))+w(i, k+2, j)+w(i, k-3, j))/60.0-temp64*(temp65*&
&            temp63))*vfluxb(i, k)
          wb(i, k, j) = wb(i, k, j) + 10.*temp63b104 + 37.*temp63b103
          wb(i, k-1, j) = wb(i, k-1, j) + 37.*temp63b103 - 10.*&
&            temp63b104
          wb(i, k+1, j) = wb(i, k+1, j) - 5.*temp63b104 - 8.*temp63b103
          wb(i, k-2, j) = wb(i, k-2, j) + 5.*temp63b104 - 8.*temp63b103
          wb(i, k+2, j) = wb(i, k+2, j) + temp63b104 + temp63b103
          wb(i, k-3, j) = wb(i, k-3, j) + temp63b103 - temp63b104
          vfluxb(i, k) = 0.0
          CALL POPREAL8(vel)
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
  ELSE IF (vert_order .EQ. 4) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+2,ktf
        DO i=i_start,i_end
          CALL PUSHREAL8(vel)
        END DO
      END DO
      CALL PUSHINTEGER4(k)
! pick up flux contribution for w at the lid, wcs. 13 march 2004
      k = ktf + 1
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO i=i_end,i_start,-1
        vfluxb(i, k) = vfluxb(i, k) + rdzu(k-1)*2.*tendencyb(i, k, j)
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzu(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzu(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf + 1
        temp75b2 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp75b3 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp75b2
        romb(i, k-1, j) = romb(i, k-1, j) + temp75b2
        wb(i, k, j) = wb(i, k, j) + temp75b3
        wb(i, k-1, j) = wb(i, k-1, j) + temp75b3
        vfluxb(i, k) = 0.0
        k = kts + 1
        temp75b4 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp75b5 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp75b4
        romb(i, k-1, j) = romb(i, k-1, j) + temp75b4
        wb(i, k, j) = wb(i, k, j) + temp75b5
        wb(i, k-1, j) = wb(i, k-1, j) + temp75b5
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf,kts+2,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
          temp75b1 = vel*vfluxb(i, k)/12.0
          velb = (7.*(w(i, k, j)+w(i, k-1, j))-w(i, k+1, j)-w(i, k-2, j)&
&            )*vfluxb(i, k)/12.0
          wb(i, k, j) = wb(i, k, j) + 7.*temp75b1
          wb(i, k-1, j) = wb(i, k-1, j) + 7.*temp75b1
          wb(i, k+1, j) = wb(i, k+1, j) - temp75b1
          wb(i, k-2, j) = wb(i, k-2, j) - temp75b1
          vfluxb(i, k) = 0.0
          CALL POPREAL8(vel)
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
  ELSE IF (vert_order .EQ. 3) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
      DO k=kts+2,ktf
        DO i=i_start,i_end
          CALL PUSHREAL8(vel)
        END DO
      END DO
      CALL PUSHINTEGER4(k)
! pick up flux contribution for w at the lid, wcs. 13 march 2004
      k = ktf + 1
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO i=i_end,i_start,-1
        vfluxb(i, k) = vfluxb(i, k) + rdzu(k-1)*2.*tendencyb(i, k, j)
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzu(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzu(k)*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      DO i=i_end,i_start,-1
        k = ktf + 1
        temp79b = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp79b0 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp79b
        romb(i, k-1, j) = romb(i, k-1, j) + temp79b
        wb(i, k, j) = wb(i, k, j) + temp79b0
        wb(i, k-1, j) = wb(i, k-1, j) + temp79b0
        vfluxb(i, k) = 0.0
        k = kts + 1
        temp79b1 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
        temp79b2 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
        romb(i, k, j) = romb(i, k, j) + temp79b1
        romb(i, k-1, j) = romb(i, k-1, j) + temp79b1
        wb(i, k, j) = wb(i, k, j) + temp79b2
        wb(i, k-1, j) = wb(i, k-1, j) + temp79b2
        vfluxb(i, k) = 0.0
      END DO
      DO k=ktf,kts+2,-1
        DO i=i_end,i_start,-1
          vel = 0.5*(rom(i, k, j)+rom(i, k-1, j))
          temp75 = w(i, k+1, j) - w(i, k-2, j) - 3.*(w(i, k, j)-w(i, k-1&
&            , j))
          temp78 = SIGN(1., -vel)
          temp77 = temp78/12.0
          temp76 = SIGN(1, time_step)
          temp75b6 = vel*vfluxb(i, k)
          temp75b7 = temp75b6/12.0
          temp75b8 = temp76*temp77*temp75b6
          velb = ((7.*(w(i, k, j)+w(i, k-1, j))-w(i, k+1, j)-w(i, k-2, j&
&            ))/12.0+temp76*(temp77*temp75))*vfluxb(i, k)
          wb(i, k, j) = wb(i, k, j) + 7.*temp75b7 - 3.*temp75b8
          wb(i, k-1, j) = wb(i, k-1, j) + 3.*temp75b8 + 7.*temp75b7
          wb(i, k+1, j) = wb(i, k+1, j) + temp75b8 - temp75b7
          wb(i, k-2, j) = wb(i, k-2, j) - temp75b8 - temp75b7
          vfluxb(i, k) = 0.0
          CALL POPREAL8(vel)
          romb(i, k, j) = romb(i, k, j) + 0.5*velb
          romb(i, k-1, j) = romb(i, k-1, j) + 0.5*velb
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
  ELSE IF (vert_order .EQ. 2) THEN
    DO j=j_start,j_end
      CALL PUSHINTEGER4(k)
! pick up flux contribution for w at the lid, wcs. 13 march 2004
      k = ktf + 1
    END DO
    vfluxb = 0.0
    DO j=j_end,j_start,-1
      DO i=i_end,i_start,-1
        vfluxb(i, k) = vfluxb(i, k) + rdzu(k-1)*2.*tendencyb(i, k, j)
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end,i_start,-1
          vfluxb(i, k+1) = vfluxb(i, k+1) - rdzu(k)*tendencyb(i, k, j)
          vfluxb(i, k) = vfluxb(i, k) + rdzu(k)*tendencyb(i, k, j)
        END DO
      END DO
      DO k=ktf+1,kts+1,-1
        DO i=i_end,i_start,-1
          temp79b3 = 0.25*(w(i, k, j)+w(i, k-1, j))*vfluxb(i, k)
          temp79b4 = 0.25*(rom(i, k, j)+rom(i, k-1, j))*vfluxb(i, k)
          romb(i, k, j) = romb(i, k, j) + temp79b3
          romb(i, k-1, j) = romb(i, k-1, j) + temp79b3
          wb(i, k, j) = wb(i, k, j) + temp79b4
          wb(i, k-1, j) = wb(i, k-1, j) + temp79b4
          vfluxb(i, k) = 0.0
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(j_end)
  ELSE
    CALL POPINTEGER4(j_end)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(i_end)
  ELSE
    CALL POPINTEGER4(i_end)
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .NE. 0) THEN
    CALL POPINTEGER4(ad_from74)
    CALL POPINTEGER4(ad_to74)
    DO i=ad_to74,ad_from74,-1
      temp63b91 = -(rdy*tendencyb(i, k, j_end))
      temp63b92 = w(i, k, j_end)*temp63b91
      temp63b93 = (2.-fzm(k-1))*temp63b92
      temp63b94 = -(fzp(k-1)*temp63b92)
      vbb = (w_old(i, k, j_end)-w_old(i, k, j_end-1))*temp63b91
      w_oldb(i, k, j_end) = w_oldb(i, k, j_end) + vb*temp63b91
      w_oldb(i, k, j_end-1) = w_oldb(i, k, j_end-1) - vb*temp63b91
      wb(i, k, j_end) = wb(i, k, j_end) + ((2.-fzm(k-1))*(rv(i, k-1, jte&
&        )-rv(i, k-1, jte-1))-fzp(k-1)*(rv(i, k-2, jte)-rv(i, k-2, jte-1)&
&        ))*temp63b91
      rvb(i, k-1, jte) = rvb(i, k-1, jte) + temp63b93
      rvb(i, k-1, jte-1) = rvb(i, k-1, jte-1) - temp63b93
      rvb(i, k-2, jte) = rvb(i, k-2, jte) + temp63b94
      rvb(i, k-2, jte-1) = rvb(i, k-2, jte-1) - temp63b94
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPREAL8(vb)
        vwb = 0.0
      ELSE
        CALL POPREAL8(vb)
        vwb = vbb
      END IF
      temp63b89 = 0.5*(2.-fzm(k-1))*vwb
      temp63b90 = -(0.5*fzp(k-1)*vwb)
      rvb(i, k-1, jte-1) = rvb(i, k-1, jte-1) + temp63b89
      rvb(i, k-1, jte) = rvb(i, k-1, jte) + temp63b89
      rvb(i, k-2, jte-1) = rvb(i, k-2, jte-1) + temp63b90
      rvb(i, k-2, jte) = rvb(i, k-2, jte) + temp63b90
    END DO
    CALL POPINTEGER4(k)
    CALL POPINTEGER4(ad_from73)
    CALL POPINTEGER4(ad_to73)
    DO i=ad_to73,ad_from73,-1
      DO k=ktf,kts+1,-1
        temp63b87 = -(rdy*tendencyb(i, k, j_end))
        temp63b88 = w(i, k, j_end)*temp63b87
        vbb = (w_old(i, k, j_end)-w_old(i, k, j_end-1))*temp63b87
        w_oldb(i, k, j_end) = w_oldb(i, k, j_end) + vb*temp63b87
        w_oldb(i, k, j_end-1) = w_oldb(i, k, j_end-1) - vb*temp63b87
        wb(i, k, j_end) = wb(i, k, j_end) + (fzm(k)*(rv(i, k, jte)-rv(i&
&          , k, jte-1))+fzp(k)*(rv(i, k-1, jte)-rv(i, k-1, jte-1)))*&
&          temp63b87
        rvb(i, k, jte) = rvb(i, k, jte) + fzm(k)*temp63b88
        rvb(i, k, jte-1) = rvb(i, k, jte-1) - fzm(k)*temp63b88
        rvb(i, k-1, jte) = rvb(i, k-1, jte) + fzp(k)*temp63b88
        rvb(i, k-1, jte-1) = rvb(i, k-1, jte-1) - fzp(k)*temp63b88
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(vb)
          vwb = 0.0
        ELSE
          CALL POPREAL8(vb)
          vwb = vbb
        END IF
        temp63b86 = 0.5*vwb
        rvb(i, k, jte-1) = rvb(i, k, jte-1) + fzm(k)*temp63b86
        rvb(i, k, jte) = rvb(i, k, jte) + fzm(k)*temp63b86
        rvb(i, k-1, jte-1) = rvb(i, k-1, jte-1) + fzp(k)*temp63b86
        rvb(i, k-1, jte) = rvb(i, k-1, jte) + fzp(k)*temp63b86
      END DO
      CALL POPINTEGER4(k)
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from72)
    CALL POPINTEGER4(ad_to72)
    DO i=ad_to72,ad_from72,-1
      temp63b82 = -(rdy*tendencyb(i, k, jts))
      temp63b83 = w(i, k, jts)*temp63b82
      temp63b84 = (2.-fzm(k-1))*temp63b83
      temp63b85 = -(fzp(k-1)*temp63b83)
      vbb = (w_old(i, k, jts+1)-w_old(i, k, jts))*temp63b82
      w_oldb(i, k, jts+1) = w_oldb(i, k, jts+1) + vb*temp63b82
      w_oldb(i, k, jts) = w_oldb(i, k, jts) - vb*temp63b82
      wb(i, k, jts) = wb(i, k, jts) + ((2.-fzm(k-1))*(rv(i, k-1, jts+1)-&
&        rv(i, k-1, jts))-fzp(k-1)*(rv(i, k-2, jts+1)-rv(i, k-2, jts)))*&
&        temp63b82
      rvb(i, k-1, jts+1) = rvb(i, k-1, jts+1) + temp63b84
      rvb(i, k-1, jts) = rvb(i, k-1, jts) - temp63b84
      rvb(i, k-2, jts+1) = rvb(i, k-2, jts+1) + temp63b85
      rvb(i, k-2, jts) = rvb(i, k-2, jts) - temp63b85
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPREAL8(vb)
        vwb = 0.0
      ELSE
        CALL POPREAL8(vb)
        vwb = vbb
      END IF
      temp63b80 = 0.5*(2.-fzm(k-1))*vwb
      temp63b81 = -(0.5*fzp(k-1)*vwb)
      rvb(i, k-1, jts) = rvb(i, k-1, jts) + temp63b80
      rvb(i, k-1, jts+1) = rvb(i, k-1, jts+1) + temp63b80
      rvb(i, k-2, jts) = rvb(i, k-2, jts) + temp63b81
      rvb(i, k-2, jts+1) = rvb(i, k-2, jts+1) + temp63b81
    END DO
    CALL POPINTEGER4(k)
    CALL POPINTEGER4(ad_from71)
    CALL POPINTEGER4(ad_to71)
    DO i=ad_to71,ad_from71,-1
      DO k=ktf,kts+1,-1
        temp63b78 = -(rdy*tendencyb(i, k, jts))
        temp63b79 = w(i, k, jts)*temp63b78
        vbb = (w_old(i, k, jts+1)-w_old(i, k, jts))*temp63b78
        w_oldb(i, k, jts+1) = w_oldb(i, k, jts+1) + vb*temp63b78
        w_oldb(i, k, jts) = w_oldb(i, k, jts) - vb*temp63b78
        wb(i, k, jts) = wb(i, k, jts) + (fzm(k)*(rv(i, k, jts+1)-rv(i, k&
&          , jts))+fzp(k)*(rv(i, k-1, jts+1)-rv(i, k-1, jts)))*temp63b78
        rvb(i, k, jts+1) = rvb(i, k, jts+1) + fzm(k)*temp63b79
        rvb(i, k, jts) = rvb(i, k, jts) - fzm(k)*temp63b79
        rvb(i, k-1, jts+1) = rvb(i, k-1, jts+1) + fzp(k)*temp63b79
        rvb(i, k-1, jts) = rvb(i, k-1, jts) - fzp(k)*temp63b79
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(vb)
          vwb = 0.0
        ELSE
          CALL POPREAL8(vb)
          vwb = vbb
        END IF
        temp63b77 = 0.5*vwb
        rvb(i, k, jts) = rvb(i, k, jts) + fzm(k)*temp63b77
        rvb(i, k, jts+1) = rvb(i, k, jts+1) + fzm(k)*temp63b77
        rvb(i, k-1, jts) = rvb(i, k-1, jts) + fzp(k)*temp63b77
        rvb(i, k-1, jts+1) = rvb(i, k-1, jts+1) + fzp(k)*temp63b77
      END DO
      CALL POPINTEGER4(k)
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from70)
    CALL POPINTEGER4(ad_to70)
    DO j=ad_to70,ad_from70,-1
      temp63b73 = -(rdx*tendencyb(i_end, k, j))
      temp63b74 = w(i_end, k, j)*temp63b73
      temp63b75 = (2.-fzm(k-1))*temp63b74
      temp63b76 = -(fzp(k-1)*temp63b74)
      ubb = (w_old(i_end, k, j)-w_old(i_end-1, k, j))*temp63b73
      w_oldb(i_end, k, j) = w_oldb(i_end, k, j) + ub*temp63b73
      w_oldb(i_end-1, k, j) = w_oldb(i_end-1, k, j) - ub*temp63b73
      wb(i_end, k, j) = wb(i_end, k, j) + ((2.-fzm(k-1))*(ru(ite, k-1, j&
&        )-ru(ite-1, k-1, j))-fzp(k-1)*(ru(ite, k-2, j)-ru(ite-1, k-2, j)&
&        ))*temp63b73
      rub(ite, k-1, j) = rub(ite, k-1, j) + temp63b75
      rub(ite-1, k-1, j) = rub(ite-1, k-1, j) - temp63b75
      rub(ite, k-2, j) = rub(ite, k-2, j) + temp63b76
      rub(ite-1, k-2, j) = rub(ite-1, k-2, j) - temp63b76
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPREAL8(ub)
        uwb = 0.0
      ELSE
        CALL POPREAL8(ub)
        uwb = ubb
      END IF
      temp63b71 = 0.5*(2.-fzm(k-1))*uwb
      temp63b72 = -(0.5*fzp(k-1)*uwb)
      rub(ite-1, k-1, j) = rub(ite-1, k-1, j) + temp63b71
      rub(ite, k-1, j) = rub(ite, k-1, j) + temp63b71
      rub(ite-1, k-2, j) = rub(ite-1, k-2, j) + temp63b72
      rub(ite, k-2, j) = rub(ite, k-2, j) + temp63b72
    END DO
    CALL POPINTEGER4(k)
    CALL POPINTEGER4(ad_from69)
    CALL POPINTEGER4(ad_to69)
    DO j=ad_to69,ad_from69,-1
      DO k=ktf,kts+1,-1
        temp63b69 = -(rdx*tendencyb(i_end, k, j))
        temp63b70 = w(i_end, k, j)*temp63b69
        ubb = (w_old(i_end, k, j)-w_old(i_end-1, k, j))*temp63b69
        w_oldb(i_end, k, j) = w_oldb(i_end, k, j) + ub*temp63b69
        w_oldb(i_end-1, k, j) = w_oldb(i_end-1, k, j) - ub*temp63b69
        wb(i_end, k, j) = wb(i_end, k, j) + (fzm(k)*(ru(ite, k, j)-ru(&
&          ite-1, k, j))+fzp(k)*(ru(ite, k-1, j)-ru(ite-1, k-1, j)))*&
&          temp63b69
        rub(ite, k, j) = rub(ite, k, j) + fzm(k)*temp63b70
        rub(ite-1, k, j) = rub(ite-1, k, j) - fzm(k)*temp63b70
        rub(ite, k-1, j) = rub(ite, k-1, j) + fzp(k)*temp63b70
        rub(ite-1, k-1, j) = rub(ite-1, k-1, j) - fzp(k)*temp63b70
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(ub)
          uwb = 0.0
        ELSE
          CALL POPREAL8(ub)
          uwb = ubb
        END IF
        temp63b68 = 0.5*uwb
        rub(ite-1, k, j) = rub(ite-1, k, j) + fzm(k)*temp63b68
        rub(ite, k, j) = rub(ite, k, j) + fzm(k)*temp63b68
        rub(ite-1, k-1, j) = rub(ite-1, k-1, j) + fzp(k)*temp63b68
        rub(ite, k-1, j) = rub(ite, k-1, j) + fzp(k)*temp63b68
      END DO
      CALL POPINTEGER4(k)
    END DO
  END IF
  CALL POPCONTROL1B(branch)
  IF (branch .EQ. 0) THEN
    CALL POPINTEGER4(ad_from68)
    CALL POPINTEGER4(ad_to68)
    DO j=ad_to68,ad_from68,-1
      temp63b64 = -(rdx*tendencyb(its, k, j))
      temp63b65 = w(its, k, j)*temp63b64
      temp63b66 = (2.-fzm(k-1))*temp63b65
      temp63b67 = -(fzp(k-1)*temp63b65)
      ubb = (w_old(its+1, k, j)-w_old(its, k, j))*temp63b64
      w_oldb(its+1, k, j) = w_oldb(its+1, k, j) + ub*temp63b64
      w_oldb(its, k, j) = w_oldb(its, k, j) - ub*temp63b64
      wb(its, k, j) = wb(its, k, j) + ((2.-fzm(k-1))*(ru(its+1, k-1, j)-&
&        ru(its, k-1, j))-fzp(k-1)*(ru(its+1, k-2, j)-ru(its, k-2, j)))*&
&        temp63b64
      rub(its+1, k-1, j) = rub(its+1, k-1, j) + temp63b66
      rub(its, k-1, j) = rub(its, k-1, j) - temp63b66
      rub(its+1, k-2, j) = rub(its+1, k-2, j) + temp63b67
      rub(its, k-2, j) = rub(its, k-2, j) - temp63b67
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPREAL8(ub)
        uwb = 0.0
      ELSE
        CALL POPREAL8(ub)
        uwb = ubb
      END IF
      temp63b62 = 0.5*(2.-fzm(k-1))*uwb
      temp63b63 = -(0.5*fzp(k-1)*uwb)
      rub(its, k-1, j) = rub(its, k-1, j) + temp63b62
      rub(its+1, k-1, j) = rub(its+1, k-1, j) + temp63b62
      rub(its, k-2, j) = rub(its, k-2, j) + temp63b63
      rub(its+1, k-2, j) = rub(its+1, k-2, j) + temp63b63
    END DO
    CALL POPINTEGER4(k)
    CALL POPINTEGER4(ad_from67)
    CALL POPINTEGER4(ad_to67)
    DO j=ad_to67,ad_from67,-1
      DO k=ktf,kts+1,-1
        temp63b60 = -(rdx*tendencyb(its, k, j))
        temp63b61 = w(its, k, j)*temp63b60
        ubb = (w_old(its+1, k, j)-w_old(its, k, j))*temp63b60
        w_oldb(its+1, k, j) = w_oldb(its+1, k, j) + ub*temp63b60
        w_oldb(its, k, j) = w_oldb(its, k, j) - ub*temp63b60
        wb(its, k, j) = wb(its, k, j) + (fzm(k)*(ru(its+1, k, j)-ru(its&
&          , k, j))+fzp(k)*(ru(its+1, k-1, j)-ru(its, k-1, j)))*temp63b60
        rub(its+1, k, j) = rub(its+1, k, j) + fzm(k)*temp63b61
        rub(its, k, j) = rub(its, k, j) - fzm(k)*temp63b61
        rub(its+1, k-1, j) = rub(its+1, k-1, j) + fzp(k)*temp63b61
        rub(its, k-1, j) = rub(its, k-1, j) - fzp(k)*temp63b61
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(ub)
          uwb = 0.0
        ELSE
          CALL POPREAL8(ub)
          uwb = ubb
        END IF
        temp63b59 = 0.5*uwb
        rub(its, k, j) = rub(its, k, j) + fzm(k)*temp63b59
        rub(its+1, k, j) = rub(its+1, k, j) + fzm(k)*temp63b59
        rub(its, k-1, j) = rub(its, k-1, j) + fzp(k)*temp63b59
        rub(its+1, k-1, j) = rub(its+1, k-1, j) + fzp(k)*temp63b59
      END DO
      CALL POPINTEGER4(k)
    END DO
  END IF
  CALL POPINTEGER4(j_start)
  CALL POPCONTROL3B(branch)
  IF (branch .LT. 4) THEN
    IF (branch .LT. 2) THEN
      IF (branch .EQ. 0) GOTO 100
    ELSE
      IF (branch .NE. 2) THEN
        CALL POPINTEGER4(ad_from49)
        CALL POPINTEGER4(ad_to49)
        DO i=ad_to49,ad_from49,-1
          mrdy = msftx(i, jde-1)*rdy
          temp63b28 = mrdy*0.5*tendencyb(i, k, jde-1)
          temp63b29 = (w(i, k, jde-1)+w(i, k, jde-2))*temp63b28
          temp63b30 = ((2.-fzm(k-1))*rv(i, k-1, jde-1)-fzp(k-1)*rv(i, k-&
&            2, jde-1))*temp63b28
          rvb(i, k-1, jde-1) = rvb(i, k-1, jde-1) + (2.-fzm(k-1))*&
&            temp63b29
          rvb(i, k-2, jde-1) = rvb(i, k-2, jde-1) - fzp(k-1)*temp63b29
          wb(i, k, jde-1) = wb(i, k, jde-1) + temp63b30
          wb(i, k, jde-2) = wb(i, k, jde-2) + temp63b30
        END DO
        DO k=ktf,kts+1,-1
          CALL POPINTEGER4(ad_from48)
          CALL POPINTEGER4(ad_to48)
          DO i=ad_to48,ad_from48,-1
            mrdy = msftx(i, jde-1)*rdy
            temp63b25 = mrdy*0.5*tendencyb(i, k, jde-1)
            temp63b26 = (w(i, k, jde-1)+w(i, k, jde-2))*temp63b25
            temp63b27 = (fzm(k)*rv(i, k, jde-1)+fzp(k)*rv(i, k-1, jde-1)&
&              )*temp63b25
            rvb(i, k, jde-1) = rvb(i, k, jde-1) + fzm(k)*temp63b26
            rvb(i, k-1, jde-1) = rvb(i, k-1, jde-1) + fzp(k)*temp63b26
            wb(i, k, jde-1) = wb(i, k, jde-1) + temp63b27
            wb(i, k, jde-2) = wb(i, k, jde-2) + temp63b27
          END DO
        END DO
        CALL POPINTEGER4(k)
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(ad_from47)
        CALL POPINTEGER4(ad_to47)
        DO i=ad_to47,ad_from47,-1
          mrdy = msftx(i, jds)*rdy
          temp63b22 = -(mrdy*0.5*tendencyb(i, k, jds))
          temp63b23 = (w(i, k, jds+1)+w(i, k, jds))*temp63b22
          temp63b24 = ((2.-fzm(k-1))*rv(i, k-1, jds+1)-fzp(k-1)*rv(i, k-&
&            2, jds+1))*temp63b22
          rvb(i, k-1, jds+1) = rvb(i, k-1, jds+1) + (2.-fzm(k-1))*&
&            temp63b23
          rvb(i, k-2, jds+1) = rvb(i, k-2, jds+1) - fzp(k-1)*temp63b23
          wb(i, k, jds+1) = wb(i, k, jds+1) + temp63b24
          wb(i, k, jds) = wb(i, k, jds) + temp63b24
        END DO
        DO k=ktf,kts+1,-1
          CALL POPINTEGER4(ad_from46)
          CALL POPINTEGER4(ad_to46)
          DO i=ad_to46,ad_from46,-1
            mrdy = msftx(i, jds)*rdy
            temp63b19 = -(mrdy*0.5*tendencyb(i, k, jds))
            temp63b20 = (w(i, k, jds+1)+w(i, k, jds))*temp63b19
            temp63b21 = (fzm(k)*rv(i, k, jds+1)+fzp(k)*rv(i, k-1, jds+1)&
&              )*temp63b19
            rvb(i, k, jds+1) = rvb(i, k, jds+1) + fzm(k)*temp63b20
            rvb(i, k-1, jds+1) = rvb(i, k-1, jds+1) + fzp(k)*temp63b20
            wb(i, k, jds+1) = wb(i, k, jds+1) + temp63b21
            wb(i, k, jds) = wb(i, k, jds) + temp63b21
          END DO
        END DO
        CALL POPINTEGER4(k)
      END IF
    END IF
    CALL POPINTEGER4(ad_from45)
    CALL POPINTEGER4(ad_to45)
    DO j=ad_to45,ad_from45,-1
      CALL POPINTEGER4(ad_from44)
      CALL POPINTEGER4(ad_to44)
      DO i=ad_to44,ad_from44,-1
        mrdy = msftx(i, j)*rdy
        temp63b14 = -(mrdy*0.5*tendencyb(i, k, j))
        temp63b15 = (w(i, k, j+1)+w(i, k, j))*temp63b14
        temp63b16 = ((2.-fzm(k-1))*rv(i, k-1, j+1)-fzp(k-1)*rv(i, k-2, j&
&          +1))*temp63b14
        temp63b17 = -((w(i, k, j)+w(i, k, j-1))*temp63b14)
        temp63b18 = -(((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, k-2, j&
&          ))*temp63b14)
        rvb(i, k-1, j+1) = rvb(i, k-1, j+1) + (2.-fzm(k-1))*temp63b15
        rvb(i, k-2, j+1) = rvb(i, k-2, j+1) - fzp(k-1)*temp63b15
        wb(i, k, j+1) = wb(i, k, j+1) + temp63b16
        wb(i, k, j) = wb(i, k, j) + temp63b18 + temp63b16
        rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp63b17
        rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp63b17
        wb(i, k, j-1) = wb(i, k, j-1) + temp63b18
      END DO
      DO k=ktf,kts+1,-1
        CALL POPINTEGER4(ad_from43)
        CALL POPINTEGER4(ad_to43)
        DO i=ad_to43,ad_from43,-1
          mrdy = msftx(i, j)*rdy
          temp63b9 = -(mrdy*0.5*tendencyb(i, k, j))
          temp63b10 = (w(i, k, j+1)+w(i, k, j))*temp63b9
          temp63b11 = (fzm(k)*rv(i, k, j+1)+fzp(k)*rv(i, k-1, j+1))*&
&            temp63b9
          temp63b12 = -((w(i, k, j)+w(i, k, j-1))*temp63b9)
          temp63b13 = -((fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&            temp63b9)
          rvb(i, k, j+1) = rvb(i, k, j+1) + fzm(k)*temp63b10
          rvb(i, k-1, j+1) = rvb(i, k-1, j+1) + fzp(k)*temp63b10
          wb(i, k, j+1) = wb(i, k, j+1) + temp63b11
          wb(i, k, j) = wb(i, k, j) + temp63b13 + temp63b11
          rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp63b12
          rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp63b12
          wb(i, k, j-1) = wb(i, k, j-1) + temp63b13
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
    CALL POPINTEGER4(ad_from42)
    CALL POPINTEGER4(ad_to42)
    DO j=ad_to42,ad_from42,-1
      CALL POPINTEGER4(ad_from41)
      CALL POPINTEGER4(ad_to41)
      DO i=ad_to41,ad_from41,-1
        mrdx = msftx(i, j)*rdx
        temp63b4 = -(mrdx*0.5*tendencyb(i, k, j))
        temp63b5 = (w(i+1, k, j)+w(i, k, j))*temp63b4
        temp63b6 = ((2.-fzm(k-1))*ru(i+1, k-1, j)-fzp(k-1)*ru(i+1, k-2, &
&          j))*temp63b4
        temp63b7 = -((w(i, k, j)+w(i-1, k, j))*temp63b4)
        temp63b8 = -(((2.-fzm(k-1))*ru(i, k-1, j)-fzp(k-1)*ru(i, k-2, j)&
&          )*temp63b4)
        rub(i+1, k-1, j) = rub(i+1, k-1, j) + (2.-fzm(k-1))*temp63b5
        rub(i+1, k-2, j) = rub(i+1, k-2, j) - fzp(k-1)*temp63b5
        wb(i+1, k, j) = wb(i+1, k, j) + temp63b6
        wb(i, k, j) = wb(i, k, j) + temp63b8 + temp63b6
        rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*temp63b7
        rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*temp63b7
        wb(i-1, k, j) = wb(i-1, k, j) + temp63b8
      END DO
      DO k=ktf,kts+1,-1
        CALL POPINTEGER4(ad_from40)
        CALL POPINTEGER4(ad_to40)
        DO i=ad_to40,ad_from40,-1
          mrdx = msftx(i, j)*rdx
          temp63b = -(mrdx*0.5*tendencyb(i, k, j))
          temp63b0 = (w(i+1, k, j)+w(i, k, j))*temp63b
          temp63b1 = (fzm(k)*ru(i+1, k, j)+fzp(k)*ru(i+1, k-1, j))*&
&            temp63b
          temp63b2 = -((w(i, k, j)+w(i-1, k, j))*temp63b)
          temp63b3 = -((fzm(k)*ru(i, k, j)+fzp(k)*ru(i, k-1, j))*temp63b&
&            )
          rub(i+1, k, j) = rub(i+1, k, j) + fzm(k)*temp63b0
          rub(i+1, k-1, j) = rub(i+1, k-1, j) + fzp(k)*temp63b0
          wb(i+1, k, j) = wb(i+1, k, j) + temp63b1
          wb(i, k, j) = wb(i, k, j) + temp63b3 + temp63b1
          rub(i, k, j) = rub(i, k, j) + fzm(k)*temp63b2
          rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*temp63b2
          wb(i-1, k, j) = wb(i-1, k, j) + temp63b3
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
  ELSE IF (branch .LT. 6) THEN
    IF (branch .EQ. 4) THEN
      fqyb = 0.0
      CALL POPINTEGER4(ad_from39)
      CALL POPINTEGER4(ad_to39)
      DO j=ad_to39,ad_from39,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from36)
              CALL POPINTEGER4(ad_to36)
              DO i=ad_to36,ad_from36,-1
                mrdy = msftx(i, j-1)*rdy
                fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
            CALL POPINTEGER4(k)
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from37)
              CALL POPINTEGER4(ad_to37)
              DO i=ad_to37,ad_from37,-1
                mrdy = msftx(i, j-1)*rdy
                fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
            CALL POPINTEGER4(k)
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf+1,kts+1,-1
            CALL POPINTEGER4(ad_from38)
            CALL POPINTEGER4(ad_to38)
            DO i=ad_to38,ad_from38,-1
              mrdy = msftx(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
        CALL POPCONTROL2B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPINTEGER4(ad_from31)
          CALL POPINTEGER4(ad_to31)
          DO i=ad_to31,ad_from31,-1
            temp55b9 = 0.5*(w(i, k, j_start)+w(i, k, j_start-1))*fqyb(i&
&              , k, jp1)
            temp55b10 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j_start)-fzp(k-1)*&
&              rv(i, k-2, j_start))*fqyb(i, k, jp1)
            rvb(i, k-1, j_start) = rvb(i, k-1, j_start) + (2.-fzm(k-1))*&
&              temp55b9
            rvb(i, k-2, j_start) = rvb(i, k-2, j_start) - fzp(k-1)*&
&              temp55b9
            wb(i, k, j_start) = wb(i, k, j_start) + temp55b10
            wb(i, k, j_start-1) = wb(i, k, j_start-1) + temp55b10
            fqyb(i, k, jp1) = 0.0
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from30)
            CALL POPINTEGER4(ad_to30)
            DO i=ad_to30,ad_from30,-1
              temp55b7 = 0.5*(w(i, k, j_start)+w(i, k, j_start-1))*fqyb(&
&                i, k, jp1)
              temp55b8 = 0.5*(fzm(k)*rv(i, k, j_start)+fzp(k)*rv(i, k-1&
&                , j_start))*fqyb(i, k, jp1)
              rvb(i, k, j_start) = rvb(i, k, j_start) + fzm(k)*temp55b7
              rvb(i, k-1, j_start) = rvb(i, k-1, j_start) + fzp(k)*&
&                temp55b7
              wb(i, k, j_start) = wb(i, k, j_start) + temp55b8
              wb(i, k, j_start-1) = wb(i, k, j_start-1) + temp55b8
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE IF (branch .EQ. 1) THEN
          CALL POPINTEGER4(ad_from33)
          CALL POPINTEGER4(ad_to33)
          DO i=ad_to33,ad_from33,-1
            temp55b13 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
            temp55b14 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, &
&              k-2, j))*fqyb(i, k, jp1)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp55b13
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp55b13
            wb(i, k, j) = wb(i, k, j) + temp55b14
            wb(i, k, j-1) = wb(i, k, j-1) + temp55b14
            fqyb(i, k, jp1) = 0.0
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from32)
            CALL POPINTEGER4(ad_to32)
            DO i=ad_to32,ad_from32,-1
              temp55b11 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
              temp55b12 = 0.5*(fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&                fqyb(i, k, jp1)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp55b11
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp55b11
              wb(i, k, j) = wb(i, k, j) + temp55b12
              wb(i, k, j-1) = wb(i, k, j-1) + temp55b12
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE
          CALL POPINTEGER4(ad_from35)
          CALL POPINTEGER4(ad_to35)
          DO i=ad_to35,ad_from35,-1
            temp59 = w(i, k, j+1) - w(i, k, j-2) - 3.*(w(i, k, j)-w(i, k&
&              , j-1))
            temp62 = SIGN(1., vel)
            temp61 = temp62/12.0
            temp60 = SIGN(1, time_step)
            temp59b = vel*fqyb(i, k, jp1)
            temp59b0 = temp59b/12.0
            temp59b1 = temp60*temp61*temp59b
            velb = ((7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j&
&              -2))/12.0+temp60*(temp61*temp59))*fqyb(i, k, jp1)
            wb(i, k, j) = wb(i, k, j) + 7.*temp59b0 - 3.*temp59b1
            wb(i, k, j-1) = wb(i, k, j-1) + 3.*temp59b1 + 7.*temp59b0
            wb(i, k, j+1) = wb(i, k, j+1) + temp59b1 - temp59b0
            wb(i, k, j-2) = wb(i, k, j-2) - temp59b1 - temp59b0
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from34)
            CALL POPINTEGER4(ad_to34)
            DO i=ad_to34,ad_from34,-1
              vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
              temp55 = w(i, k, j+1) - w(i, k, j-2) - 3.*(w(i, k, j)-w(i&
&                , k, j-1))
              temp58 = SIGN(1., vel)
              temp57 = temp58/12.0
              temp56 = SIGN(1, time_step)
              temp55b15 = vel*fqyb(i, k, jp1)
              temp55b16 = temp55b15/12.0
              temp55b17 = temp56*temp57*temp55b15
              velb = ((7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k&
&                , j-2))/12.0+temp56*(temp57*temp55))*fqyb(i, k, jp1)
              wb(i, k, j) = wb(i, k, j) + 7.*temp55b16 - 3.*temp55b17
              wb(i, k, j-1) = wb(i, k, j-1) + 3.*temp55b17 + 7.*&
&                temp55b16
              wb(i, k, j+1) = wb(i, k, j+1) + temp55b17 - temp55b16
              wb(i, k, j-2) = wb(i, k, j-2) - temp55b17 - temp55b16
              fqyb(i, k, jp1) = 0.0
              CALL POPREAL8(vel)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(i_end)
      ELSE
        CALL POPINTEGER4(i_end)
      END IF
      CALL POPINTEGER4(i_start)
      fqxb = 0.0
      CALL POPINTEGER4(ad_from29)
      CALL POPINTEGER4(ad_to29)
      DO j=ad_to29,ad_from29,-1
        DO k=ktf+1,kts+1,-1
          CALL POPINTEGER4(ad_from28)
          CALL POPINTEGER4(ad_to28)
          DO i=ad_to28,ad_from28,-1
            mrdx = msftx(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
        END DO
        CALL POPINTEGER4(k)
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          k = ktf + 1
          temp55b5 = 0.5*(w(i_end+1, k, j)+w(i_end, k, j))*fqxb(i_end+1&
&            , k)
          temp55b6 = 0.5*((2.-fzm(k-1))*ru(i_end+1, k-1, j)-fzp(k-1)*ru(&
&            i_end+1, k-2, j))*fqxb(i_end+1, k)
          rub(i_end+1, k-1, j) = rub(i_end+1, k-1, j) + (2.-fzm(k-1))*&
&            temp55b5
          rub(i_end+1, k-2, j) = rub(i_end+1, k-2, j) - fzp(k-1)*&
&            temp55b5
          wb(i_end+1, k, j) = wb(i_end+1, k, j) + temp55b6
          wb(i_end, k, j) = wb(i_end, k, j) + temp55b6
          fqxb(i_end+1, k) = 0.0
          DO k=ktf,kts+1,-1
            temp55b3 = 0.5*(w(i_end+1, k, j)+w(i_end, k, j))*fqxb(i_end+&
&              1, k)
            temp55b4 = 0.5*(fzm(k)*ru(i_end+1, k, j)+fzp(k)*ru(i_end+1, &
&              k-1, j))*fqxb(i_end+1, k)
            rub(i_end+1, k, j) = rub(i_end+1, k, j) + fzm(k)*temp55b3
            rub(i_end+1, k-1, j) = rub(i_end+1, k-1, j) + fzp(k)*&
&              temp55b3
            wb(i_end+1, k, j) = wb(i_end+1, k, j) + temp55b4
            wb(i_end, k, j) = wb(i_end, k, j) + temp55b4
            fqxb(i_end+1, k) = 0.0
          END DO
          CALL POPINTEGER4(k)
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          k = ktf + 1
          temp55b1 = 0.5*(w(i_start, k, j)+w(i_start-1, k, j))*fqxb(&
&            i_start, k)
          temp55b2 = 0.5*((2.-fzm(k-1))*ru(i_start, k-1, j)-fzp(k-1)*ru(&
&            i_start, k-2, j))*fqxb(i_start, k)
          rub(i_start, k-1, j) = rub(i_start, k-1, j) + (2.-fzm(k-1))*&
&            temp55b1
          rub(i_start, k-2, j) = rub(i_start, k-2, j) - fzp(k-1)*&
&            temp55b1
          wb(i_start, k, j) = wb(i_start, k, j) + temp55b2
          wb(i_start-1, k, j) = wb(i_start-1, k, j) + temp55b2
          fqxb(i_start, k) = 0.0
          DO k=ktf,kts+1,-1
            temp55b = 0.5*(w(i_start, k, j)+w(i_start-1, k, j))*fqxb(&
&              i_start, k)
            temp55b0 = 0.5*(fzm(k)*ru(i_start, k, j)+fzp(k)*ru(i_start, &
&              k-1, j))*fqxb(i_start, k)
            rub(i_start, k, j) = rub(i_start, k, j) + fzm(k)*temp55b
            rub(i_start, k-1, j) = rub(i_start, k-1, j) + fzp(k)*temp55b
            wb(i_start, k, j) = wb(i_start, k, j) + temp55b0
            wb(i_start-1, k, j) = wb(i_start-1, k, j) + temp55b0
            fqxb(i_start, k) = 0.0
          END DO
          CALL POPINTEGER4(k)
        END IF
        k = ktf + 1
        DO i=i_end_f,i_start_f,-1
          temp51 = w(i+1, k, j) - w(i-2, k, j) - 3.*(w(i, k, j)-w(i-1, k&
&            , j))
          temp54 = SIGN(1., vel)
          temp53 = temp54/12.0
          temp52 = SIGN(1, time_step)
          temp51b = vel*fqxb(i, k)
          temp51b0 = temp51b/12.0
          temp51b1 = temp52*temp53*temp51b
          velb = ((7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k, j&
&            ))/12.0+temp52*(temp53*temp51))*fqxb(i, k)
          wb(i, k, j) = wb(i, k, j) + 7.*temp51b0 - 3.*temp51b1
          wb(i-1, k, j) = wb(i-1, k, j) + 3.*temp51b1 + 7.*temp51b0
          wb(i+1, k, j) = wb(i+1, k, j) + temp51b1 - temp51b0
          wb(i-2, k, j) = wb(i-2, k, j) - temp51b1 - temp51b0
          fqxb(i, k) = 0.0
          CALL POPREAL8(vel)
          rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
          rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
        END DO
        DO k=ktf,kts+1,-1
          DO i=i_end_f,i_start_f,-1
            vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
            temp47 = w(i+1, k, j) - w(i-2, k, j) - 3.*(w(i, k, j)-w(i-1&
&              , k, j))
            temp50 = SIGN(1., vel)
            temp49 = temp50/12.0
            temp48 = SIGN(1, time_step)
            temp47b19 = vel*fqxb(i, k)
            temp47b20 = temp47b19/12.0
            temp47b21 = temp48*temp49*temp47b19
            velb = ((7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k&
&              , j))/12.0+temp48*(temp49*temp47))*fqxb(i, k)
            wb(i, k, j) = wb(i, k, j) + 7.*temp47b20 - 3.*temp47b21
            wb(i-1, k, j) = wb(i-1, k, j) + 3.*temp47b21 + 7.*temp47b20
            wb(i+1, k, j) = wb(i+1, k, j) + temp47b21 - temp47b20
            wb(i-2, k, j) = wb(i-2, k, j) - temp47b21 - temp47b20
            fqxb(i, k) = 0.0
            CALL POPREAL8(vel)
            rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
            rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
          END DO
        END DO
      END DO
    ELSE
      fqyb = 0.0
      CALL POPINTEGER4(ad_from27)
      CALL POPINTEGER4(ad_to27)
      DO j=ad_to27,ad_from27,-1
        CALL POPINTEGER4(jp0)
        CALL POPINTEGER4(jp1)
        CALL POPCONTROL2B(branch)
        IF (branch .LT. 2) THEN
          IF (branch .EQ. 0) THEN
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from24)
              CALL POPINTEGER4(ad_to24)
              DO i=ad_to24,ad_from24,-1
                mrdy = msftx(i, j-1)*rdy
                fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
            CALL POPINTEGER4(k)
          ELSE
            DO k=ktf,kts,-1
              CALL POPINTEGER4(ad_from25)
              CALL POPINTEGER4(ad_to25)
              DO i=ad_to25,ad_from25,-1
                mrdy = msftx(i, j-1)*rdy
                fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k&
&                  , j-1)
              END DO
            END DO
            CALL POPINTEGER4(k)
          END IF
        ELSE IF (branch .EQ. 2) THEN
          DO k=ktf+1,kts+1,-1
            CALL POPINTEGER4(ad_from26)
            CALL POPINTEGER4(ad_to26)
            DO i=ad_to26,ad_from26,-1
              mrdy = msftx(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
        CALL POPCONTROL2B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPINTEGER4(ad_from19)
          CALL POPINTEGER4(ad_to19)
          DO i=ad_to19,ad_from19,-1
            temp47b11 = 0.5*(w(i, k, j_start)+w(i, k, j_start-1))*fqyb(i&
&              , k, jp1)
            temp47b12 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j_start)-fzp(k-1)*&
&              rv(i, k-2, j_start))*fqyb(i, k, jp1)
            rvb(i, k-1, j_start) = rvb(i, k-1, j_start) + (2.-fzm(k-1))*&
&              temp47b11
            rvb(i, k-2, j_start) = rvb(i, k-2, j_start) - fzp(k-1)*&
&              temp47b11
            wb(i, k, j_start) = wb(i, k, j_start) + temp47b12
            wb(i, k, j_start-1) = wb(i, k, j_start-1) + temp47b12
            fqyb(i, k, jp1) = 0.0
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from18)
            CALL POPINTEGER4(ad_to18)
            DO i=ad_to18,ad_from18,-1
              temp47b9 = 0.5*(w(i, k, j_start)+w(i, k, j_start-1))*fqyb(&
&                i, k, jp1)
              temp47b10 = 0.5*(fzm(k)*rv(i, k, j_start)+fzp(k)*rv(i, k-1&
&                , j_start))*fqyb(i, k, jp1)
              rvb(i, k, j_start) = rvb(i, k, j_start) + fzm(k)*temp47b9
              rvb(i, k-1, j_start) = rvb(i, k-1, j_start) + fzp(k)*&
&                temp47b9
              wb(i, k, j_start) = wb(i, k, j_start) + temp47b10
              wb(i, k, j_start-1) = wb(i, k, j_start-1) + temp47b10
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE IF (branch .EQ. 1) THEN
          CALL POPINTEGER4(ad_from21)
          CALL POPINTEGER4(ad_to21)
          DO i=ad_to21,ad_from21,-1
            temp47b15 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
            temp47b16 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, &
&              k-2, j))*fqyb(i, k, jp1)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp47b15
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp47b15
            wb(i, k, j) = wb(i, k, j) + temp47b16
            wb(i, k, j-1) = wb(i, k, j-1) + temp47b16
            fqyb(i, k, jp1) = 0.0
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from20)
            CALL POPINTEGER4(ad_to20)
            DO i=ad_to20,ad_from20,-1
              temp47b13 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
              temp47b14 = 0.5*(fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&                fqyb(i, k, jp1)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp47b13
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp47b13
              wb(i, k, j) = wb(i, k, j) + temp47b14
              wb(i, k, j-1) = wb(i, k, j-1) + temp47b14
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE
          CALL POPINTEGER4(ad_from23)
          CALL POPINTEGER4(ad_to23)
          DO i=ad_to23,ad_from23,-1
            temp47b18 = vel*fqyb(i, k, jp1)/12.0
            velb = (7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j-&
&              2))*fqyb(i, k, jp1)/12.0
            wb(i, k, j) = wb(i, k, j) + 7.*temp47b18
            wb(i, k, j-1) = wb(i, k, j-1) + 7.*temp47b18
            wb(i, k, j+1) = wb(i, k, j+1) - temp47b18
            wb(i, k, j-2) = wb(i, k, j-2) - temp47b18
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from22)
            CALL POPINTEGER4(ad_to22)
            DO i=ad_to22,ad_from22,-1
              vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
              temp47b17 = vel*fqyb(i, k, jp1)/12.0
              velb = (7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, &
&                j-2))*fqyb(i, k, jp1)/12.0
              wb(i, k, j) = wb(i, k, j) + 7.*temp47b17
              wb(i, k, j-1) = wb(i, k, j-1) + 7.*temp47b17
              wb(i, k, j+1) = wb(i, k, j+1) - temp47b17
              wb(i, k, j-2) = wb(i, k, j-2) - temp47b17
              fqyb(i, k, jp1) = 0.0
              CALL POPREAL8(vel)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(i_end)
      ELSE
        CALL POPINTEGER4(i_end)
      END IF
      CALL POPINTEGER4(i_start)
      fqxb = 0.0
      CALL POPINTEGER4(ad_from17)
      CALL POPINTEGER4(ad_to17)
      DO j=ad_to17,ad_from17,-1
        DO k=ktf+1,kts+1,-1
          CALL POPINTEGER4(ad_from16)
          CALL POPINTEGER4(ad_to16)
          DO i=ad_to16,ad_from16,-1
            mrdx = msftx(i, j)*rdx
            fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
            fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
          END DO
        END DO
        CALL POPINTEGER4(k)
        CALL POPCONTROL1B(branch)
        IF (branch .NE. 0) THEN
          k = ktf + 1
          temp47b7 = 0.5*(w(i_end+1, k, j)+w(i_end, k, j))*fqxb(i_end+1&
&            , k)
          temp47b8 = 0.5*((2.-fzm(k-1))*ru(i_end+1, k-1, j)-fzp(k-1)*ru(&
&            i_end+1, k-2, j))*fqxb(i_end+1, k)
          rub(i_end+1, k-1, j) = rub(i_end+1, k-1, j) + (2.-fzm(k-1))*&
&            temp47b7
          rub(i_end+1, k-2, j) = rub(i_end+1, k-2, j) - fzp(k-1)*&
&            temp47b7
          wb(i_end+1, k, j) = wb(i_end+1, k, j) + temp47b8
          wb(i_end, k, j) = wb(i_end, k, j) + temp47b8
          fqxb(i_end+1, k) = 0.0
          DO k=ktf,kts+1,-1
            temp47b5 = 0.5*(w(i_end+1, k, j)+w(i_end, k, j))*fqxb(i_end+&
&              1, k)
            temp47b6 = 0.5*(fzm(k)*ru(i_end+1, k, j)+fzp(k)*ru(i_end+1, &
&              k-1, j))*fqxb(i_end+1, k)
            rub(i_end+1, k, j) = rub(i_end+1, k, j) + fzm(k)*temp47b5
            rub(i_end+1, k-1, j) = rub(i_end+1, k-1, j) + fzp(k)*&
&              temp47b5
            wb(i_end+1, k, j) = wb(i_end+1, k, j) + temp47b6
            wb(i_end, k, j) = wb(i_end, k, j) + temp47b6
            fqxb(i_end+1, k) = 0.0
          END DO
          CALL POPINTEGER4(k)
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          k = ktf + 1
          temp47b3 = 0.5*(w(i_start, k, j)+w(i_start-1, k, j))*fqxb(&
&            i_start, k)
          temp47b4 = 0.5*((2.-fzm(k-1))*ru(i_start, k-1, j)-fzp(k-1)*ru(&
&            i_start, k-2, j))*fqxb(i_start, k)
          rub(i_start, k-1, j) = rub(i_start, k-1, j) + (2.-fzm(k-1))*&
&            temp47b3
          rub(i_start, k-2, j) = rub(i_start, k-2, j) - fzp(k-1)*&
&            temp47b3
          wb(i_start, k, j) = wb(i_start, k, j) + temp47b4
          wb(i_start-1, k, j) = wb(i_start-1, k, j) + temp47b4
          fqxb(i_start, k) = 0.0
          DO k=ktf,kts+1,-1
            temp47b1 = 0.5*(w(i_start, k, j)+w(i_start-1, k, j))*fqxb(&
&              i_start, k)
            temp47b2 = 0.5*(fzm(k)*ru(i_start, k, j)+fzp(k)*ru(i_start, &
&              k-1, j))*fqxb(i_start, k)
            rub(i_start, k, j) = rub(i_start, k, j) + fzm(k)*temp47b1
            rub(i_start, k-1, j) = rub(i_start, k-1, j) + fzp(k)*&
&              temp47b1
            wb(i_start, k, j) = wb(i_start, k, j) + temp47b2
            wb(i_start-1, k, j) = wb(i_start-1, k, j) + temp47b2
            fqxb(i_start, k) = 0.0
          END DO
          CALL POPINTEGER4(k)
        END IF
        k = ktf + 1
        DO i=i_end_f,i_start_f,-1
          temp47b0 = vel*fqxb(i, k)/12.0
          velb = (7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k, j)&
&            )*fqxb(i, k)/12.0
          wb(i, k, j) = wb(i, k, j) + 7.*temp47b0
          wb(i-1, k, j) = wb(i-1, k, j) + 7.*temp47b0
          wb(i+1, k, j) = wb(i+1, k, j) - temp47b0
          wb(i-2, k, j) = wb(i-2, k, j) - temp47b0
          fqxb(i, k) = 0.0
          CALL POPREAL8(vel)
          rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
          rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
        END DO
        DO k=ktf,kts+1,-1
          DO i=i_end_f,i_start_f,-1
            vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
            temp47b = vel*fqxb(i, k)/12.0
            velb = (7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k, &
&              j))*fqxb(i, k)/12.0
            wb(i, k, j) = wb(i, k, j) + 7.*temp47b
            wb(i-1, k, j) = wb(i-1, k, j) + 7.*temp47b
            wb(i+1, k, j) = wb(i+1, k, j) - temp47b
            wb(i-2, k, j) = wb(i-2, k, j) - temp47b
            fqxb(i, k) = 0.0
            CALL POPREAL8(vel)
            rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
            rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
          END DO
        END DO
      END DO
    END IF
  ELSE IF (branch .EQ. 6) THEN
    fqxb = 0.0
    CALL POPINTEGER4(ad_from15)
    CALL POPINTEGER4(ad_to15)
    DO j=ad_to15,ad_from15,-1
      DO k=ktf+1,kts+1,-1
        CALL POPINTEGER4(ad_from14)
        CALL POPINTEGER4(ad_to14)
        DO i=ad_to14,ad_from14,-1
          mrdx = msftx(i, j)*rdx
          fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
          fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      CALL POPCONTROL1B(branch)
      IF (branch .NE. 0) THEN
        CALL POPINTEGER4(ad_to13)
        DO i=ad_to13,i_end_f+1,-1
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            k = ktf + 1
            temp43 = w(i+1, k, j) - w(i-2, k, j) - 3.*(w(i, k, j)-w(i-1&
&              , k, j))
            temp46 = SIGN(1., vel)
            temp45 = temp46/12.0
            temp44 = SIGN(1, time_step)
            temp43b = vel*fqxb(i, k)
            temp43b0 = temp43b/12.0
            temp43b1 = temp44*temp45*temp43b
            velb = ((7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k&
&              , j))/12.0+temp44*(temp45*temp43))*fqxb(i, k)
            wb(i, k, j) = wb(i, k, j) + 7.*temp43b0 - 3.*temp43b1
            wb(i-1, k, j) = wb(i-1, k, j) + 3.*temp43b1 + 7.*temp43b0
            wb(i+1, k, j) = wb(i+1, k, j) + temp43b1 - temp43b0
            wb(i-2, k, j) = wb(i-2, k, j) - temp43b1 - temp43b0
            fqxb(i, k) = 0.0
            CALL POPREAL8(vel)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
            DO k=ktf,kts+1,-1
              vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
              temp39 = w(i+1, k, j) - w(i-2, k, j) - 3.*(w(i, k, j)-w(i-&
&                1, k, j))
              temp42 = SIGN(1., vel)
              temp41 = temp42/12.0
              temp40 = SIGN(1, time_step)
              temp39b3 = vel*fqxb(i, k)
              temp39b4 = temp39b3/12.0
              temp39b5 = temp40*temp41*temp39b3
              velb = ((7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, &
&                k, j))/12.0+temp40*(temp41*temp39))*fqxb(i, k)
              wb(i, k, j) = wb(i, k, j) + 7.*temp39b4 - 3.*temp39b5
              wb(i-1, k, j) = wb(i-1, k, j) + 3.*temp39b5 + 7.*temp39b4
              wb(i+1, k, j) = wb(i+1, k, j) + temp39b5 - temp39b4
              wb(i-2, k, j) = wb(i-2, k, j) - temp39b5 - temp39b4
              fqxb(i, k) = 0.0
              CALL POPREAL8(vel)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
            END DO
            CALL POPINTEGER4(k)
          END IF
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            k = ktf + 1
            temp39b1 = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
            temp39b2 = 0.5*((2.-fzm(k-1))*ru(i, k-1, j)-fzp(k-1)*ru(i, k&
&              -2, j))*fqxb(i, k)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*temp39b1
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*temp39b1
            wb(i, k, j) = wb(i, k, j) + temp39b2
            wb(i-1, k, j) = wb(i-1, k, j) + temp39b2
            fqxb(i, k) = 0.0
            DO k=ktf,kts+1,-1
              temp39b = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
              temp39b0 = 0.5*(fzm(k)*ru(i, k, j)+fzp(k)*ru(i, k-1, j))*&
&                fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*temp39b
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*temp39b
              wb(i, k, j) = wb(i, k, j) + temp39b0
              wb(i-1, k, j) = wb(i-1, k, j) + temp39b0
              fqxb(i, k) = 0.0
            END DO
            CALL POPINTEGER4(k)
          END IF
        END DO
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(ad_from13)
        DO i=i_start_f-1,ad_from13,-1
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            k = ktf + 1
            temp35 = w(i+1, k, j) - w(i-2, k, j) - 3.*(w(i, k, j)-w(i-1&
&              , k, j))
            temp38 = SIGN(1., vel)
            temp37 = temp38/12.0
            temp36 = SIGN(1, time_step)
            temp35b = vel*fqxb(i, k)
            temp35b0 = temp35b/12.0
            temp35b1 = temp36*temp37*temp35b
            velb = ((7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k&
&              , j))/12.0+temp36*(temp37*temp35))*fqxb(i, k)
            wb(i, k, j) = wb(i, k, j) + 7.*temp35b0 - 3.*temp35b1
            wb(i-1, k, j) = wb(i-1, k, j) + 3.*temp35b1 + 7.*temp35b0
            wb(i+1, k, j) = wb(i+1, k, j) + temp35b1 - temp35b0
            wb(i-2, k, j) = wb(i-2, k, j) - temp35b1 - temp35b0
            fqxb(i, k) = 0.0
            CALL POPREAL8(vel)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
            DO k=ktf,kts+1,-1
              vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
              temp31 = w(i+1, k, j) - w(i-2, k, j) - 3.*(w(i, k, j)-w(i-&
&                1, k, j))
              temp34 = SIGN(1., vel)
              temp33 = temp34/12.0
              temp32 = SIGN(1, time_step)
              temp31b3 = vel*fqxb(i, k)
              temp31b4 = temp31b3/12.0
              temp31b5 = temp32*temp33*temp31b3
              velb = ((7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, &
&                k, j))/12.0+temp32*(temp33*temp31))*fqxb(i, k)
              wb(i, k, j) = wb(i, k, j) + 7.*temp31b4 - 3.*temp31b5
              wb(i-1, k, j) = wb(i-1, k, j) + 3.*temp31b5 + 7.*temp31b4
              wb(i+1, k, j) = wb(i+1, k, j) + temp31b5 - temp31b4
              wb(i-2, k, j) = wb(i-2, k, j) - temp31b5 - temp31b4
              fqxb(i, k) = 0.0
              CALL POPREAL8(vel)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
            END DO
            CALL POPINTEGER4(k)
          END IF
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            k = ktf + 1
            temp31b1 = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
            temp31b2 = 0.5*((2.-fzm(k-1))*ru(i, k-1, j)-fzp(k-1)*ru(i, k&
&              -2, j))*fqxb(i, k)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*temp31b1
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*temp31b1
            wb(i, k, j) = wb(i, k, j) + temp31b2
            wb(i-1, k, j) = wb(i-1, k, j) + temp31b2
            fqxb(i, k) = 0.0
            DO k=ktf,kts+1,-1
              temp31b = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
              temp31b0 = 0.5*(fzm(k)*ru(i, k, j)+fzp(k)*ru(i, k-1, j))*&
&                fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*temp31b
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*temp31b
              wb(i, k, j) = wb(i, k, j) + temp31b0
              wb(i-1, k, j) = wb(i-1, k, j) + temp31b0
              fqxb(i, k) = 0.0
            END DO
            CALL POPINTEGER4(k)
          END IF
        END DO
      END IF
      k = ktf + 1
      DO i=i_end_f,i_start_f,-1
        temp27 = w(i+2, k, j) - w(i-3, k, j) + 10.*(w(i, k, j)-w(i-1, k&
&          , j)) - 5.*(w(i+1, k, j)-w(i-2, k, j))
        temp30 = SIGN(1., vel)
        temp29 = temp30/60.0
        temp28 = SIGN(1, time_step)
        temp27b = vel*fqxb(i, k)
        temp27b0 = temp27b/60.0
        temp27b1 = -(temp28*temp29*temp27b)
        velb = ((37.*(w(i, k, j)+w(i-1, k, j))-8.*(w(i+1, k, j)+w(i-2, k&
&          , j))+w(i+2, k, j)+w(i-3, k, j))/60.0-temp28*(temp29*temp27))*&
&          fqxb(i, k)
        wb(i, k, j) = wb(i, k, j) + 10.*temp27b1 + 37.*temp27b0
        wb(i-1, k, j) = wb(i-1, k, j) + 37.*temp27b0 - 10.*temp27b1
        wb(i+1, k, j) = wb(i+1, k, j) - 5.*temp27b1 - 8.*temp27b0
        wb(i-2, k, j) = wb(i-2, k, j) + 5.*temp27b1 - 8.*temp27b0
        wb(i+2, k, j) = wb(i+2, k, j) + temp27b1 + temp27b0
        wb(i-3, k, j) = wb(i-3, k, j) + temp27b0 - temp27b1
        fqxb(i, k) = 0.0
        CALL POPREAL8(vel)
        rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
        rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end_f,i_start_f,-1
          vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
          temp23 = w(i+2, k, j) - w(i-3, k, j) + 10.*(w(i, k, j)-w(i-1, &
&            k, j)) - 5.*(w(i+1, k, j)-w(i-2, k, j))
          temp26 = SIGN(1., vel)
          temp25 = temp26/60.0
          temp24 = SIGN(1, time_step)
          temp23b = vel*fqxb(i, k)
          temp23b0 = temp23b/60.0
          temp23b1 = -(temp24*temp25*temp23b)
          velb = ((37.*(w(i, k, j)+w(i-1, k, j))-8.*(w(i+1, k, j)+w(i-2&
&            , k, j))+w(i+2, k, j)+w(i-3, k, j))/60.0-temp24*(temp25*&
&            temp23))*fqxb(i, k)
          wb(i, k, j) = wb(i, k, j) + 10.*temp23b1 + 37.*temp23b0
          wb(i-1, k, j) = wb(i-1, k, j) + 37.*temp23b0 - 10.*temp23b1
          wb(i+1, k, j) = wb(i+1, k, j) - 5.*temp23b1 - 8.*temp23b0
          wb(i-2, k, j) = wb(i-2, k, j) + 5.*temp23b1 - 8.*temp23b0
          wb(i+2, k, j) = wb(i+2, k, j) + temp23b1 + temp23b0
          wb(i-3, k, j) = wb(i-3, k, j) + temp23b0 - temp23b1
          fqxb(i, k) = 0.0
          CALL POPREAL8(vel)
          rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
          rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
    fqyb = 0.0
    CALL POPINTEGER4(ad_from12)
    CALL POPINTEGER4(ad_to12)
    DO j=ad_to12,ad_from12,-1
      CALL POPINTEGER4(jp0)
      CALL POPINTEGER4(jp1)
      CALL POPCONTROL2B(branch)
      IF (branch .LT. 2) THEN
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from9)
            CALL POPINTEGER4(ad_to9)
            DO i=ad_to9,ad_from9,-1
              mrdy = msftx(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from10)
            CALL POPINTEGER4(ad_to10)
            DO i=ad_to10,ad_from10,-1
              mrdy = msftx(i, j-1)*rdy
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
      ELSE IF (branch .EQ. 2) THEN
        DO k=ktf+1,kts+1,-1
          CALL POPINTEGER4(ad_from11)
          CALL POPINTEGER4(ad_to11)
          DO i=ad_to11,ad_from11,-1
            mrdy = msftx(i, j-1)*rdy
            fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j-1&
&              )
            fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j-1&
&              )
          END DO
        END DO
        CALL POPINTEGER4(k)
      END IF
      CALL POPCONTROL3B(branch)
      IF (branch .LT. 3) THEN
        IF (branch .EQ. 0) THEN
          CALL POPINTEGER4(ad_from0)
          CALL POPINTEGER4(ad_to0)
          DO i=ad_to0,ad_from0,-1
            temp3 = w(i, k, j+2) - w(i, k, j-3) + 10.*(w(i, k, j)-w(i, k&
&              , j-1)) - 5.*(w(i, k, j+1)-w(i, k, j-2))
            temp6 = SIGN(1., vel)
            temp5 = temp6/60.0
            temp4 = SIGN(1, time_step)
            temp3b = vel*fqyb(i, k, jp1)
            temp3b0 = temp3b/60.0
            temp3b1 = -(temp4*temp5*temp3b)
            velb = ((37.*(w(i, k, j)+w(i, k, j-1))-8.*(w(i, k, j+1)+w(i&
&              , k, j-2))+w(i, k, j+2)+w(i, k, j-3))/60.0-temp4*(temp5*&
&              temp3))*fqyb(i, k, jp1)
            wb(i, k, j) = wb(i, k, j) + 10.*temp3b1 + 37.*temp3b0
            wb(i, k, j-1) = wb(i, k, j-1) + 37.*temp3b0 - 10.*temp3b1
            wb(i, k, j+1) = wb(i, k, j+1) - 5.*temp3b1 - 8.*temp3b0
            wb(i, k, j-2) = wb(i, k, j-2) + 5.*temp3b1 - 8.*temp3b0
            wb(i, k, j+2) = wb(i, k, j+2) + temp3b1 + temp3b0
            wb(i, k, j-3) = wb(i, k, j-3) + temp3b0 - temp3b1
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from)
            CALL POPINTEGER4(ad_to)
            DO i=ad_to,ad_from,-1
              vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
              temp = w(i, k, j+2) - w(i, k, j-3) + 10.*(w(i, k, j)-w(i, &
&                k, j-1)) - 5.*(w(i, k, j+1)-w(i, k, j-2))
              temp2 = SIGN(1., vel)
              temp1 = temp2/60.0
              temp0 = SIGN(1, time_step)
              tempb = vel*fqyb(i, k, jp1)
              tempb0 = tempb/60.0
              tempb1 = -(temp0*temp1*tempb)
              velb = ((37.*(w(i, k, j)+w(i, k, j-1))-8.*(w(i, k, j+1)+w(&
&                i, k, j-2))+w(i, k, j+2)+w(i, k, j-3))/60.0-temp0*(temp1&
&                *temp))*fqyb(i, k, jp1)
              wb(i, k, j) = wb(i, k, j) + 10.*tempb1 + 37.*tempb0
              wb(i, k, j-1) = wb(i, k, j-1) + 37.*tempb0 - 10.*tempb1
              wb(i, k, j+1) = wb(i, k, j+1) - 5.*tempb1 - 8.*tempb0
              wb(i, k, j-2) = wb(i, k, j-2) + 5.*tempb1 - 8.*tempb0
              wb(i, k, j+2) = wb(i, k, j+2) + tempb1 + tempb0
              wb(i, k, j-3) = wb(i, k, j-3) + tempb0 - tempb1
              fqyb(i, k, jp1) = 0.0
              CALL POPREAL8(vel)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE IF (branch .EQ. 1) THEN
          CALL POPINTEGER4(ad_from2)
          CALL POPINTEGER4(ad_to2)
          DO i=ad_to2,ad_from2,-1
            temp7b1 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
            temp7b2 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, k-&
&              2, j))*fqyb(i, k, jp1)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp7b1
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp7b1
            wb(i, k, j) = wb(i, k, j) + temp7b2
            wb(i, k, j-1) = wb(i, k, j-1) + temp7b2
            fqyb(i, k, jp1) = 0.0
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from1)
            CALL POPINTEGER4(ad_to1)
            DO i=ad_to1,ad_from1,-1
              temp7b = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
              temp7b0 = 0.5*(fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&                fqyb(i, k, jp1)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp7b
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp7b
              wb(i, k, j) = wb(i, k, j) + temp7b0
              wb(i, k, j-1) = wb(i, k, j-1) + temp7b0
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE
          CALL POPINTEGER4(ad_from4)
          CALL POPINTEGER4(ad_to4)
          DO i=ad_to4,ad_from4,-1
            temp11 = w(i, k, j+1) - w(i, k, j-2) - 3.*(w(i, k, j)-w(i, k&
&              , j-1))
            temp14 = SIGN(1., vel)
            temp13 = temp14/12.0
            temp12 = SIGN(1, time_step)
            temp11b = vel*fqyb(i, k, jp1)
            temp11b0 = temp11b/12.0
            temp11b1 = temp12*temp13*temp11b
            velb = ((7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j&
&              -2))/12.0+temp12*(temp13*temp11))*fqyb(i, k, jp1)
            wb(i, k, j) = wb(i, k, j) + 7.*temp11b0 - 3.*temp11b1
            wb(i, k, j-1) = wb(i, k, j-1) + 3.*temp11b1 + 7.*temp11b0
            wb(i, k, j+1) = wb(i, k, j+1) + temp11b1 - temp11b0
            wb(i, k, j-2) = wb(i, k, j-2) - temp11b1 - temp11b0
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from3)
            CALL POPINTEGER4(ad_to3)
            DO i=ad_to3,ad_from3,-1
              vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
              temp7 = w(i, k, j+1) - w(i, k, j-2) - 3.*(w(i, k, j)-w(i, &
&                k, j-1))
              temp10 = SIGN(1., vel)
              temp9 = temp10/12.0
              temp8 = SIGN(1, time_step)
              temp7b3 = vel*fqyb(i, k, jp1)
              temp7b4 = temp7b3/12.0
              temp7b5 = temp8*temp9*temp7b3
              velb = ((7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k&
&                , j-2))/12.0+temp8*(temp9*temp7))*fqyb(i, k, jp1)
              wb(i, k, j) = wb(i, k, j) + 7.*temp7b4 - 3.*temp7b5
              wb(i, k, j-1) = wb(i, k, j-1) + 3.*temp7b5 + 7.*temp7b4
              wb(i, k, j+1) = wb(i, k, j+1) + temp7b5 - temp7b4
              wb(i, k, j-2) = wb(i, k, j-2) - temp7b5 - temp7b4
              fqyb(i, k, jp1) = 0.0
              CALL POPREAL8(vel)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
      ELSE IF (branch .EQ. 3) THEN
        CALL POPINTEGER4(ad_from6)
        CALL POPINTEGER4(ad_to6)
        DO i=ad_to6,ad_from6,-1
          temp15b1 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
          temp15b2 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, k-2&
&            , j))*fqyb(i, k, jp1)
          rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp15b1
          rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp15b1
          wb(i, k, j) = wb(i, k, j) + temp15b2
          wb(i, k, j-1) = wb(i, k, j-1) + temp15b2
          fqyb(i, k, jp1) = 0.0
        END DO
        DO k=ktf,kts+1,-1
          CALL POPINTEGER4(ad_from5)
          CALL POPINTEGER4(ad_to5)
          DO i=ad_to5,ad_from5,-1
            temp15b = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
            temp15b0 = 0.5*(fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&              fqyb(i, k, jp1)
            rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp15b
            rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp15b
            wb(i, k, j) = wb(i, k, j) + temp15b0
            wb(i, k, j-1) = wb(i, k, j-1) + temp15b0
            fqyb(i, k, jp1) = 0.0
          END DO
        END DO
        CALL POPINTEGER4(k)
      ELSE IF (branch .EQ. 4) THEN
        CALL POPINTEGER4(ad_from8)
        CALL POPINTEGER4(ad_to8)
        DO i=ad_to8,ad_from8,-1
          temp19 = w(i, k, j+1) - w(i, k, j-2) - 3.*(w(i, k, j)-w(i, k, &
&            j-1))
          temp22 = SIGN(1., vel)
          temp21 = temp22/12.0
          temp20 = SIGN(1, time_step)
          temp19b = vel*fqyb(i, k, jp1)
          temp19b0 = temp19b/12.0
          temp19b1 = temp20*temp21*temp19b
          velb = ((7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j-2&
&            ))/12.0+temp20*(temp21*temp19))*fqyb(i, k, jp1)
          wb(i, k, j) = wb(i, k, j) + 7.*temp19b0 - 3.*temp19b1
          wb(i, k, j-1) = wb(i, k, j-1) + 3.*temp19b1 + 7.*temp19b0
          wb(i, k, j+1) = wb(i, k, j+1) + temp19b1 - temp19b0
          wb(i, k, j-2) = wb(i, k, j-2) - temp19b1 - temp19b0
          fqyb(i, k, jp1) = 0.0
          CALL POPREAL8(vel)
          rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
          rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
        END DO
        DO k=ktf,kts+1,-1
          CALL POPINTEGER4(ad_from7)
          CALL POPINTEGER4(ad_to7)
          DO i=ad_to7,ad_from7,-1
            vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
            temp15 = w(i, k, j+1) - w(i, k, j-2) - 3.*(w(i, k, j)-w(i, k&
&              , j-1))
            temp18 = SIGN(1., vel)
            temp17 = temp18/12.0
            temp16 = SIGN(1, time_step)
            temp15b3 = vel*fqyb(i, k, jp1)
            temp15b4 = temp15b3/12.0
            temp15b5 = temp16*temp17*temp15b3
            velb = ((7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j&
&              -2))/12.0+temp16*(temp17*temp15))*fqyb(i, k, jp1)
            wb(i, k, j) = wb(i, k, j) + 7.*temp15b4 - 3.*temp15b5
            wb(i, k, j-1) = wb(i, k, j-1) + 3.*temp15b5 + 7.*temp15b4
            wb(i, k, j+1) = wb(i, k, j+1) + temp15b5 - temp15b4
            wb(i, k, j-2) = wb(i, k, j-2) - temp15b5 - temp15b4
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
            rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
          END DO
        END DO
        CALL POPINTEGER4(k)
      END IF
    END DO
  ELSE
    fqxb = 0.0
    CALL POPINTEGER4(ad_from66)
    CALL POPINTEGER4(ad_to66)
    DO j=ad_to66,ad_from66,-1
      DO k=ktf+1,kts+1,-1
        CALL POPINTEGER4(ad_from65)
        CALL POPINTEGER4(ad_to65)
        DO i=ad_to65,ad_from65,-1
          mrdx = msftx(i, j)*rdx
          fqxb(i+1, k) = fqxb(i+1, k) - mrdx*tendencyb(i, k, j)
          fqxb(i, k) = fqxb(i, k) + mrdx*tendencyb(i, k, j)
        END DO
      END DO
      CALL POPINTEGER4(k)
      CALL POPCONTROL1B(branch)
      IF (branch .NE. 0) THEN
        CALL POPINTEGER4(ad_to64)
        DO i=ad_to64,i_end_f+1,-1
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            k = ktf + 1
            temp63b58 = vel*fqxb(i, k)/12.0
            velb = (7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k, &
&              j))*fqxb(i, k)/12.0
            wb(i, k, j) = wb(i, k, j) + 7.*temp63b58
            wb(i-1, k, j) = wb(i-1, k, j) + 7.*temp63b58
            wb(i+1, k, j) = wb(i+1, k, j) - temp63b58
            wb(i-2, k, j) = wb(i-2, k, j) - temp63b58
            fqxb(i, k) = 0.0
            CALL POPREAL8(vel)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
            DO k=ktf,kts+1,-1
              vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
              temp63b57 = vel*fqxb(i, k)/12.0
              velb = (7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k&
&                , j))*fqxb(i, k)/12.0
              wb(i, k, j) = wb(i, k, j) + 7.*temp63b57
              wb(i-1, k, j) = wb(i-1, k, j) + 7.*temp63b57
              wb(i+1, k, j) = wb(i+1, k, j) - temp63b57
              wb(i-2, k, j) = wb(i-2, k, j) - temp63b57
              fqxb(i, k) = 0.0
              CALL POPREAL8(vel)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
            END DO
            CALL POPINTEGER4(k)
          END IF
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            k = ktf + 1
            temp63b55 = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
            temp63b56 = 0.5*((2.-fzm(k-1))*ru(i, k-1, j)-fzp(k-1)*ru(i, &
&              k-2, j))*fqxb(i, k)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*temp63b55
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*temp63b55
            wb(i, k, j) = wb(i, k, j) + temp63b56
            wb(i-1, k, j) = wb(i-1, k, j) + temp63b56
            fqxb(i, k) = 0.0
            DO k=ktf,kts+1,-1
              temp63b53 = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
              temp63b54 = 0.5*(fzm(k)*ru(i, k, j)+fzp(k)*ru(i, k-1, j))*&
&                fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*temp63b53
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*temp63b53
              wb(i, k, j) = wb(i, k, j) + temp63b54
              wb(i-1, k, j) = wb(i-1, k, j) + temp63b54
              fqxb(i, k) = 0.0
            END DO
            CALL POPINTEGER4(k)
          END IF
        END DO
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        CALL POPINTEGER4(ad_from64)
        DO i=i_start_f-1,ad_from64,-1
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            k = ktf + 1
            temp63b52 = vel*fqxb(i, k)/12.0
            velb = (7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k, &
&              j))*fqxb(i, k)/12.0
            wb(i, k, j) = wb(i, k, j) + 7.*temp63b52
            wb(i-1, k, j) = wb(i-1, k, j) + 7.*temp63b52
            wb(i+1, k, j) = wb(i+1, k, j) - temp63b52
            wb(i-2, k, j) = wb(i-2, k, j) - temp63b52
            fqxb(i, k) = 0.0
            CALL POPREAL8(vel)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
            DO k=ktf,kts+1,-1
              vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
              temp63b51 = vel*fqxb(i, k)/12.0
              velb = (7.*(w(i, k, j)+w(i-1, k, j))-w(i+1, k, j)-w(i-2, k&
&                , j))*fqxb(i, k)/12.0
              wb(i, k, j) = wb(i, k, j) + 7.*temp63b51
              wb(i-1, k, j) = wb(i-1, k, j) + 7.*temp63b51
              wb(i+1, k, j) = wb(i+1, k, j) - temp63b51
              wb(i-2, k, j) = wb(i-2, k, j) - temp63b51
              fqxb(i, k) = 0.0
              CALL POPREAL8(vel)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
            END DO
            CALL POPINTEGER4(k)
          END IF
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            k = ktf + 1
            temp63b49 = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
            temp63b50 = 0.5*((2.-fzm(k-1))*ru(i, k-1, j)-fzp(k-1)*ru(i, &
&              k-2, j))*fqxb(i, k)
            rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*temp63b49
            rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*temp63b49
            wb(i, k, j) = wb(i, k, j) + temp63b50
            wb(i-1, k, j) = wb(i-1, k, j) + temp63b50
            fqxb(i, k) = 0.0
            DO k=ktf,kts+1,-1
              temp63b47 = 0.5*(w(i, k, j)+w(i-1, k, j))*fqxb(i, k)
              temp63b48 = 0.5*(fzm(k)*ru(i, k, j)+fzp(k)*ru(i, k-1, j))*&
&                fqxb(i, k)
              rub(i, k, j) = rub(i, k, j) + fzm(k)*temp63b47
              rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*temp63b47
              wb(i, k, j) = wb(i, k, j) + temp63b48
              wb(i-1, k, j) = wb(i-1, k, j) + temp63b48
              fqxb(i, k) = 0.0
            END DO
            CALL POPINTEGER4(k)
          END IF
        END DO
      END IF
      k = ktf + 1
      DO i=i_end_f,i_start_f,-1
        temp63b46 = vel*fqxb(i, k)/60.0
        velb = (37.*(w(i, k, j)+w(i-1, k, j))-8.*(w(i+1, k, j)+w(i-2, k&
&          , j))+w(i+2, k, j)+w(i-3, k, j))*fqxb(i, k)/60.0
        wb(i, k, j) = wb(i, k, j) + 37.*temp63b46
        wb(i-1, k, j) = wb(i-1, k, j) + 37.*temp63b46
        wb(i+1, k, j) = wb(i+1, k, j) - 8.*temp63b46
        wb(i-2, k, j) = wb(i-2, k, j) - 8.*temp63b46
        wb(i+2, k, j) = wb(i+2, k, j) + temp63b46
        wb(i-3, k, j) = wb(i-3, k, j) + temp63b46
        fqxb(i, k) = 0.0
        CALL POPREAL8(vel)
        rub(i, k-1, j) = rub(i, k-1, j) + (2.-fzm(k-1))*velb
        rub(i, k-2, j) = rub(i, k-2, j) - fzp(k-1)*velb
      END DO
      DO k=ktf,kts+1,-1
        DO i=i_end_f,i_start_f,-1
          vel = fzm(k)*ru(i, k, j) + fzp(k)*ru(i, k-1, j)
          temp63b45 = vel*fqxb(i, k)/60.0
          velb = (37.*(w(i, k, j)+w(i-1, k, j))-8.*(w(i+1, k, j)+w(i-2, &
&            k, j))+w(i+2, k, j)+w(i-3, k, j))*fqxb(i, k)/60.0
          wb(i, k, j) = wb(i, k, j) + 37.*temp63b45
          wb(i-1, k, j) = wb(i-1, k, j) + 37.*temp63b45
          wb(i+1, k, j) = wb(i+1, k, j) - 8.*temp63b45
          wb(i-2, k, j) = wb(i-2, k, j) - 8.*temp63b45
          wb(i+2, k, j) = wb(i+2, k, j) + temp63b45
          wb(i-3, k, j) = wb(i-3, k, j) + temp63b45
          fqxb(i, k) = 0.0
          CALL POPREAL8(vel)
          rub(i, k, j) = rub(i, k, j) + fzm(k)*velb
          rub(i, k-1, j) = rub(i, k-1, j) + fzp(k)*velb
        END DO
      END DO
      CALL POPINTEGER4(k)
    END DO
    fqyb = 0.0
    CALL POPINTEGER4(ad_from63)
    CALL POPINTEGER4(ad_to63)
    DO j=ad_to63,ad_from63,-1
      CALL POPINTEGER4(jp0)
      CALL POPINTEGER4(jp1)
      CALL POPCONTROL2B(branch)
      IF (branch .LT. 2) THEN
        IF (branch .EQ. 0) THEN
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from60)
            CALL POPINTEGER4(ad_to60)
            DO i=ad_to60,ad_from60,-1
              mrdy = msftx(i, j-1)*rdy
              fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE
          DO k=ktf,kts,-1
            CALL POPINTEGER4(ad_from61)
            CALL POPINTEGER4(ad_to61)
            DO i=ad_to61,ad_from61,-1
              mrdy = msftx(i, j-1)*rdy
              fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j&
&                -1)
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
      ELSE IF (branch .EQ. 2) THEN
        DO k=ktf+1,kts+1,-1
          CALL POPINTEGER4(ad_from62)
          CALL POPINTEGER4(ad_to62)
          DO i=ad_to62,ad_from62,-1
            mrdy = msftx(i, j-1)*rdy
            fqyb(i, k, jp1) = fqyb(i, k, jp1) - mrdy*tendencyb(i, k, j-1&
&              )
            fqyb(i, k, jp0) = fqyb(i, k, jp0) + mrdy*tendencyb(i, k, j-1&
&              )
          END DO
        END DO
        CALL POPINTEGER4(k)
      END IF
      CALL POPCONTROL3B(branch)
      IF (branch .LT. 3) THEN
        IF (branch .EQ. 0) THEN
          CALL POPINTEGER4(ad_from51)
          CALL POPINTEGER4(ad_to51)
          DO i=ad_to51,ad_from51,-1
            temp63b32 = vel*fqyb(i, k, jp1)/60.0
            velb = (37.*(w(i, k, j)+w(i, k, j-1))-8.*(w(i, k, j+1)+w(i, &
&              k, j-2))+w(i, k, j+2)+w(i, k, j-3))*fqyb(i, k, jp1)/60.0
            wb(i, k, j) = wb(i, k, j) + 37.*temp63b32
            wb(i, k, j-1) = wb(i, k, j-1) + 37.*temp63b32
            wb(i, k, j+1) = wb(i, k, j+1) - 8.*temp63b32
            wb(i, k, j-2) = wb(i, k, j-2) - 8.*temp63b32
            wb(i, k, j+2) = wb(i, k, j+2) + temp63b32
            wb(i, k, j-3) = wb(i, k, j-3) + temp63b32
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from50)
            CALL POPINTEGER4(ad_to50)
            DO i=ad_to50,ad_from50,-1
              vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
              temp63b31 = vel*fqyb(i, k, jp1)/60.0
              velb = (37.*(w(i, k, j)+w(i, k, j-1))-8.*(w(i, k, j+1)+w(i&
&                , k, j-2))+w(i, k, j+2)+w(i, k, j-3))*fqyb(i, k, jp1)/&
&                60.0
              wb(i, k, j) = wb(i, k, j) + 37.*temp63b31
              wb(i, k, j-1) = wb(i, k, j-1) + 37.*temp63b31
              wb(i, k, j+1) = wb(i, k, j+1) - 8.*temp63b31
              wb(i, k, j-2) = wb(i, k, j-2) - 8.*temp63b31
              wb(i, k, j+2) = wb(i, k, j+2) + temp63b31
              wb(i, k, j-3) = wb(i, k, j-3) + temp63b31
              fqyb(i, k, jp1) = 0.0
              CALL POPREAL8(vel)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE IF (branch .EQ. 1) THEN
          CALL POPINTEGER4(ad_from53)
          CALL POPINTEGER4(ad_to53)
          DO i=ad_to53,ad_from53,-1
            temp63b35 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
            temp63b36 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, &
&              k-2, j))*fqyb(i, k, jp1)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp63b35
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp63b35
            wb(i, k, j) = wb(i, k, j) + temp63b36
            wb(i, k, j-1) = wb(i, k, j-1) + temp63b36
            fqyb(i, k, jp1) = 0.0
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from52)
            CALL POPINTEGER4(ad_to52)
            DO i=ad_to52,ad_from52,-1
              temp63b33 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
              temp63b34 = 0.5*(fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&                fqyb(i, k, jp1)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp63b33
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp63b33
              wb(i, k, j) = wb(i, k, j) + temp63b34
              wb(i, k, j-1) = wb(i, k, j-1) + temp63b34
              fqyb(i, k, jp1) = 0.0
            END DO
          END DO
          CALL POPINTEGER4(k)
        ELSE
          CALL POPINTEGER4(ad_from55)
          CALL POPINTEGER4(ad_to55)
          DO i=ad_to55,ad_from55,-1
            temp63b38 = vel*fqyb(i, k, jp1)/12.0
            velb = (7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j-&
&              2))*fqyb(i, k, jp1)/12.0
            wb(i, k, j) = wb(i, k, j) + 7.*temp63b38
            wb(i, k, j-1) = wb(i, k, j-1) + 7.*temp63b38
            wb(i, k, j+1) = wb(i, k, j+1) - temp63b38
            wb(i, k, j-2) = wb(i, k, j-2) - temp63b38
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
            rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
          END DO
          DO k=ktf,kts+1,-1
            CALL POPINTEGER4(ad_from54)
            CALL POPINTEGER4(ad_to54)
            DO i=ad_to54,ad_from54,-1
              vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
              temp63b37 = vel*fqyb(i, k, jp1)/12.0
              velb = (7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, &
&                j-2))*fqyb(i, k, jp1)/12.0
              wb(i, k, j) = wb(i, k, j) + 7.*temp63b37
              wb(i, k, j-1) = wb(i, k, j-1) + 7.*temp63b37
              wb(i, k, j+1) = wb(i, k, j+1) - temp63b37
              wb(i, k, j-2) = wb(i, k, j-2) - temp63b37
              fqyb(i, k, jp1) = 0.0
              CALL POPREAL8(vel)
              rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
              rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
            END DO
          END DO
          CALL POPINTEGER4(k)
        END IF
      ELSE IF (branch .EQ. 3) THEN
        CALL POPINTEGER4(ad_from57)
        CALL POPINTEGER4(ad_to57)
        DO i=ad_to57,ad_from57,-1
          temp63b41 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
          temp63b42 = 0.5*((2.-fzm(k-1))*rv(i, k-1, j)-fzp(k-1)*rv(i, k-&
&            2, j))*fqyb(i, k, jp1)
          rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*temp63b41
          rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*temp63b41
          wb(i, k, j) = wb(i, k, j) + temp63b42
          wb(i, k, j-1) = wb(i, k, j-1) + temp63b42
          fqyb(i, k, jp1) = 0.0
        END DO
        DO k=ktf,kts+1,-1
          CALL POPINTEGER4(ad_from56)
          CALL POPINTEGER4(ad_to56)
          DO i=ad_to56,ad_from56,-1
            temp63b39 = 0.5*(w(i, k, j)+w(i, k, j-1))*fqyb(i, k, jp1)
            temp63b40 = 0.5*(fzm(k)*rv(i, k, j)+fzp(k)*rv(i, k-1, j))*&
&              fqyb(i, k, jp1)
            rvb(i, k, j) = rvb(i, k, j) + fzm(k)*temp63b39
            rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*temp63b39
            wb(i, k, j) = wb(i, k, j) + temp63b40
            wb(i, k, j-1) = wb(i, k, j-1) + temp63b40
            fqyb(i, k, jp1) = 0.0
          END DO
        END DO
        CALL POPINTEGER4(k)
      ELSE IF (branch .EQ. 4) THEN
        CALL POPINTEGER4(ad_from59)
        CALL POPINTEGER4(ad_to59)
        DO i=ad_to59,ad_from59,-1
          temp63b44 = vel*fqyb(i, k, jp1)/12.0
          velb = (7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j-2)&
&            )*fqyb(i, k, jp1)/12.0
          wb(i, k, j) = wb(i, k, j) + 7.*temp63b44
          wb(i, k, j-1) = wb(i, k, j-1) + 7.*temp63b44
          wb(i, k, j+1) = wb(i, k, j+1) - temp63b44
          wb(i, k, j-2) = wb(i, k, j-2) - temp63b44
          fqyb(i, k, jp1) = 0.0
          CALL POPREAL8(vel)
          rvb(i, k-1, j) = rvb(i, k-1, j) + (2.-fzm(k-1))*velb
          rvb(i, k-2, j) = rvb(i, k-2, j) - fzp(k-1)*velb
        END DO
        DO k=ktf,kts+1,-1
          CALL POPINTEGER4(ad_from58)
          CALL POPINTEGER4(ad_to58)
          DO i=ad_to58,ad_from58,-1
            vel = fzm(k)*rv(i, k, j) + fzp(k)*rv(i, k-1, j)
            temp63b43 = vel*fqyb(i, k, jp1)/12.0
            velb = (7.*(w(i, k, j)+w(i, k, j-1))-w(i, k, j+1)-w(i, k, j-&
&              2))*fqyb(i, k, jp1)/12.0
            wb(i, k, j) = wb(i, k, j) + 7.*temp63b43
            wb(i, k, j-1) = wb(i, k, j-1) + 7.*temp63b43
            wb(i, k, j+1) = wb(i, k, j+1) - temp63b43
            wb(i, k, j-2) = wb(i, k, j-2) - temp63b43
            fqyb(i, k, jp1) = 0.0
            CALL POPREAL8(vel)
            rvb(i, k, j) = rvb(i, k, j) + fzm(k)*velb
            rvb(i, k-1, j) = rvb(i, k-1, j) + fzp(k)*velb
          END DO
        END DO
        CALL POPINTEGER4(k)
      END IF
    END DO
  END IF
 100 CONTINUE
END SUBROUTINE A_ADVECT_W

   SUBROUTINE a_advect_scalar_pd(field,a_field,field_old,a_field_old,tendency, &
   a_tendency,h_tendency,a_h_tendency,z_tendency,a_z_tendency,ru,a_ru,rv,a_rv,rom,a_rom,mut,a_mut,mub,mu_old,a_mu_old, &
   time_step,config_flags,tenddec,msfux,msfuy,msfvx,msfvy,msftx,msfty,fzm,fzp,rdx,rdy,rdzw,dt, &
   ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   TYPE(grid_config_rec_type) :: config_flags
   LOGICAL :: tenddec
   INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,a_field,field_old,a_field_old, &
   ru,a_ru,rv,a_rv,rom,a_rom
   REAL,DIMENSION(ims:ime,jms:jme) :: mut,a_mut,mub,mu_old,a_mu_old
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,a_tendency
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: h_tendency, z_tendency
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_h_tendency, a_z_tendency
   REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty
   REAL,DIMENSION(kms:kme) :: fzm,fzp,rdzw
   REAL :: rdx,rdy,dt
   INTEGER :: time_step
   INTEGER :: i,j,k,itf,jtf,ktf
   INTEGER :: i_start,i_end,j_start,j_end
   INTEGER :: i_start_f,i_end_f,j_start_f,j_end_f
   INTEGER :: jmin,jmax,jp,jm,imin,imax
   REAL :: mrdx,mrdy,ub,a_ub,vb,a_vb,uw,a_uw,vw,a_vw,mu,a_mu
   REAL,DIMENSION(its-1:ite+2,kts:kte,jts-1:jte+2) :: fqx,a_fqx,fqy,a_fqy,fqz,a_fqz
   REAL,DIMENSION(its-1:ite+2,kts:kte,jts-1:jte+2) :: fqxl,a_fqxl,fqyl,a_fqyl,fqzl,a_fqzl
   INTEGER :: horz_order,vert_order
   LOGICAL :: degrade_xs,degrade_ys
   LOGICAL :: degrade_xe,degrade_ye
   INTEGER :: jp1,jp0,jtmp
   REAL :: flux_out,a_flux_out,ph_low,a_ph_low,scale,a_scale
   REAL,PARAMETER :: eps =1.e-20
   REAL :: flux3,Diff_flux3,flux4,Diff_flux4,flux5,Diff_flux5,flux6,Diff_flux6,flux_upwind, &
   Diff_flux_upwind
   REAL :: q_im3,a_q_im3,q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1, &
   q_ip2,a_q_ip2,ua,a_ua,vel,a_vel,cr,a_cr

   Diff_flux4(q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1,ua, &
   a_ua) =(7./12.)*(a_q_i +a_q_im1) -(1./12.)*(a_q_ip1 +a_q_im2)
   flux4(q_im2,q_im1,q_i,q_ip1,ua) =(7./12.)*(q_i +q_im1) -(1./12.)*(q_ip1 +q_im2)

   Diff_flux3(q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1,ua, &
   a_ua) =Diff_flux4(q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1, &
   ua,a_ua) +sign(1, time_step) *sign(1., ua) *(1./12.)*((a_q_ip1 -a_q_im2) &
   -3.*(a_q_i -a_q_im1))
   flux3(q_im2,q_im1,q_i,q_ip1,ua) =flux4(q_im2,q_im1,q_i,q_ip1,ua) +sign(1, time_step) &
   *sign(1., ua) *(1./12.)*((q_ip1 -q_im2) -3.*(q_i -q_im1))

   Diff_flux6(q_im3,a_q_im3,q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1, &
   a_q_ip1,q_ip2,a_q_ip2,ua,a_ua) =(37./60.)*(a_q_i +a_q_im1) -(2./15.) &
   *(a_q_ip1 +a_q_im2) +(1./60.)*(a_q_ip2 +a_q_im3)
   flux6(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2,ua) =(37./60.)*(q_i +q_im1) -(2./15.) &
   *(q_ip1 +q_im2) +(1./60.)*(q_ip2 +q_im3)

   Diff_flux5(q_im3,a_q_im3,q_im2,a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1, &
   a_q_ip1,q_ip2,a_q_ip2,ua,a_ua) =Diff_flux6(q_im3,a_q_im3,q_im2, &
   a_q_im2,q_im1,a_q_im1,q_i,a_q_i,q_ip1,a_q_ip1,q_ip2,a_q_ip2,ua, &
   a_ua) -sign(1, time_step) *sign(1., ua) *(1./60.)*((a_q_ip2 -a_q_im3) &
   -5.*(a_q_ip1 -a_q_im2) +10.*(a_q_i -a_q_im1))
   flux5(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2,ua) =flux6(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2, &
   ua) -sign(1, time_step) *sign(1., ua) *(1./60.)*((q_ip2 -q_im3) -5.*(q_ip1 -q_im2) &
   +10.*(q_i -q_im1))

   Diff_flux_upwind(q_im1,a_q_im1,q_i,a_q_i,cr,a_cr) =0.5*min(1.0,(cr +abs(cr)))*a_q_im1&
   +0.5*(0.0 +(a_cr +sign(1.0, cr) &
   *a_cr) -(0.0 -(a_cr +sign(1.0, cr)*a_cr))*sign(1.0, 1.0 -((cr +abs(cr)))))*0.5*q_im1&
   +0.5*max(-1.0,(cr -abs(cr)))*a_q_i +0.5*(0.0 +(a_cr -sign(1.0, cr) & 
   *a_cr) +(0.0 -(a_cr -sign(1.0, cr)*a_cr))*sign(1.0, -1.0 -((cr -abs(cr)))))*0.5*q_i
   flux_upwind(q_im1,q_i,cr) =0.5*min(1.0,(cr +abs(cr)))*q_im1+0.5*max(-1.0,(cr -abs(cr)))*q_i

   REAL :: dx,a_dx,dy,a_dy,dz,a_dz
   LOGICAL,PARAMETER :: pd_limit =.true.

   REAL :: Keep_Lpb3_cr
   REAL :: Keep_Lpb7_ub
   REAL :: Keep_Lpb11_vb
   REAL :: Keep_Lpb13_vb
   REAL :: Keep_Lpb15_vb
   REAL :: Keep_Lpb25_mu
   REAL :: Keep_Lpb25_vel
   REAL :: Keep_Lpb25_cr   
   INTEGER :: IX1,IX2,IX3

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007,a_Tmpv8,Tmpv008,a_Tmpv9, &
   Tmpv009,a_Tmpv10,Tmpv010,a_Tmpv11,Tmpv011,a_Tmpv12,Tmpv012

   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,its,min(jts-1,jds)):max0(min(jte,jde-1),min(ite,ide-1),min(jte+1,jde-1))) &
    :: Tmpv300
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,its,min(jts-1,jds)):max0(min(jte,jde-1),min(ite,ide-1),min(jte+1,jde-1))) &
    :: Tmpv301
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,its,min(jts-1,jds)):max0(min(jte,jde-1),min(ite,ide-1),min(jte+1,jde-1))) &
    :: Tmpv302
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,its,min(jts-1,jds)):max0(min(jte,jde-1),min(ite,ide-1),min(jte+1,jde-1))) &
    :: Tmpv303
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv304
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv305
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv306
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv307
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv308
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv309
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3010
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3011
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3012
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3013
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3014
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3015
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3016
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3017
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3018
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3019
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3020
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3021
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3022
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3023
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3024
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3025
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3026
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3027
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3028
   REAL,DIMENSION(min0(kts,min(its-1,ids)):max0(min(kte,kde-1),min(ite+1,ide-1)) &
   ,min0(jts,min(jts-1,jds)):max0(min(jte,jde-1),min(jte+1,jde-1))) :: Tmpv3029
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3030
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3031
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3032
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3033
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3034
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3035
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3036
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3037
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3038
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3039
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3040
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3041
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3042
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3043
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3044
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3045
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3046
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3047
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3048
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3049
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3050
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3051
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3052
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3053
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3054
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3055
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3056
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3057
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3058
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3059
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3060
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3061
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3062
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3063
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3064
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3065
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3066
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3067
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3068
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3069
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3070
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3071
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3072
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3073
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3074
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3075
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3076
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3077
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3078
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3079
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3080
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3081
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3082
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3083
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3084
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3085
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3086
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3087
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3088
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3089
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3090
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3091
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3092
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3093
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3094
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv3095
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv400
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv401
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv402
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv403
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv404
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv405
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv406
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv407
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv408
   REAL,DIMENSION(min0(its-1,ids):max0(min(ite+1,ide-1) &
   ,min(ite+1,ide-2)),min0(kts,kts+3):max0(min(kte,kde-1),min(kte,kde-1)-2) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1) &
   ,min(jte+1,jde-2))) :: Tmpv409
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+3):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-2),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4010
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+3):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-2),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4011
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+3):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-2),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4012
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+3):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-2),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4013
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+3):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-2),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4014
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+3):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-2),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4015
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4016
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4017
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4018
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4019
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4020
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4021
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4022
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4023
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4024
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4025
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4026
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4027
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4028
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4029
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4030
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+2):max0(min(kte,kde-1) &
   ,min(kte,kde-1)-1),min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2) &
   +1,min(jte+1,jde-1))) :: Tmpv4031
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4032
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4033
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4034
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4035
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4036
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4037
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4038
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),min0(kts,kts+1):min(kte,kde-1) &
   ,min0(max(jts-1,jds+1),max(jts-1,jds)):max0(min(jte+1,jde-2)+1,min(jte+1,jde-1))) :: Tmpv4039
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4040
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4041
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4042
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4043
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4044
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4045
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4046
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv4047
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4048
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4049
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4050
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4051
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4052
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4053
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4054
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4055
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4056
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4057
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4058
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4059
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4060
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4061
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4062
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4063
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4064
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4065
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4066
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4067
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4068
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4069
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4070
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4071
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4072
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4073
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4074
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4075
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4076
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4077
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv4078
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4079
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4080
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4081
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4082
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4083
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4084
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4085
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4086
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4087
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4088
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4089
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4090
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4091
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4092
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4093
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4094
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4095
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4096
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4097
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4098
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv4099
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40100
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40101
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40102
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40103
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40104
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40105
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40106
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40107
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40108
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40109
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40110
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40111
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40112
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40113
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40114
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40115
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40116
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40117
   REAL,DIMENSION(min(its-1,ids):min(ite+1,ide-1),kts:min(kte,kde-1),max(jts-1,jds+1) &
   :min(jte+1,jde-2)+1) :: Tmpv40118
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40119
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40120
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40121
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40122
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40123
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40124
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40125
   REAL,DIMENSION(ids+3:ide-3,kts:min(kte,kde-1),min(jts-1,jds):min(jte+1,jde-1)) :: Tmpv40126
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40127
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40128
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40129
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40130
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40131
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40132
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40133
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40134
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40135
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40136
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40137
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40138
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40139
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40140
   REAL,DIMENSION(kts:min(kte,kde-1),max(ids+1,its-1):ids+3-1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40141
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40142
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40143
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40144
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40145
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40146
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40147
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40148
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40149
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40150
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40151
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40152
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40153
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40154
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40155
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40156
   REAL,DIMENSION(kts:min(kte,kde-1),ide-3+1:min(ide-2,ite+1)+1,max(jts-1,jds) &
   :min(jte+1,jde-1)) :: Tmpv40157
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40158
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40159
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40160
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40161
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40162
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40163
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40164
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40165
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40166
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40167
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40168
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40169
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40170
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40171
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40172
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40173
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40174
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40175
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40176
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40177
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40178
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40179
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40180
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40181
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40182
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40183
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40184
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40185
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40186
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40187
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40188
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40189
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40190
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40191
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40192
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40193
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40194
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40195
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40196
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40197
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40198
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40199
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40200
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40201
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40202
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40203
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40204
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40205
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40206
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40207
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40208
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40209
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40210
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40211
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40212
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40213
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40214
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40215
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40216
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40217
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40218
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40219
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40220
   REAL,DIMENSION(max(ids+1,its)+1:ide-2,kts:min(kte,kde-1),jts:min(jte,jde-1)) :: Tmpv40221
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40222
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40223
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40224
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40225
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40226
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40227
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40228
   REAL,DIMENSION(its:min(ite,ide-1),kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)+1) &
    :: Tmpv40229
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40230
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40231
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40232
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40233
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40234
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40235
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40236
   REAL,DIMENSION(its:min(ite,ide-1)+1,kts:min(kte,kde-1),max(jts,jds+1):min(jte,jde-2)) &
    :: Tmpv40237

!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[1]

    IF (config_flags%polar) THEN

          fqx(:,:,:)  = 0.
          fqy(:,:,:)  = 0.
          fqz(:,:,:)  = 0.
          fqxl(:,:,:) = 0.
          fqyl(:,:,:) = 0.
          fqzl(:,:,:) = 0.

   END IF

!LPB[2]

     ktf=MIN(kte,kde-1)
     horz_order = config_flags%h_sca_adv_order
     vert_order = config_flags%v_sca_adv_order

     degrade_xs = .true.
     degrade_xe = .true.
     degrade_ys = .true.
     degrade_ye = .true.

!LPB[3]
       Keep_Lpb3_cr =cr

  horizontal_order_test : IF( horz_order == 6 ) THEN

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+3)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-4)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+3)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-4)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = MAX(its-1,ids)

      IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts-1,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte+1,jde-2)
           j_end_f = jde-3
         ENDIF

         j_loop_y_flux_6 : DO j = j_start, j_end+1
      IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

           DO k=kts,ktf
           DO i = i_start, i_end
             dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
             mu = 0.5*(mut(i,j)+mut(i,j-1))
             vel = rv(i,k,j)
             cr = vel*dt/dy/mu
             fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k,j  ), cr)
             fqy( i, k, j  ) = vel*flux6(                                    &
                     field(i,k,j-3), field(i,k,j-2), field(i,k,j-1),         &
                     field(i,k,j  ), field(i,k,j+1), field(i,k,j+2),  vel )
             fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
           ENDDO
           ENDDO
         ELSE IF ( j == jds+1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i,k, j) = 0.5*rv(i,k,j)*            &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF  ( j == jds+2 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy( i, k, j ) = vel*flux4(                &
                      field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel )
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF ( j == jde-1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i, k, j ) = 0.5*rv(i,k,j)*        &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF ( j == jde-2 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy( i, k, j) = vel*flux4(               &
                      field(i,k,j-2),field(i,k,j-1),      &
                      field(i,k,j),field(i,k,j+1),vel )
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ENDIF
      ENDDO j_loop_y_flux_6
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         i_start_f = i_start
         i_end_f   = i_end+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_ys) j_start = MAX(jts-1,jds)

      IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

      IF(degrade_xs) then

           i_start = MAX(ids+1,its-1)
           i_start_f = ids+3
         ENDIF
      IF(degrade_xe) then

           i_end = MIN(ide-2,ite+1)
           i_end_f = ide-3
         ENDIF

         DO j = j_start, j_end
           DO k=kts,ktf
           DO i = i_start_f, i_end_f
             dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
             mu = 0.5*(mut(i,j)+mut(i-1,j))
             vel = ru(i,k,j)
             cr = vel*dt/dx/mu
             fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k,j  ), cr)
             fqx( i,k,j ) = vel*flux6( field(i-3,k,j), field(i-2,k,j),    &
                                            field(i-1,k,j), field(i  ,k,j),    &
                                            field(i+1,k,j), field(i+2,k,j),    &
                                            vel                             )
             fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
           ENDDO
           ENDDO
        IF( degrade_xs ) THEN

             DO i=i_start,i_start_f-1
            IF(i == ids+1) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)/mu
                   cr = vel*dt/dx
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx(i,k,j) = 0.5*(ru(i,k,j))   &
                          *(field(i,k,j)+field(i-1,k,j))
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
            IF(i == ids+2) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)
                   cr = vel*dt/dx/mu
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx( i,k,j ) = vel*flux4( field(i-2,k,j), field(i-1,k,j),    &
                                             field(i  ,k,j), field(i+1,k,j),    &
                                             vel                             )
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
             ENDDO
           ENDIF
        IF( degrade_xe ) THEN

             DO i = i_end_f+1, i_end+1
            IF( i == ide-1 ) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)
                   cr = vel*dt/dx/mu
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx(i,k,j) = 0.5*(ru(i,k,j))        &
                          *(field(i,k,j)+field(i-1,k,j))
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
            IF( i == ide-2 ) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)
                   cr = vel*dt/dx/mu
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx( i,k,j ) = vel*flux4( field(i-2,k,j), field(i-1,k,j),    &
                                             field(i  ,k,j), field(i+1,k,j),    &
                                             vel                             )
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
             ENDDO
           ENDIF
         ENDDO
       ELSE IF( horz_order == 5 ) THEN
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+3)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-4)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+3)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-4)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = MAX(its-1,ids)

      IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts-1,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte+1,jde-2)
           j_end_f = jde-3
         ENDIF

         j_loop_y_flux_5 : DO j = j_start, j_end+1
      IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

           DO k=kts,ktf
           DO i = i_start, i_end
             dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
             mu = 0.5*(mut(i,j)+mut(i,j-1))
             vel = rv(i,k,j)
             cr = vel*dt/dy/mu
             fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k,j  ), cr)
             fqy( i, k, j  ) = vel*flux5(                                    &
                     field(i,k,j-3), field(i,k,j-2), field(i,k,j-1),         &
                     field(i,k,j  ), field(i,k,j+1), field(i,k,j+2),  vel )
             fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
           ENDDO
           ENDDO
         ELSE IF ( j == jds+1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i,k, j) = 0.5*rv(i,k,j)*            &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF  ( j == jds+2 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy( i, k, j ) = vel*flux3(                &
                      field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel )
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF ( j == jde-1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i, k, j ) = 0.5*rv(i,k,j)*        &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF ( j == jde-2 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy( i, k, j) = vel*flux3(               &
                      field(i,k,j-2),field(i,k,j-1),      &
                      field(i,k,j),field(i,k,j+1),vel )
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ENDIF
      ENDDO j_loop_y_flux_5
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         i_start_f = i_start
         i_end_f   = i_end+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_ys) j_start = MAX(jts-1,jds)

      IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

      IF(degrade_xs) then

           i_start = MAX(ids+1,its-1)
           i_start_f = ids+3
         ENDIF
      IF(degrade_xe) then

           i_end = MIN(ide-2,ite+1)
           i_end_f = ide-3
         ENDIF

         DO j = j_start, j_end
           DO k=kts,ktf
           DO i = i_start_f, i_end_f
             dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
             mu = 0.5*(mut(i,j)+mut(i-1,j))
             vel = ru(i,k,j)
             cr = vel*dt/dx/mu
             fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k,j  ), cr)
             fqx( i,k,j ) = vel*flux5( field(i-3,k,j), field(i-2,k,j),    &
                                            field(i-1,k,j), field(i  ,k,j),    &
                                            field(i+1,k,j), field(i+2,k,j),    &
                                            vel                             )
             fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
           ENDDO
           ENDDO
        IF( degrade_xs ) THEN

             DO i=i_start,i_start_f-1
            IF(i == ids+1) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)/mu
                   cr = vel*dt/dx
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx(i,k,j) = 0.5*(ru(i,k,j))   &
                          *(field(i,k,j)+field(i-1,k,j))
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
            IF(i == ids+2) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)
                   cr = vel*dt/dx/mu
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx( i,k,j ) = vel*flux3( field(i-2,k,j), field(i-1,k,j),    &
                                             field(i  ,k,j), field(i+1,k,j),    &
                                             vel                             )
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
             ENDDO
           ENDIF
        IF( degrade_xe ) THEN

             DO i = i_end_f+1, i_end+1
            IF( i == ide-1 ) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)
                   cr = vel*dt/dx/mu
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx(i,k,j) = 0.5*(ru(i,k,j))        &
                          *(field(i,k,j)+field(i-1,k,j))
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
            IF( i == ide-2 ) THEN

                 DO k=kts,ktf
                   dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                   mu = 0.5*(mut(i,j)+mut(i-1,j))
                   vel = ru(i,k,j)
                   cr = vel*dt/dx/mu
                   fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j) &
   , field_old(i,k,j  ), cr)
                   fqx( i,k,j ) = vel*flux3( field(i-2,k,j), field(i-1,k,j),    &
                                             field(i  ,k,j), field(i+1,k,j),    &
                                             vel                             )
                   fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
                 ENDDO
               ENDIF
             ENDDO
           ENDIF
         ENDDO
       ELSE IF( horz_order == 4 ) THEN
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+1)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-2)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+1)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-2)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = its

      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts,jds+1)
           j_start_f = jds+2
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte,jde-2)
           j_end_f = jde-2
         ENDIF

         j_loop_y_flux_4 : DO j = j_start, j_end+1
      IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

           DO k=kts,ktf
           DO i = i_start, i_end
             dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
             mu = 0.5*(mut(i,j)+mut(i,j-1))
             vel = rv(i,k,j)
             cr = vel*dt/dy/mu
             fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k,j  ), cr)
             fqy( i, k, j  ) = vel*flux4(  field(i,k,j-2), field(i,k,j-1),         &
                                           field(i,k,j  ), field(i,k,j+1), vel )
             fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
           ENDDO
           ENDDO
         ELSE IF ( j == jds+1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i,k, j) = 0.5*rv(i,k,j)*            &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF ( j == jde-1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i, k, j ) = 0.5*rv(i,k,j)*        &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ENDIF
      ENDDO j_loop_y_flux_4
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         i_start_f = i_start
         i_end_f   = i_end+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_ys) j_start = jts

      IF(degrade_ye) j_end   = MIN(jte,jde-1)

      IF(degrade_xs) then

           i_start = MAX(ids+1,its)
           i_start_f = i_start+1
         ENDIF
      IF(degrade_xe) then

           i_end = MIN(ide-2,ite)
           i_end_f = ide-2
         ENDIF

         DO j = j_start, j_end
           DO k=kts,ktf
           DO i = i_start_f, i_end_f
             dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
             mu = 0.5*(mut(i,j)+mut(i-1,j))
             vel = ru(i,k,j)
             cr = vel*dt/dx/mu
             fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k,j  ), cr)
             fqx( i,k,j ) = vel*flux4( field(i-2,k,j), field(i-1,k,j),   &
                                       field(i  ,k,j), field(i+1,k,j), vel )
             fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
           ENDDO
           ENDDO
        IF( degrade_xs ) THEN

          IF( i_start == ids+1 ) THEN

               i = ids+1

               DO k=kts,ktf
                 dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                 mu = 0.5*(mut(i,j)+mut(i-1,j))
                 vel = ru(i,k,j)/mu
                 cr = vel*dt/dx
                 fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k, &
   j  ), cr)
                 fqx(i,k,j) = 0.5*(ru(i,k,j))   &
                        *(field(i,k,j)+field(i-1,k,j))
                 fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
               ENDDO
             ENDIF
           ENDIF
        IF( degrade_xe ) THEN

          IF( i_end == ide-2 ) THEN

               i = ide-1

               DO k=kts,ktf
                 dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                 mu = 0.5*(mut(i,j)+mut(i-1,j))
                 vel = ru(i,k,j)
                 cr = vel*dt/dx/mu
                 fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k, &
   j  ), cr)
                 fqx(i,k,j) = 0.5*(ru(i,k,j))        &
                        *(field(i,k,j)+field(i-1,k,j))
                 fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
               ENDDO
             ENDIF
           ENDIF
         ENDDO
      ELSE IF( horz_order == 3 ) THEN
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+2)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-1)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+2)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-1)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = its

      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts,jds+1)
           j_start_f = jds+2
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte,jde-2)
           j_end_f = jde-2
         ENDIF

         j_loop_y_flux_3 : DO j = j_start, j_end+1
      IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

           DO k=kts,ktf
           DO i = i_start, i_end
             dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
             mu = 0.5*(mut(i,j)+mut(i,j-1))
             vel = rv(i,k,j)
             cr = vel*dt/dy/mu
             fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k,j  ), cr)
             fqy( i, k, j  ) = vel*flux3(  field(i,k,j-2), field(i,k,j-1),         &
                                           field(i,k,j  ), field(i,k,j+1), vel )
             fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
           ENDDO
           ENDDO
         ELSE IF ( j == jds+1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i,k, j) = 0.5*rv(i,k,j)*            &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ELSE IF ( j == jde-1 ) THEN

               DO k=kts,ktf
               DO i = i_start, i_end
                 dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
                 mu = 0.5*(mut(i,j)+mut(i,j-1))
                 vel = rv(i,k,j)
                 cr = vel*dt/dy/mu
                 fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k, &
   j  ), cr)
                 fqy(i, k, j ) = 0.5*rv(i,k,j)*        &
                        (field(i,k,j)+field(i,k,j-1))
                 fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
               ENDDO
               ENDDO
         ENDIF
      ENDDO j_loop_y_flux_3
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         i_start_f = i_start
         i_end_f   = i_end+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_ys) j_start = jts

      IF(degrade_ye) j_end   = MIN(jte,jde-1)

      IF(degrade_xs) then

           i_start = MAX(ids+1,its)
           i_start_f = i_start+1
         ENDIF
      IF(degrade_xe) then

           i_end = MIN(ide-2,ite)
           i_end_f = ide-2
         ENDIF

         DO j = j_start, j_end
           DO k=kts,ktf
           DO i = i_start_f, i_end_f
             dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
             mu = 0.5*(mut(i,j)+mut(i-1,j))
             vel = ru(i,k,j)
             cr = vel*dt/dx/mu
             fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k,j  ), cr)
             fqx( i,k,j ) = vel*flux3( field(i-2,k,j), field(i-1,k,j),   &
                                       field(i  ,k,j), field(i+1,k,j), vel )
             fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
           ENDDO
           ENDDO
        IF( degrade_xs ) THEN

          IF( i_start == ids+1 ) THEN

               i = ids+1

               DO k=kts,ktf
                 dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                 mu = 0.5*(mut(i,j)+mut(i-1,j))
                 vel = ru(i,k,j)/mu
                 cr = vel*dt/dx
                 fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k, &
   j  ), cr)
                 fqx(i,k,j) = 0.5*(ru(i,k,j))   &
                        *(field(i,k,j)+field(i-1,k,j))
                 fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
               ENDDO
             ENDIF
           ENDIF
        IF( degrade_xe ) THEN

          IF( i_end == ide-2 ) THEN

               i = ide-1

               DO k=kts,ktf
                 dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
                 mu = 0.5*(mut(i,j)+mut(i-1,j))
                 vel = ru(i,k,j)
                 cr = vel*dt/dx/mu
                 fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k, &
   j  ), cr)
                 fqx(i,k,j) = 0.5*(ru(i,k,j))        &
                        *(field(i,k,j)+field(i-1,k,j))
                 fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
               ENDDO
             ENDIF
           ENDIF
         ENDDO
      ELSE IF( horz_order == 2 ) THEN
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+1)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-2)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+1)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-2)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_xs) i_start = its

      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) j_start = MAX(jts,jds+1)

      IF(degrade_ye) j_end = MIN(jte,jde-2)

         DO j = j_start, j_end+1
           DO k=kts,ktf
           DO i = i_start, i_end
              dy = 2./(msftx(i,j)+msftx(i,j-1))/rdy
              mu = 0.5*(mut(i,j)+mut(i,j-1))
              vel = rv(i,k,j)
              cr = vel*dt/dy/mu
              fqyl(i,k,j) = mu*(dy/dt)*flux_upwind(field_old(i,k,j-1), field_old(i,k,j  ), cr)
              fqy(i,k, j) = 0.5*rv(i,k,j)*            &
                     (field(i,k,j)+field(i,k,j-1))
              fqy(i,k,j) = fqy(i,k,j) - fqyl(i,k,j)
           ENDDO
           ENDDO
         ENDDO

         DO j = j_start, j_end
           DO k=kts,ktf
           DO i = i_start, i_end+1
               dx = 2./(msfty(i,j)+msfty(i-1,j))/rdx
               mu = 0.5*(mut(i,j)+mut(i-1,j))
               vel = ru(i,k,j)
               cr = vel*dt/dx/mu
               fqxl(i,k,j) = mu*(dx/dt)*flux_upwind(field_old(i-1,k,j), field_old(i,k,j  ), cr)
               fqx( i,k,j ) = 0.5*ru(i,k,j)*            &
                     (field(i,k,j)+field(i-1,k,j))
               fqx(i,k,j) = fqx(i,k,j) - fqxl(i,k,j)
           ENDDO
           ENDDO
         ENDDO
      ELSE
         CALL wrf_error_fatal ( TRIM( wrf_err_message ) )

   ENDIF horizontal_order_test  

!LPB[4]

         i_start = its
         i_end   = MIN(ite,ide-1)
         j_start = jts
         j_end   = MIN(jte,jde-1)

!LPB[5]
   IF( (config_flags%open_xs) .and. (its == ids) ) THEN

          DO j = j_start, j_end
          DO k = kts, ktf
            ub = MIN( 0.5*(ru(its,k,j)+ru(its+1,k,j)), 0. )
            tendency(its,k,j) = tendency(its,k,j)                       &
                  - rdx*(                                               &
                          ub*(   field_old(its+1,k,j)                   &
                               - field_old(its  ,k,j)   ) +             &
                          field(its,k,j)*(ru(its+1,k,j)-ru(its,k,j))    &
                                                                   )
          ENDDO
          ENDDO

   ENDIF

!LPB[6]

!LPB[7]
       Keep_Lpb7_ub =ub

   IF( (config_flags%open_xe) .and. (ite == ide) ) THEN

          DO j = j_start, j_end
          DO k = kts, ktf
            ub = MAX( 0.5*(ru(ite-1,k,j)+ru(ite,k,j)), 0. )
            tendency(i_end,k,j) = tendency(i_end,k,j)                     &
                  - rdx*(                                                 &
                          ub*(  field_old(i_end  ,k,j)                    &
                              - field_old(i_end-1,k,j) ) +                &
                          field(i_end,k,j)*(ru(ite,k,j)-ru(ite-1,k,j))    &
                                                                       )
          ENDDO
          ENDDO

   ENDIF

!LPB[8]

!LPB[9]

   IF( (config_flags%open_ys) .and. (jts == jds) ) THEN

          DO i = i_start, i_end
          DO k = kts, ktf
            vb = MIN( 0.5*(rv(i,k,jts)+rv(i,k,jts+1)), 0. )
            tendency(i,k,jts) = tendency(i,k,jts)                       &
                  - rdy*(                                               &
                          vb*(  field_old(i,k,jts+1)                    &
                              - field_old(i,k,jts  ) ) +                &
                          field(i,k,jts)*(rv(i,k,jts+1)-rv(i,k,jts))    &
                                                                   )
          ENDDO
          ENDDO

   ENDIF

!LPB[10]

!LPB[11]
       Keep_Lpb11_vb =vb

   IF( (config_flags%open_ye) .and. (jte == jde)) THEN

          DO i = i_start, i_end
          DO k = kts, ktf
            vb = MAX( 0.5*(rv(i,k,jte-1)+rv(i,k,jte)), 0. )
            tendency(i,k,j_end) = tendency(i,k,j_end)                     &
                  - rdy*(                                                 &
                          vb*(   field_old(i,k,j_end  )                   &
                               - field_old(i,k,j_end-1) ) +               &
                          field(i,k,j_end)*(rv(i,k,jte)-rv(i,k,jte-1))    &
                                                                       )
          ENDDO
          ENDDO

   ENDIF

!LPB[12]

!LPB[13]
       Keep_Lpb13_vb =vb

   IF( (config_flags%polar) .and. (jts == jds) ) THEN

          DO i = i_start, i_end
          DO k = kts, ktf
            vb = MIN( 0.5*rv(i,k,jts+1), 0. )
            tendency(i,k,jts) = tendency(i,k,jts)                       &
                  - rdy*(                                               &
                          vb*(  field_old(i,k,jts+1)                    &
                              - field_old(i,k,jts  ) ) +                &
                          field(i,k,jts)*rv(i,k,jts+1)                  &
                                                                   )
          ENDDO
          ENDDO

   ENDIF

!LPB[14]

!LPB[15]
       Keep_Lpb15_vb =vb

   IF( (config_flags%polar) .and. (jte == jde)) THEN

          DO i = i_start, i_end
          DO k = kts, ktf
            vb = MAX( 0.5*rv(i,k,jte-1), 0. )
            tendency(i,k,j_end) = tendency(i,k,j_end)                     &
                  - rdy*(                                                 &
                          vb*(   field_old(i,k,j_end  )                   &
                               - field_old(i,k,j_end-1) ) +               &
                          field(i,k,j_end)*(-rv(i,k,jte-1))               &
                                                                       )
          ENDDO
          ENDDO

   ENDIF

!LPB[16]

         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1

!LPB[17]
    IF(degrade_xs) i_start = MAX(its-1,ids)

!LPB[18]

!LPB[19]
    IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

!LPB[20]

!LPB[21]
    IF(degrade_ys) j_start = MAX(jts-1,jds)

!LPB[22]

!LPB[23]
    IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

!LPB[24]

!LPB[25]
       Keep_Lpb25_mu =mu
       Keep_Lpb25_vel =vel
       Keep_Lpb25_cr =cr

    vert_order_test : IF (vert_order == 6) THEN    

         DO j = j_start, j_end
            DO i = i_start, i_end
              fqz(i,1,j)  = 0.
              fqzl(i,1,j) = 0.
              fqz(i,kde,j)  = 0.
              fqzl(i,kde,j) = 0.
            ENDDO

            DO k=kts+3,ktf-2
            DO i = i_start, i_end
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux6( field(i,k-3,j), field(i,k-2,j), field(i,k-1,j) &
   ,        &
                                      field(i,k  ,j), field(i,k+1,j), field(i,k+2,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
            ENDDO

            DO i = i_start, i_end
              k=kts+1
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=kts+2
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux4(                        &
                      field(i,k-2,j), field(i,k-1,j),        &
                      field(i,k  ,j), field(i,k+1,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=ktf-1
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux4(                        &
                      field(i,k-2,j), field(i,k-1,j),        &
                      field(i,k  ,j), field(i,k+1,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=ktf
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
         ENDDO
       ELSE IF (vert_order == 5) THEN    

         DO j = j_start, j_end
            DO i = i_start, i_end
              fqz(i,1,j)  = 0.
              fqzl(i,1,j) = 0.
              fqz(i,kde,j)  = 0.
              fqzl(i,kde,j) = 0.
            ENDDO

            DO k=kts+3,ktf-2
            DO i = i_start, i_end
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux5( field(i,k-3,j), field(i,k-2,j), field(i,k-1,j) &
   ,        &
                                      field(i,k  ,j), field(i,k+1,j), field(i,k+2,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
            ENDDO

            DO i = i_start, i_end
              k=kts+1
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=kts+2
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux3(                        &
                      field(i,k-2,j), field(i,k-1,j),        &
                      field(i,k  ,j), field(i,k+1,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=ktf-1
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux3(                        &
                      field(i,k-2,j), field(i,k-1,j),        &
                      field(i,k  ,j), field(i,k+1,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=ktf
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
         ENDDO
       ELSE IF (vert_order == 4) THEN    

         DO j = j_start, j_end
            DO i = i_start, i_end
              fqz(i,1,j)  = 0.
              fqzl(i,1,j) = 0.
              fqz(i,kde,j)  = 0.
              fqzl(i,kde,j) = 0.
            ENDDO

            DO k=kts+2,ktf-1
            DO i = i_start, i_end
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux4(                        &
                      field(i,k-2,j), field(i,k-1,j),        &
                      field(i,k  ,j), field(i,k+1,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
            ENDDO

            DO i = i_start, i_end
              k=kts+1
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=ktf
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
         ENDDO
       ELSE IF (vert_order == 3) THEN    

         DO j = j_start, j_end
            DO i = i_start, i_end
              fqz(i,1,j)  = 0.
              fqzl(i,1,j) = 0.
              fqz(i,kde,j)  = 0.
              fqzl(i,kde,j) = 0.
            ENDDO

            DO k=kts+2,ktf-1
            DO i = i_start, i_end
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j) = vel*flux3(                        &
                      field(i,k-2,j), field(i,k-1,j),        &
                      field(i,k  ,j), field(i,k+1,j),  -vel )
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
            ENDDO

            DO i = i_start, i_end
              k=kts+1
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
              k=ktf
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
            ENDDO
         ENDDO
      ELSE IF (vert_order == 2) THEN    

         DO j = j_start, j_end
            DO i = i_start, i_end
              fqz(i,1,j)  = 0.
              fqzl(i,1,j) = 0.
              fqz(i,kde,j)  = 0.
              fqzl(i,kde,j) = 0.
            ENDDO

            DO k=kts+1,ktf
            DO i = i_start, i_end
              dz = 2./(rdzw(k)+rdzw(k-1))
              mu = 0.5*(mut(i,j)+mut(i,j))
              vel = rom(i,k,j)
              cr = vel*dt/dz/mu
              fqzl(i,k,j) = mu*(dz/dt)*flux_upwind(field_old(i,k-1,j), field_old(i,k,j  ), cr)
              fqz(i,k,j)=rom(i,k,j)*(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))
              fqz(i,k,j) = fqz(i,k,j) - fqzl(i,k,j)
           ENDDO
           ENDDO
         ENDDO
      ELSE
         WRITE (wrf_err_message,*) ' advect_scalar_pd, v_order not known ',vert_order
         CALL wrf_error_fatal ( wrf_err_message )

   ENDIF vert_order_test

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

   a_ub =0.0
   a_vb =0.0
   a_uw =0.0
   a_vw =0.0
   a_mu =0.0

   Do K2_ADJ =jts-1, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-1, ite+2
   a_fqx(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-1, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-1, ite+2
   a_fqy(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-1, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-1, ite+2
   a_fqz(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-1, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-1, ite+2
   a_fqxl(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-1, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-1, ite+2
   a_fqyl(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-1, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-1, ite+2
   a_fqzl(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   a_flux_out =0.0
   a_ph_low =0.0
   a_scale =0.0
   a_q_im3 =0.0
   a_q_im2 =0.0
   a_q_im1 =0.0
   a_q_i =0.0
   a_q_ip1 =0.0
   a_q_ip2 =0.0
   a_ua =0.0
   a_vel =0.0
   a_cr =0.0
   a_dx =0.0
   a_dy =0.0
   a_dz =0.0

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!ADDED BY WALLSWALLSWALLS
!ADDED BY WALLSWALLSWALLS
!FROM LPB[28]
  i_start = its
  i_end   = MIN(ite,ide-1)
  j_start = jts
  j_end   = MIN(jte,jde-1)

!FROM LPB[35]
  i_start = its
  i_end   = MIN(ite,ide-1)
  IF(degrade_ys) j_start = MAX(jts,jds+1)
  IF(degrade_ye) j_end   = MIN(jte,jde-2)

  IF(tenddec) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv6 =a_h_tendency(i,k,j)
   a_Tmpv5 =-a_Tmpv6
   a_Tmpv4 =msftx(i,j)*a_Tmpv5
   a_Tmpv3 =rdy*a_Tmpv4
   a_Tmpv2 =a_Tmpv3
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv3
   a_Tmpv1 =a_Tmpv2
   a_fqyl(i,k,j+1) =a_fqyl(i,k,j+1) +a_Tmpv2
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +a_Tmpv1
   a_fqy(i,k,j) =a_fqy(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO
  ENDIF
!LPB[39]
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv6 =a_tendency(i,k,j)
   a_Tmpv5 =-a_Tmpv6
   a_Tmpv4 =msftx(i,j)*a_Tmpv5
   a_Tmpv3 =rdy*a_Tmpv4
   a_Tmpv2 =a_Tmpv3
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv3
   a_Tmpv1 =a_Tmpv2
   a_fqyl(i,k,j+1) =a_fqyl(i,k,j+1) +a_Tmpv2
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +a_Tmpv1
   a_fqy(i,k,j) =a_fqy(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

!LPB[34]
!FROM LPB[28]
  i_start = its
  i_end   = MIN(ite,ide-1)
  j_start = jts
  j_end   = MIN(jte,jde-1)

!FROM LPB[30]
  IF(degrade_xs) i_start = MAX(its,ids+1)
  IF(degrade_xe) i_end   = MIN(ite,ide-2)

  IF(tenddec) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv6 =a_h_tendency(i,k,j)
   a_Tmpv5 =-a_Tmpv6
   a_Tmpv4 =msftx(i,j)*a_Tmpv5
   a_Tmpv3 =rdx*a_Tmpv4
   a_Tmpv2 =a_Tmpv3
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv3
   a_Tmpv1 =a_Tmpv2
   a_fqxl(i+1,k,j) =a_fqxl(i+1,k,j) +a_Tmpv2
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -a_Tmpv1
   a_h_tendency(i,k,j) = 0.0
   ENDDO
   ENDDO
   ENDDO
  ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv6 =a_tendency(i,k,j)
   a_Tmpv5 =-a_Tmpv6
   a_Tmpv4 =msftx(i,j)*a_Tmpv5
   a_Tmpv3 =rdx*a_Tmpv4
   a_Tmpv2 =a_Tmpv3
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv3
   a_Tmpv1 =a_Tmpv2
   a_fqxl(i+1,k,j) =a_fqxl(i+1,k,j) +a_Tmpv2
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

!LPB[33]

!LPB[30]

!LPB[29]
!FROM LPB[28]
  i_start = its
  i_end   = MIN(ite,ide-1)
  j_start = jts
  j_end   = MIN(jte,jde-1)

  IF(tenddec) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv5 =a_z_tendency(i,k,j)
   a_Tmpv4 =-a_Tmpv5
   a_Tmpv3 =rdzw(k)*a_Tmpv4
   a_Tmpv2 =a_Tmpv3
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv3
   a_Tmpv1 =a_Tmpv2
   a_fqzl(i,k+1,j) =a_fqzl(i,k+1,j) +a_Tmpv2
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +a_Tmpv1
   a_fqz(i,k,j) =a_fqz(i,k,j) -a_Tmpv1
   a_z_tendency(i,k,j) = 0.0
   ENDDO
   ENDDO
   ENDDO
  ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv5 =a_tendency(i,k,j)
   a_Tmpv4 =-a_Tmpv5
   a_Tmpv3 =rdzw(k)*a_Tmpv4
   a_Tmpv2 =a_Tmpv3
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv3
   a_Tmpv1 =a_Tmpv2
   a_fqzl(i,k+1,j) =a_fqzl(i,k+1,j) +a_Tmpv2
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +a_Tmpv1
   a_fqz(i,k,j) =a_fqz(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   IF(pd_limit) THEN
   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1

   IF(degrade_xs) THEN
   i_start =max(its-1, ids)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-1)
   END IF
   IF(config_flags%specified .or. config_flags%nested) THEN
   IF(degrade_xs) THEN
   i_start =max(its-1, ids+1)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-2)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   END IF
   END IF
   IF(config_flags%open_xs) THEN
   IF(degrade_xs) THEN
   i_start =max(its-1, ids+1)
   END IF
   END IF
   IF(config_flags%open_xe) THEN
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-2)
   END IF
   END IF
   IF(config_flags%open_ys) THEN
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   END IF
   END IF
   IF(config_flags%open_ye) THEN
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   END IF
   END IF
   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start, i_end
   Tmpv001 =(mub(i,j) +mu_old(i,j))*field_old(i,k,j)
   Tmpv002 =fqxl(i+1,k,j) -fqxl(i,k,j)
   Tmpv003 =rdx*Tmpv002
   Tmpv004 =fqyl(i,k,j+1) -fqyl(i,k,j)
   Tmpv005 =rdy*Tmpv004
   Tmpv006 =Tmpv003 +Tmpv005
   Tmpv007 =msftx(i,j)*msfty(i,j)*Tmpv006
   Tmpv008 =fqzl(i,k+1,j) -fqzl(i,k,j)
   Tmpv009 =msfty(i,j)*rdzw(k)*Tmpv008
   Tmpv010 =Tmpv007 +Tmpv009
   Tmpv011 =dt*Tmpv010
   Tmpv012 =Tmpv001 -Tmpv011
   ph_low =Tmpv012
   Tmpv400(i,k,j) =ph_low

   Tmpv001 =max(0., fqx(i+1,k,j)) -min(0., fqx(i,k,j))
   Tmpv002 =rdx*Tmpv001
   Tmpv003 =max(0., fqy(i,k,j+1)) -min(0., fqy(i,k,j))
   Tmpv004 =rdy*Tmpv003
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =(msftx(i,j)*msfty(i,j))*Tmpv005
   Tmpv007 =min(0., fqz(i,k+1,j)) -max(0., fqz(i,k,j))
   Tmpv008 =msfty(i,j)*rdzw(k)*Tmpv007
   Tmpv009 =Tmpv006 +Tmpv008
   Tmpv010 =dt*Tmpv009
   flux_out =Tmpv010
   Tmpv401(i,k,j) =flux_out

   Tmpv404(i,k,j) =fqx(i+1,k,j)
   Tmpv405(i,k,j) =fqx(i,k,j)
   Tmpv406(i,k,j) =fqy(i,k,j+1)
   Tmpv407(i,k,j) =fqy(i,k,j)
   Tmpv408(i,k,j) =fqz(i,k+1,j)
   Tmpv409(i,k,j) =fqz(i,k,j)

   IF( flux_out .gt. ph_low ) THEN

   Tmpv001 =ph_low/(flux_out +eps)
   Tmpv402(i,k,j) =Tmpv001

   scale =max(0., Tmpv402(i,k,j))
   Tmpv403(i,k,j) =scale
   IF( fqx (i+1,k,j) .gt. 0.) THEN
   Tmpv001 =scale*fqx(i+1,k,j)
   fqx(i+1,k,j) =Tmpv001
   END IF

   IF( fqx (i  ,k,j) .lt. 0.) THEN
   Tmpv001 =scale*fqx(i,k,j)
   fqx(i,k,j) =Tmpv001
   END IF

   IF( fqy (i,k,j+1) .gt. 0.) THEN
   Tmpv001 =scale*fqy(i,k,j+1)
   fqy(i,k,j+1) =Tmpv001
   END IF

   IF( fqy (i,k,j  ) .lt. 0.) THEN
   Tmpv001 =scale*fqy(i,k,j)
   fqy(i,k,j) =Tmpv001
   END IF

   IF( fqz (i,k+1,j) .lt. 0.) THEN
   Tmpv001 =scale*fqz(i,k+1,j)
   fqz(i,k+1,j) =Tmpv001
   END IF

   IF( fqz (i,k  ,j) .gt. 0.) THEN
   Tmpv001 =scale*fqz(i,k,j)
   fqz(i,k,j) =Tmpv001
   END IF
   END IF
   ENDDO
   ENDDO
   ENDDO
   END IF

   IF(pd_limit) THEN
   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1
   IF(degrade_xs) THEN
   i_start =max(its-1, ids)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-1)
   END IF
   IF(config_flags%specified .or. config_flags%nested) THEN
   IF(degrade_xs) THEN
   i_start =max(its-1, ids+1)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-2)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   END IF
   END IF
   IF(config_flags%open_xs) THEN
   IF(degrade_xs) THEN
   i_start =max(its-1, ids+1)
   END IF
   END IF
   IF(config_flags%open_xe) THEN
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-2)
   END IF
   END IF
   IF(config_flags%open_ys) THEN
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   END IF
   END IF
   IF(config_flags%open_ye) THEN
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   END IF
   END IF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1

   flux_out =Tmpv401(i,k,j)
   ph_low =Tmpv400(i,k,j)

   fqx(i+1,k,j) =Tmpv404(i,k,j)
   fqx(i,k,j) =Tmpv405(i,k,j)
   fqy(i,k,j+1) =Tmpv406(i,k,j)
   fqy(i,k,j) =Tmpv407(i,k,j)
   fqz(i,k+1,j) =Tmpv408(i,k,j)
   fqz(i,k,j) =Tmpv409(i,k,j)

   IF( flux_out .gt. ph_low ) THEN

   scale =Tmpv403(i,k,j)

   IF( fqx (i+1,k,j) .gt. 0.) THEN

   a_Tmpv1 =a_fqx(i+1,k,j)
   a_fqx(i+1,k,j) =0.0
   a_scale =a_scale +fqx(i+1,k,j)*a_Tmpv1
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +scale*a_Tmpv1

   END IF

   IF( fqx (i  ,k,j) .lt. 0.) THEN

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_scale =a_scale +fqx(i,k,j)*a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) +scale*a_Tmpv1

   END IF

   IF( fqy (i,k,j+1) .gt. 0.) THEN

   a_Tmpv1 =a_fqy(i,k,j+1)
   a_fqy(i,k,j+1) =0.0
   a_scale =a_scale +fqy(i,k,j+1)*a_Tmpv1
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +scale*a_Tmpv1

   END IF

   IF( fqy (i,k,j  ) .lt. 0.) THEN

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_scale =a_scale +fqy(i,k,j)*a_Tmpv1
   a_fqy(i,k,j) =a_fqy(i,k,j) +scale*a_Tmpv1

   END IF

   IF( fqz (i,k+1,j) .lt. 0.) THEN

   a_Tmpv1 =a_fqz(i,k+1,j)
   a_fqz(i,k+1,j) =0.0
   a_scale =a_scale +fqz(i,k+1,j)*a_Tmpv1
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +scale*a_Tmpv1

   END IF

   IF( fqz (i,k  ,j) .gt. 0.) THEN

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_scale =a_scale +fqz(i,k,j)*a_Tmpv1
   a_fqz(i,k,j) =a_fqz(i,k,j) +scale*a_Tmpv1

   END IF

   a_Tmpv1=(1.0 +(-1.0)*sign(1.0, 0. -Tmpv402(i,k,j)))*0.5*a_scale
   a_scale =0.0
   a_ph_low =a_ph_low +a_Tmpv1/(flux_out +eps)
   a_flux_out =a_flux_out -ph_low/((flux_out +eps)*(flux_out +eps))*a_Tmpv1

   END IF

   a_Tmpv10 =a_flux_out
   a_flux_out =0.0
   a_Tmpv9 =dt*a_Tmpv10
   a_Tmpv6 =a_Tmpv9
   a_Tmpv8 =a_Tmpv9
   a_Tmpv7 =msfty(i,j)*rdzw(k)*a_Tmpv8
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +(1.0 -(-1.0)*sign(1.0, 0. -fqz(i,k+1,j)))*0.5*a_Tmpv7
   a_fqz(i,k,j) =a_fqz(i,k,j) -(1.0 +(-1.0)*sign(1.0, 0. -fqz(i,k,j)))*0.5*a_Tmpv7
   a_Tmpv5 =(msftx(i,j)*msfty(i,j))*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_Tmpv3 =rdy*a_Tmpv4
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +(1.0 +(-1.0)*sign(1.0, 0. -fqy(i,k,j+1)))*0.5*a_Tmpv3
   a_fqy(i,k,j) =a_fqy(i,k,j) -(1.0 -(-1.0)*sign(1.0, 0. -fqy(i,k,j)))*0.5*a_Tmpv3
   a_Tmpv1 =rdx*a_Tmpv2
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +(1.0 +(-1.0)*sign(1.0, 0. -fqx(i+1,k,j)))*0.5*a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -(1.0 -(-1.0)*sign(1.0, 0. -fqx(i,k,j)))*0.5*a_Tmpv1

!  ph_low =Tmpv400(i,k,j)

   a_Tmpv12 =a_ph_low
   a_ph_low =0.0
   a_Tmpv1 =a_Tmpv12
   a_Tmpv11 =-a_Tmpv12
   a_Tmpv10 =dt*a_Tmpv11
   a_Tmpv7 =a_Tmpv10
   a_Tmpv9 =a_Tmpv10
   a_Tmpv8 =msfty(i,j)*rdzw(k)*a_Tmpv9
   a_fqzl(i,k+1,j) =a_fqzl(i,k+1,j) +a_Tmpv8
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv8
   a_Tmpv6 =msftx(i,j)*msfty(i,j)*a_Tmpv7
   a_Tmpv3 =a_Tmpv6
   a_Tmpv5 =a_Tmpv6
   a_Tmpv4 =rdy*a_Tmpv5
   a_fqyl(i,k,j+1) =a_fqyl(i,k,j+1) +a_Tmpv4
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv4
   a_Tmpv2 =rdx*a_Tmpv3
   a_fqxl(i+1,k,j) =a_fqxl(i+1,k,j) +a_Tmpv2
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv2
   a_mu_old(i,j) =a_mu_old(i,j) +field_old(i,k,j)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +(mub(i,j) +mu_old(i,j))*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   IF(config_flags%open_ye) THEN

   IF(degrade_ye) THEN

   END IF

   END IF

   IF(config_flags%open_ys) THEN

   IF(degrade_ys) THEN

   END IF

   END IF

   IF(config_flags%open_xe) THEN

   IF(degrade_xe) THEN

   END IF

   END IF

   IF(config_flags%open_xs) THEN

   IF(degrade_xs) THEN

   END IF

   END IF

   IF(config_flags%specified .or. config_flags%nested) THEN

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   END IF

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   END IF

!LPB[25]
!FROM LPB[16]
   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1

   IF(degrade_xs) i_start = MAX(its-1,ids)
   IF(degrade_xe) i_end   = MIN(ite+1,ide-1)
   IF(degrade_ys) j_start = MAX(jts-1,jds)
   IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

   mu =Keep_Lpb25_mu
   vel =Keep_Lpb25_vel
   cr =Keep_Lpb25_cr

   IF(vert_order == 6) THEN
   DO j =j_start, j_end
   DO i =i_start, i_end
   fqz(i,1,j) =0.

   fqzl(i,1,j) =0.

   fqz(i,kde,j) =0.

   fqzl(i,kde,j) =0.

   ENDDO

   DO k =kts+3, ktf-2
   DO i =i_start, i_end
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv400(i,k,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv401(i,k,j) =mu

   vel =rom(i,k,j)
   Tmpv402(i,k,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv403(i,k,j) =Tmpv001
   Tmpv002 =Tmpv403(i,k,j)/mu
   cr =Tmpv002
   Tmpv404(i,k,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv405(i,k,j) =Tmpv001
   Tmpv406(i,k,j) =Tmpv002
   Tmpv003 =Tmpv405(i,k,j)*Tmpv406(i,k,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux6(field(i,k-3,j),field(i,k-2,j),field(i,k-1,j),field(i,k,j)  &
   ,field(i,k+1,j),field(i,k+2,j),-vel)
   Tmpv407(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv407(i,k,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO

   DO i =i_start, i_end
   k =kts+1
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv300(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv301(i,j) =mu

   vel =rom(i,k,j)
   Tmpv302(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv303(i,j) =Tmpv001
   Tmpv002 =Tmpv303(i,j)/mu
   cr =Tmpv002
   Tmpv304(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv305(i,j) =Tmpv001
   Tmpv306(i,j) =Tmpv002
   Tmpv003 =Tmpv305(i,j)*Tmpv306(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv307(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv307(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =kts+2
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv308(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv309(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3010(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3011(i,j) =Tmpv001
   Tmpv002 =Tmpv3011(i,j)/mu
   cr =Tmpv002
   Tmpv3012(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3013(i,j) =Tmpv001
   Tmpv3014(i,j) =Tmpv002
   Tmpv003 =Tmpv3013(i,j)*Tmpv3014(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   Tmpv3015(i,j) =Tmpv001
   Tmpv002 =vel*Tmpv3015(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =ktf-1
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3016(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3017(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3018(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3019(i,j) =Tmpv001
   Tmpv002 =Tmpv3019(i,j)/mu
   cr =Tmpv002
   Tmpv3020(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3021(i,j) =Tmpv001
   Tmpv3022(i,j) =Tmpv002
   Tmpv003 =Tmpv3021(i,j)*Tmpv3022(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   Tmpv3023(i,j) =Tmpv001
   Tmpv002 =vel*Tmpv3023(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =ktf
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3024(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3025(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3026(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3027(i,j) =Tmpv001
   Tmpv002 =Tmpv3027(i,j)/mu
   cr =Tmpv002
   Tmpv3028(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3029(i,j) =Tmpv001
   Tmpv3030(i,j) =Tmpv002
   Tmpv003 =Tmpv3029(i,j)*Tmpv3030(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3031(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3031(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF(vert_order == 5) THEN
   DO j =j_start, j_end
   DO i =i_start, i_end
   fqz(i,1,j) =0.

   fqzl(i,1,j) =0.

   fqz(i,kde,j) =0.

   fqzl(i,kde,j) =0.

   ENDDO

   DO k =kts+3, ktf-2
   DO i =i_start, i_end
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv408(i,k,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv409(i,k,j) =mu

   vel =rom(i,k,j)
   Tmpv4010(i,k,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv4011(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4011(i,k,j)/mu
   cr =Tmpv002
   Tmpv4012(i,k,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv4013(i,k,j) =Tmpv001
   Tmpv4014(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4013(i,k,j)*Tmpv4014(i,k,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux5(field(i,k-3,j),field(i,k-2,j),field(i,k-1,j),field(i,k,j)  &
   ,field(i,k+1,j),field(i,k+2,j),-vel)
   Tmpv4015(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4015(i,k,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO

   DO i =i_start, i_end
   k =kts+1
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3032(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3033(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3034(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3035(i,j) =Tmpv001
   Tmpv002 =Tmpv3035(i,j)/mu
   cr =Tmpv002
   Tmpv3036(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3037(i,j) =Tmpv001
   Tmpv3038(i,j) =Tmpv002
   Tmpv003 =Tmpv3037(i,j)*Tmpv3038(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3039(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3039(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =kts+2
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3040(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3041(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3042(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3043(i,j) =Tmpv001
   Tmpv002 =Tmpv3043(i,j)/mu
   cr =Tmpv002
   Tmpv3044(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3045(i,j) =Tmpv001
   Tmpv3046(i,j) =Tmpv002
   Tmpv003 =Tmpv3045(i,j)*Tmpv3046(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   Tmpv3047(i,j) =Tmpv001
   Tmpv002 =vel*Tmpv3047(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =ktf-1
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3048(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3049(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3050(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3051(i,j) =Tmpv001
   Tmpv002 =Tmpv3051(i,j)/mu
   cr =Tmpv002
   Tmpv3052(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3053(i,j) =Tmpv001
   Tmpv3054(i,j) =Tmpv002
   Tmpv003 =Tmpv3053(i,j)*Tmpv3054(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   Tmpv3055(i,j) =Tmpv001
   Tmpv002 =vel*Tmpv3055(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =ktf
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3056(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3057(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3058(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3059(i,j) =Tmpv001
   Tmpv002 =Tmpv3059(i,j)/mu
   cr =Tmpv002
   Tmpv3060(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3061(i,j) =Tmpv001
   Tmpv3062(i,j) =Tmpv002
   Tmpv003 =Tmpv3061(i,j)*Tmpv3062(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3063(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3063(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF(vert_order == 4) THEN
   DO j =j_start, j_end
   DO i =i_start, i_end
   fqz(i,1,j) =0.

   fqzl(i,1,j) =0.

   fqz(i,kde,j) =0.

   fqzl(i,kde,j) =0.

   ENDDO

   DO k =kts+2, ktf-1
   DO i =i_start, i_end
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv4016(i,k,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv4017(i,k,j) =mu

   vel =rom(i,k,j)
   Tmpv4018(i,k,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv4019(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4019(i,k,j)/mu
   cr =Tmpv002
   Tmpv4020(i,k,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv4021(i,k,j) =Tmpv001
   Tmpv4022(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4021(i,k,j)*Tmpv4022(i,k,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   Tmpv4023(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4023(i,k,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO

   DO i =i_start, i_end
   k =kts+1
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3064(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3065(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3066(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3067(i,j) =Tmpv001
   Tmpv002 =Tmpv3067(i,j)/mu
   cr =Tmpv002
   Tmpv3068(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3069(i,j) =Tmpv001
   Tmpv3070(i,j) =Tmpv002
   Tmpv003 =Tmpv3069(i,j)*Tmpv3070(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3071(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3071(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =ktf
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3072(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3073(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3074(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3075(i,j) =Tmpv001
   Tmpv002 =Tmpv3075(i,j)/mu
   cr =Tmpv002
   Tmpv3076(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3077(i,j) =Tmpv001
   Tmpv3078(i,j) =Tmpv002
   Tmpv003 =Tmpv3077(i,j)*Tmpv3078(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3079(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3079(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF(vert_order == 3) THEN
   DO j =j_start, j_end
   DO i =i_start, i_end
   fqz(i,1,j) =0.

   fqzl(i,1,j) =0.

   fqz(i,kde,j) =0.

   fqzl(i,kde,j) =0.

   ENDDO

   DO k =kts+2, ktf-1
   DO i =i_start, i_end
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv4024(i,k,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv4025(i,k,j) =mu

   vel =rom(i,k,j)
   Tmpv4026(i,k,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv4027(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4027(i,k,j)/mu
   cr =Tmpv002
   Tmpv4028(i,k,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv4029(i,k,j) =Tmpv001
   Tmpv4030(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4029(i,k,j)*Tmpv4030(i,k,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   Tmpv4031(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4031(i,k,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO

   DO i =i_start, i_end
   k =kts+1
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3080(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3081(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3082(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3083(i,j) =Tmpv001
   Tmpv002 =Tmpv3083(i,j)/mu
   cr =Tmpv002
   Tmpv3084(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3085(i,j) =Tmpv001
   Tmpv3086(i,j) =Tmpv002
   Tmpv003 =Tmpv3085(i,j)*Tmpv3086(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3087(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3087(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   k =ktf
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv3088(i,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv3089(i,j) =mu

   vel =rom(i,k,j)
   Tmpv3090(i,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv3091(i,j) =Tmpv001
   Tmpv002 =Tmpv3091(i,j)/mu
   cr =Tmpv002
   Tmpv3092(i,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv3093(i,j) =Tmpv001
   Tmpv3094(i,j) =Tmpv002
   Tmpv003 =Tmpv3093(i,j)*Tmpv3094(i,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv3095(i,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv3095(i,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO

   ELSE IF(vert_order == 2) THEN
   DO j =j_start, j_end
   DO i =i_start, i_end
   fqz(i,1,j) =0.

   fqzl(i,1,j) =0.

   fqz(i,kde,j) =0.

   fqzl(i,kde,j) =0.

   ENDDO

   DO k =kts+1, ktf
   DO i =i_start, i_end
   dz =2./(rdzw(k)+rdzw(k-1))
   Tmpv4032(i,k,j) =dz

   mu =0.5*(mut(i,j) +mut(i,j))
   Tmpv4033(i,k,j) =mu

   vel =rom(i,k,j)
   Tmpv4034(i,k,j) =vel

   Tmpv001 =vel*dt/dz
   Tmpv4035(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4035(i,k,j)/mu
   cr =Tmpv002
   Tmpv4036(i,k,j) =cr

   Tmpv001 =mu*(dz/dt)
   Tmpv002 =flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   Tmpv4037(i,k,j) =Tmpv001
   Tmpv4038(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4037(i,k,j)*Tmpv4038(i,k,j)
   fqzl(i,k,j) =Tmpv003

   Tmpv001 =fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j)
   Tmpv4039(i,k,j) =Tmpv001
   Tmpv002 =rom(i,k,j)*Tmpv4039(i,k,j)
   fqz(i,k,j) =Tmpv002

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDDO
   ELSE
   CALL wrf_error_fatal(wrf_err_message)

   ENDIF

   IF(vert_order == 6) THEN

   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   k =ktf
   mu =Tmpv3025(i,j)
   cr =Tmpv3028(i,j)
   vel =Tmpv3026(i,j)
   dz =Tmpv3024(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3031(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3030(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3029(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3027(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0

!ADDED AND REVISED BY WALLS
   k =ktf-1
   cr =Tmpv3020(i,j)
   vel =Tmpv3018(i,j)
   mu =Tmpv3017(i,j)
   dz =Tmpv3016(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv3023(i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux4(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3022(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3021(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3019(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0

!ADDED AND REVISED BY WALLS
   k =kts+2
   cr =Tmpv3012(i,j)
   vel =Tmpv3010(i,j)
   mu =Tmpv309(i,j)
   dz =Tmpv308(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv3015(i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux4(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3014(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3013(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3011(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0

!ADDED AND REVISED BY WALLS
   k =kts+1
   cr =Tmpv304(i,j)
   vel =Tmpv302(i,j)
   mu =Tmpv301(i,j)
   dz =Tmpv300(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv307(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv306(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv305(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv303(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0
   ENDDO
   DO k =ktf-2, kts+3, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv404(i,k,j)
   vel =Tmpv402(i,k,j)
   mu =Tmpv401(i,k,j)
   dz =Tmpv400(i,k,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv407(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+2,j) =a_field(i,k+2,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,j)  &
   ,0.0,field(i,k-1,j),0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux6(field(i,k-3,j),0.0,field(i,k-2,  &
   j),1.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-3,j) =a_field(i,k-3,j) +Diff_flux6(field(i,k-3,j),1.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv406(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv405(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv403(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0
   ENDDO
   ENDDO
   DO i =i_end, i_start, -1
   a_fqzl(i,kde,j) =0.0
   a_fqz(i,kde,j) =0.0
   a_fqzl(i,1,j) =0.0
   a_fqz(i,1,j) =0.0
   ENDDO
   ENDDO

   ELSE IF(vert_order == 5) THEN

   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
!ADDED BY WALLS
   k =ktf
   cr =Tmpv3060(i,j)
   vel =Tmpv3058(i,j)
   mu =Tmpv3057(i,j)
   dz =Tmpv3056(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3063(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3062(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3061(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3059(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0

!ADDED BY WALLS
   k =ktf-1
   cr =Tmpv3052(i,j)
   vel =Tmpv3050(i,j)
   mu =Tmpv3049(i,j)
   dz =Tmpv3048(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv3055(i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3054(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3053(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3051(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0

!ADDED BY WALLS
   k =kts+2
   cr =Tmpv3044(i,j)
   vel =Tmpv3042(i,j)
   mu =Tmpv3041(i,j)
   dz =Tmpv3040(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv3047(i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3046(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3045(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3043(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0

!ADDED BY WALLS
   k =kts+1
   cr =Tmpv3036(i,j)
   vel =Tmpv3034(i,j)
   dz =Tmpv3032(i,j)
   mu =Tmpv3033(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3039(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3038(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3037(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3035(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0
   ENDDO
   DO k =ktf-2, kts+3, -1
   DO i =i_end, i_start, -1
!REVISED AND ADDED BY WALLS
   cr =Tmpv4012(i,k,j)
   vel =Tmpv4010(i,k,j)
   mu =Tmpv409(i,k,j)
   dz =Tmpv408(i,k,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv4015(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+2,j) =a_field(i,k+2,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,j)  &
   ,0.0,field(i,k-1,j),0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux5(field(i,k-3,j),0.0,field(i,k-2,  &
   j),1.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-3,j) =a_field(i,k-3,j) +Diff_flux5(field(i,k-3,j),1.0,field(i,k-2,  &
   j),0.0,field(i,k-1,j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,field(i,k+2,j)  &
   ,0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4014(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4013(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4011(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0
   ENDDO
   ENDDO
   DO i =i_end, i_start, -1
   a_fqzl(i,kde,j) =0.0
   a_fqz(i,kde,j) =0.0
   a_fqzl(i,1,j) =0.0
   a_fqz(i,1,j) =0.0
   ENDDO
   ENDDO

   ELSE IF(vert_order == 4) THEN

   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
!ADDED BY WALLS
   k =ktf
   cr =Tmpv3076(i,j)
   vel =Tmpv3074(i,j)
   mu =Tmpv3073(i,j)
   dz =Tmpv3072(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3079(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3078(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3077(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv3076(i,j)
!  vel =Tmpv3074(i,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3075(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv3073(i,j)

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

!  dz =Tmpv3072(i,j)

   a_dz =0.0

!ADDED BY WALLS
   k =kts+1
   cr =Tmpv3068(i,j)
   vel =Tmpv3066(i,j)
   mu =Tmpv3065(i,j)
   dz =Tmpv3064(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3071(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3070(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3069(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv3068(i,j)
!  vel =Tmpv3066(i,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3067(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv3065(i,j)

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

!  dz =Tmpv3064(i,j)

   a_dz =0.0
   ENDDO
   DO k =ktf-1, kts+2, -1
   DO i =i_end, i_start, -1
!ADDED BY WALLS
   cr =Tmpv4020(i,k,j)
   vel =Tmpv4018(i,k,j)
   mu =Tmpv4017(i,k,j)
   dz =Tmpv4016(i,k,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv4023(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux4(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux4(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4022(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4021(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv4020(i,k,j)
!  vel =Tmpv4018(i,k,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4019(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv4017(i,k,j)

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

!  dz =Tmpv4016(i,k,j)

   a_dz =0.0
   ENDDO
   ENDDO
   DO i =i_end, i_start, -1
   a_fqzl(i,kde,j) =0.0
   a_fqz(i,kde,j) =0.0
   a_fqzl(i,1,j) =0.0
   a_fqz(i,1,j) =0.0
   ENDDO
   ENDDO

   ELSE IF(vert_order == 3) THEN

!ALL RECALCULATED SCALAR IN THE FOLLOWING ARE REVISED BY WALLS
   DO j =j_end, j_start, -1

   DO i =i_end, i_start, -1
   cr =Tmpv3092(i,j)
   vel =Tmpv3090(i,j)
   mu =Tmpv3089(i,j)
   dz =Tmpv3088(i,j)

   k =ktf

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3095(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3094(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3093(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3091(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   mu =Tmpv3081(i,j)
   cr =Tmpv3084(i,j)

   a_dz =0.0

   k =kts+1
   dz =Tmpv3080(i,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv3087(i,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3086(i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3085(i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

   vel =Tmpv3082(i,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3083(i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

   a_dz =0.0
   ENDDO

   DO k =ktf-1, kts+2, -1
   DO i =i_end, i_start, -1
   mu =Tmpv4025(i,k,j)
   dz =Tmpv4024(i,k,j)
   cr =Tmpv4028(i,k,j)
   vel =Tmpv4026(i,k,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +Tmpv4031(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4030(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4029(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv4028(i,k,j)
!  vel =Tmpv4026(i,k,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4027(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv4025(i,k,j)

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

!  dz =Tmpv4024(i,k,j)

   a_dz =0.0
   ENDDO
   ENDDO

   DO i =i_end, i_start, -1
   a_fqzl(i,kde,j) =0.0
   a_fqz(i,kde,j) =0.0
   a_fqzl(i,1,j) =0.0
   a_fqz(i,1,j) =0.0
   ENDDO
   ENDDO

   ELSE IF(vert_order == 2) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts+1, -1
   DO i =i_end, i_start, -1
   cr =Tmpv4036(i,k,j)
   vel=Tmpv4034(i,k,j)
   mu =Tmpv4033(i,k,j)
   dz =Tmpv4032(i,k,j)

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +Tmpv4039(i,k,j)*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv3 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4038(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4037(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dz/dt)*a_Tmpv1
   a_dz =a_dz +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv4036(i,k,j)
!  vel =Tmpv4034(i,k,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4035(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dz*a_Tmpv1
   a_dz =a_dz -vel*dt/(dz*dz)*a_Tmpv1

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv4033(i,k,j)

   a_mut(i,j) =a_mut(i,j) +0.5*(1.0 +1.0)*a_mu
   a_mu =0.0

!  dz =Tmpv4032(i,k,j)

   a_dz =0.0
   ENDDO
   ENDDO

   DO i =i_end, i_start, -1
   a_fqzl(i,kde,j) =0.0
   a_fqz(i,kde,j) =0.0
   a_fqzl(i,1,j) =0.0
   a_fqz(i,1,j) =0.0
   ENDDO
   ENDDO

   ELSE

!DELETED BY WALLS
!  CALL a_wrf_error_fatal(wrf_err_message)

   ENDIF

!LPB[15]
!FROM LPB[4]
      i_start = its
      i_end   = MIN(ite,ide-1)
      j_start = jts
      j_end   = MIN(jte,jde-1)

   vb =Keep_Lpb15_vb

   IF( (config_flags%polar) .and. (jte == jde)) THEN
   DO i =i_start, i_end
   DO k =kts, ktf
   vb =max(0.5*rv(i,k,jte-1), 0.)
   Tmpv300(k,i) =vb

   Tmpv001 =field_old(i,k,j_end) -field_old(i,k,j_end-1)
   Tmpv301(k,i) =Tmpv001
   Tmpv002 =vb*Tmpv301(k,i)
   Tmpv003 =field(i,k,j_end)*(-rv(i,k,jte-1))
   Tmpv004 =Tmpv002 +Tmpv003
   Tmpv005 =rdy*Tmpv004
   Tmpv006 =tendency(i,k,j_end) -Tmpv005
   tendency(i,k,j_end) =Tmpv006

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%polar) .and. (jte == jde)) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
!ADDED BY WALLS
   vb =Tmpv300(k,i)

   a_Tmpv6 =a_tendency(i,k,j_end)
   a_tendency(i,k,j_end) =0.0
   a_tendency(i,k,j_end) =a_tendency(i,k,j_end) +a_Tmpv6
   a_Tmpv5 =-a_Tmpv6
   a_Tmpv4 =rdy*a_Tmpv5
   a_Tmpv2 =a_Tmpv4
   a_Tmpv3 =a_Tmpv4
   a_field(i,k,j_end) =a_field(i,k,j_end) +(-rv(i,k,jte-1))*a_Tmpv3
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) -1.0*field(i,k,j_end)*a_Tmpv3
   a_vb =a_vb +Tmpv301(k,i)*a_Tmpv2
   a_Tmpv1 =vb*a_Tmpv2
   a_field_old(i,k,j_end) =a_field_old(i,k,j_end) +a_Tmpv1
   a_field_old(i,k,j_end-1) =a_field_old(i,k,j_end-1) -a_Tmpv1

   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) +(0.5 +(0.5)*sign(1.0, 0.5*rv(i,k,jte-1) -0.)  &
   )*0.5*a_vb
   a_vb =0.0
   ENDDO
   ENDDO

   ENDIF

!LPB[14]

!LPB[13]
   vb =Keep_Lpb13_vb

   IF( (config_flags%polar) .and. (jts == jds) ) THEN
   DO i =i_start, i_end
   DO k =kts, ktf
   vb =min(0.5*rv(i,k,jts+1), 0.)
   Tmpv300(k,i) =vb

   Tmpv001 =field_old(i,k,jts+1) -field_old(i,k,jts)
   Tmpv301(k,i) =Tmpv001
   Tmpv002 =vb*Tmpv301(k,i)
   Tmpv003 =field(i,k,jts)*rv(i,k,jts+1)
   Tmpv004 =Tmpv002 +Tmpv003
   Tmpv005 =rdy*Tmpv004
   Tmpv006 =tendency(i,k,jts) -Tmpv005
!  tendency(i,k,jts) =Tmpv006

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%polar) .and. (jts == jds) ) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   vb =Tmpv300(k,i)

   a_Tmpv6 =a_tendency(i,k,jts)
   a_tendency(i,k,jts) =0.0
   a_tendency(i,k,jts) =a_tendency(i,k,jts) +a_Tmpv6
   a_Tmpv5 =-a_Tmpv6
   a_Tmpv4 =rdy*a_Tmpv5
   a_Tmpv2 =a_Tmpv4
   a_Tmpv3 =a_Tmpv4
   a_field(i,k,jts) =a_field(i,k,jts) +rv(i,k,jts+1)*a_Tmpv3
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +field(i,k,jts)*a_Tmpv3
   a_vb =a_vb +Tmpv301(k,i)*a_Tmpv2
   a_Tmpv1 =vb*a_Tmpv2
   a_field_old(i,k,jts+1) =a_field_old(i,k,jts+1) +a_Tmpv1
   a_field_old(i,k,jts) =a_field_old(i,k,jts) -a_Tmpv1

   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +(0.5 -(0.5)*sign(1.0, 0.5*rv(i,k,jts+1) -0.)  &
   )*0.5*a_vb
   a_vb =0.0
   ENDDO
   ENDDO

   ENDIF

!LPB[12]

!LPB[11]
   vb =Keep_Lpb11_vb

   IF( (config_flags%open_ye) .and. (jte == jde)) THEN
   DO i =i_start, i_end
   DO k =kts, ktf
   Tmpv001 =rv(i,k,jte-1) +rv(i,k,jte)
   Tmpv002 =0.5*Tmpv001
   Tmpv300(k,i) =Tmpv002
   vb =max(Tmpv300(k,i), 0.)
   Tmpv301(k,i) =vb

   Tmpv001 =field_old(i,k,j_end) -field_old(i,k,j_end-1)
   Tmpv302(k,i) =Tmpv001
   Tmpv002 =vb*Tmpv302(k,i)
   Tmpv003 =rv(i,k,jte) -rv(i,k,jte-1)
   Tmpv303(k,i) =Tmpv003
   Tmpv004 =field(i,k,j_end)*Tmpv303(k,i)
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdy*Tmpv005
   Tmpv007 =tendency(i,k,j_end) -Tmpv006
!  tendency(i,k,j_end) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_ye) .and. (jte == jde)) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   vb =Tmpv301(k,i)

   a_Tmpv7 =a_tendency(i,k,j_end)
   a_tendency(i,k,j_end) =0.0
   a_tendency(i,k,j_end) =a_tendency(i,k,j_end) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdy*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i,k,j_end) =a_field(i,k,j_end) +Tmpv303(k,i)*a_Tmpv4
   a_Tmpv3 =field(i,k,j_end)*a_Tmpv4
   a_rv(i,k,jte) =a_rv(i,k,jte) +a_Tmpv3
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) -a_Tmpv3
   a_vb =a_vb +Tmpv302(k,i)*a_Tmpv2
   a_Tmpv1 =vb*a_Tmpv2
   a_field_old(i,k,j_end) =a_field_old(i,k,j_end) +a_Tmpv1
   a_field_old(i,k,j_end-1) =a_field_old(i,k,j_end-1) -a_Tmpv1

   a_Tmpv2=(1.0 +(1.0)*sign(1.0, Tmpv300(k,i) -0.))*0.5*a_vb
   a_vb =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) +a_Tmpv1
   a_rv(i,k,jte) =a_rv(i,k,jte) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[10]

!LPB[9]

   IF( (config_flags%open_ys) .and. (jts == jds) ) THEN
   DO i =i_start, i_end
   DO k =kts, ktf
   Tmpv001 =rv(i,k,jts) +rv(i,k,jts+1)
   Tmpv002 =0.5*Tmpv001
   Tmpv300(k,i) =Tmpv002
   vb =min(Tmpv300(k,i), 0.)
   Tmpv301(k,i) =vb

   Tmpv001 =field_old(i,k,jts+1) -field_old(i,k,jts)
   Tmpv302(k,i) =Tmpv001
   Tmpv002 =vb*Tmpv302(k,i)
   Tmpv003 =rv(i,k,jts+1) -rv(i,k,jts)
   Tmpv303(k,i) =Tmpv003
   Tmpv004 =field(i,k,jts)*Tmpv303(k,i)
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdy*Tmpv005
   Tmpv007 =tendency(i,k,jts) -Tmpv006
!  tendency(i,k,jts) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_ys) .and. (jts == jds) ) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   vb =Tmpv301(k,i)

   a_Tmpv7 =a_tendency(i,k,jts)
   a_tendency(i,k,jts) =0.0
   a_tendency(i,k,jts) =a_tendency(i,k,jts) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdy*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i,k,jts) =a_field(i,k,jts) +Tmpv303(k,i)*a_Tmpv4
   a_Tmpv3 =field(i,k,jts)*a_Tmpv4
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +a_Tmpv3
   a_rv(i,k,jts) =a_rv(i,k,jts) -a_Tmpv3
   a_vb =a_vb +Tmpv302(k,i)*a_Tmpv2
   a_Tmpv1 =vb*a_Tmpv2
   a_field_old(i,k,jts+1) =a_field_old(i,k,jts+1) +a_Tmpv1
   a_field_old(i,k,jts) =a_field_old(i,k,jts) -a_Tmpv1

   a_Tmpv2=(1.0 -(1.0)*sign(1.0, Tmpv300(k,i) -0.))*0.5*a_vb
   a_vb =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_rv(i,k,jts) =a_rv(i,k,jts) +a_Tmpv1
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[8]

!LPB[7]
   ub =Keep_Lpb7_ub

   IF( (config_flags%open_xe) .and. (ite == ide) ) THEN
   DO j =j_start, j_end
   DO k =kts, ktf
   Tmpv001 =ru(ite-1,k,j) +ru(ite,k,j)
   Tmpv002 =0.5*Tmpv001
   Tmpv300(k,j) =Tmpv002
   ub =max(Tmpv300(k,j), 0.)
   Tmpv301(k,j) =ub

   Tmpv001 =field_old(i_end,k,j) -field_old(i_end-1,k,j)
   Tmpv302(k,j) =Tmpv001
   Tmpv002 =ub*Tmpv302(k,j)
   Tmpv003 =ru(ite,k,j) -ru(ite-1,k,j)
   Tmpv303(k,j) =Tmpv003
   Tmpv004 =field(i_end,k,j)*Tmpv303(k,j)
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdx*Tmpv005
   Tmpv007 =tendency(i_end,k,j) -Tmpv006
!  tendency(i_end,k,j) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_xe) .and. (ite == ide) ) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   ub =Tmpv301(k,j)

   a_Tmpv7 =a_tendency(i_end,k,j)
   a_tendency(i_end,k,j) =0.0
   a_tendency(i_end,k,j) =a_tendency(i_end,k,j) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdx*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i_end,k,j) =a_field(i_end,k,j) +Tmpv303(k,j)*a_Tmpv4
   a_Tmpv3 =field(i_end,k,j)*a_Tmpv4
   a_ru(ite,k,j) =a_ru(ite,k,j) +a_Tmpv3
   a_ru(ite-1,k,j) =a_ru(ite-1,k,j) -a_Tmpv3
   a_ub =a_ub +Tmpv302(k,j)*a_Tmpv2
   a_Tmpv1 =ub*a_Tmpv2
   a_field_old(i_end,k,j) =a_field_old(i_end,k,j) +a_Tmpv1
   a_field_old(i_end-1,k,j) =a_field_old(i_end-1,k,j) -a_Tmpv1

   a_Tmpv2=(1.0 +(1.0)*sign(1.0, Tmpv300(k,j) -0.))*0.5*a_ub
   a_ub =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_ru(ite-1,k,j) =a_ru(ite-1,k,j) +a_Tmpv1
   a_ru(ite,k,j) =a_ru(ite,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[6]

!LPB[5]
   IF( (config_flags%open_xs) .and. (its == ids) ) THEN
   DO j =j_start, j_end
   DO k =kts, ktf
   Tmpv001 =ru(its,k,j) +ru(its+1,k,j)
   Tmpv002 =0.5*Tmpv001
   Tmpv300(k,j) =Tmpv002
   ub =min(Tmpv300(k,j), 0.)
   Tmpv301(k,j) =ub

   Tmpv001 =field_old(its+1,k,j) -field_old(its,k,j)
   Tmpv302(k,j) =Tmpv001
   Tmpv002 =ub*Tmpv302(k,j)
   Tmpv003 =ru(its+1,k,j) -ru(its,k,j)
   Tmpv303(k,j) =Tmpv003
   Tmpv004 =field(its,k,j)*Tmpv303(k,j)
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =rdx*Tmpv005
   Tmpv007 =tendency(its,k,j) -Tmpv006
!  tendency(its,k,j) =Tmpv007

   ENDDO
   ENDDO
   ENDIF

   IF( (config_flags%open_xs) .and. (its == ids) ) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   ub =Tmpv301(k,j)

   a_Tmpv7 =a_tendency(its,k,j)
   a_tendency(its,k,j) =0.0
   a_tendency(its,k,j) =a_tendency(its,k,j) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdx*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(its,k,j) =a_field(its,k,j) +Tmpv303(k,j)*a_Tmpv4
   a_Tmpv3 =field(its,k,j)*a_Tmpv4
   a_ru(its+1,k,j) =a_ru(its+1,k,j) +a_Tmpv3
   a_ru(its,k,j) =a_ru(its,k,j) -a_Tmpv3
   a_ub =a_ub +Tmpv302(k,j)*a_Tmpv2
   a_Tmpv1 =ub*a_Tmpv2
   a_field_old(its+1,k,j) =a_field_old(its+1,k,j) +a_Tmpv1
   a_field_old(its,k,j) =a_field_old(its,k,j) -a_Tmpv1

   a_Tmpv2=(1.0 -(1.0)*sign(1.0, Tmpv300(k,j) -0.))*0.5*a_ub
   a_ub =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_ru(its,k,j) =a_ru(its,k,j) +a_Tmpv1
   a_ru(its+1,k,j) =a_ru(its+1,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[3]
   cr =Keep_Lpb3_cr

!ADDED BY WALLS
    IF (config_flags%polar) THEN

          fqx(:,:,:)  = 0.
          fqy(:,:,:)  = 0.
          fqz(:,:,:)  = 0.
          fqxl(:,:,:) = 0.
          fqyl(:,:,:) = 0.
          fqzl(:,:,:) = 0.

   END IF

     ktf=MIN(kte,kde-1)
     horz_order = config_flags%h_sca_adv_order
     vert_order = config_flags%v_sca_adv_order

     degrade_xs = .true.
     degrade_xe = .true.
     degrade_ys = .true.
     degrade_ye = .true.

   IF( horz_order == 6 ) THEN
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xs .or.  	       (its > ids+3)                ) THEN
   degrade_xs =.false.
   END IF
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xe .or.  	       (ite < ide-4)                ) THEN
   degrade_xe =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ys .or.  	       (jts > jds+3)                ) THEN
   degrade_ys =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ye .or.  	       (jte < jde-4)                ) THEN
   degrade_ye =.false.
   END IF
   ktf =min(kte, kde-1)
   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   j_start_f =j_start
   j_end_f =j_end+1
   IF(degrade_xs) THEN
   i_start =max(its-1, ids)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   j_start_f =jds+3
   ENDIF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   j_end_f =jde-3
   ENDIF
   DO j =j_start, j_end+1
   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv400(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv401(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv402(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv403(i,k,j) =Tmpv001
   Tmpv002 =Tmpv403(i,k,j)/mu
   cr =Tmpv002
   Tmpv404(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv405(i,k,j) =Tmpv001
   Tmpv406(i,k,j) =Tmpv002
   Tmpv003 =Tmpv405(i,k,j)*Tmpv406(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux6(field(i,k,j-3),field(i,k,j-2),field(i,k,j-1),field(i,k,j)  &
   ,field(i,k,j+1),field(i,k,j+2),vel)
   Tmpv407(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv407(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jds+1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv408(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv409(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4010(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4011(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4011(i,k,j)/mu
   cr =Tmpv002
   Tmpv4012(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv4013(i,k,j) =Tmpv001
   Tmpv4014(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4013(i,k,j)*Tmpv4014(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv4015(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv4015(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jds+2 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv4016(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4017(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4018(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4019(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4019(i,k,j)/mu
   cr =Tmpv002
   Tmpv4020(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv4021(i,k,j) =Tmpv001
   Tmpv4022(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4021(i,k,j)*Tmpv4022(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   Tmpv4023(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4023(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jde-1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv4024(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4025(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4026(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4027(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4027(i,k,j)/mu
   cr =Tmpv002
   Tmpv4028(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv4029(i,k,j) =Tmpv001
   Tmpv4030(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4029(i,k,j)*Tmpv4030(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv4031(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv4031(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jde-2 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv4032(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4033(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4034(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4035(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4035(i,k,j)/mu
   cr =Tmpv002
   Tmpv4036(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv4037(i,k,j) =Tmpv001
   Tmpv4038(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4037(i,k,j)*Tmpv4038(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   Tmpv4039(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4039(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDIF
   ENDDO

   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   i_start_f =i_start
   i_end_f =i_end+1
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-1)
   END IF
   IF(degrade_xs) THEN
   i_start =max(ids+1, its-1)
   i_start_f =ids+3
   ENDIF
   IF(degrade_xe) THEN
   i_end =min(ide-2, ite+1)
   i_end_f =ide-3
   ENDIF
   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start_f, i_end_f
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv4040(i,k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4041(i,k,j) =mu

   vel =ru(i,k,j)
   Tmpv4042(i,k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv4043(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4043(i,k,j)/mu
   cr =Tmpv002
   Tmpv4044(i,k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv4045(i,k,j) =Tmpv001
   Tmpv4046(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4045(i,k,j)*Tmpv4046(i,k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux6(field(i-3,k,j),field(i-2,k,j),field(i-1,k,j),field(i,k,j)  &
   ,field(i+1,k,j),field(i+2,k,j),vel)
   Tmpv4047(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4047(i,k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   IF( degrade_xs ) THEN

   DO i =i_start, i_start_f-1
   IF(i == ids+1) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv4048(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4049(k,i,j) =mu

   Tmpv001 =ru(i,k,j)/mu
   vel =Tmpv001
   Tmpv4050(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   cr =Tmpv001
   Tmpv4051(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv4052(k,i,j) =Tmpv001
   Tmpv4053(k,i,j) =Tmpv002
   Tmpv003 =Tmpv4052(k,i,j)*Tmpv4053(k,i,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv4054(k,i,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv4054(k,i,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   IF(i == ids+2) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv4055(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4056(k,i,j) =mu

   vel =ru(i,k,j)
   Tmpv4057(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv4058(k,i,j) =Tmpv001
   Tmpv002 =Tmpv4058(k,i,j)/mu
   cr =Tmpv002
   Tmpv4059(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv4060(k,i,j) =Tmpv001
   Tmpv4061(k,i,j) =Tmpv002
   Tmpv003 =Tmpv4060(k,i,j)*Tmpv4061(k,i,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv4062(k,i,j) =Tmpv001
   Tmpv002 =vel*Tmpv4062(k,i,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDDO
   ENDIF
   IF( degrade_xe ) THEN

   DO i =i_end_f+1, i_end+1
   IF( i == ide-1 ) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv4063(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4064(k,i,j) =mu

   vel =ru(i,k,j)
   Tmpv4065(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv4066(k,i,j) =Tmpv001
   Tmpv002 =Tmpv4066(k,i,j)/mu
   cr =Tmpv002
   Tmpv4067(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv4068(k,i,j) =Tmpv001
   Tmpv4069(k,i,j) =Tmpv002
   Tmpv003 =Tmpv4068(k,i,j)*Tmpv4069(k,i,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv4070(k,i,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv4070(k,i,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   IF( i == ide-2 ) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv4071(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4072(k,i,j) =mu

   vel =ru(i,k,j)
   Tmpv4073(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv4074(k,i,j) =Tmpv001
   Tmpv002 =Tmpv4074(k,i,j)/mu
   cr =Tmpv002
   Tmpv4075(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv4076(k,i,j) =Tmpv001
   Tmpv4077(k,i,j) =Tmpv002
   Tmpv003 =Tmpv4076(k,i,j)*Tmpv4077(k,i,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv4078(k,i,j) =Tmpv001
   Tmpv002 =vel*Tmpv4078(k,i,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDDO
   ENDIF
   ENDDO

   ELSE IF( horz_order == 5 ) THEN
!ALL SCALARS IN THE FOLLOWING ARE REVISED BY WALLS
!ALL SCALARS IN THE FOLLOWING ARE REVISED BY WALLS

   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xs .or.  	       (its > ids+3)                ) THEN
   degrade_xs =.false.
   END IF
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xe .or.  	       (ite < ide-4)                ) THEN
   degrade_xe =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ys .or.  	       (jts > jds+3)                ) THEN
   degrade_ys =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ye .or.  	       (jte < jde-4)                ) THEN
   degrade_ye =.false.
   END IF
   ktf =min(kte, kde-1)
   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   j_start_f =j_start
   j_end_f =j_end+1
   IF(degrade_xs) THEN
   i_start =max(its-1, ids)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   j_start_f =jds+3
   ENDIF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   j_end_f =jde-3
   ENDIF
   DO j =j_start, j_end+1
   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv4079(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4080(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4081(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4082(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4082(i,k,j)/mu
   cr =Tmpv002
   Tmpv4083(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv4084(i,k,j) =Tmpv001
   Tmpv4085(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4084(i,k,j)*Tmpv4085(i,k,j)
   fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux5(field(i,k,j-3),field(i,k,j-2),field(i,k,j-1),field(i,k,j)  &
   ,field(i,k,j+1),field(i,k,j+2),vel)
   Tmpv4086(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv4086(i,k,j)
   fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
   fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jds+1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv4087(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4088(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4089(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4090(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4090(i,k,j)/mu
   cr =Tmpv002
   Tmpv4091(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv4092(i,k,j) =Tmpv001
   Tmpv4093(i,k,j) =Tmpv002
   Tmpv003 =Tmpv4092(i,k,j)*Tmpv4093(i,k,j)
   fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv4094(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv4094(i,k,j)
   fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
   fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jds+2 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv4095(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv4096(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv4097(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv4098(i,k,j) =Tmpv001
   Tmpv002 =Tmpv4098(i,k,j)/mu
   cr =Tmpv002
   Tmpv4099(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40100(i,k,j) =Tmpv001
   Tmpv40101(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40100(i,k,j)*Tmpv40101(i,k,j)
   fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   Tmpv40102(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40102(i,k,j)
   fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
   fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jde-1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40103(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40104(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40105(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40106(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40106(i,k,j)/mu
   cr =Tmpv002
   Tmpv40107(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40108(i,k,j) =Tmpv001
   Tmpv40109(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40108(i,k,j)*Tmpv40109(i,k,j)
   fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv40110(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv40110(i,k,j)
   fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
   fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jde-2 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40111(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40112(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40113(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40114(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40114(i,k,j)/mu
   cr =Tmpv002
   Tmpv40115(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40116(i,k,j) =Tmpv001
   Tmpv40117(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40116(i,k,j)*Tmpv40117(i,k,j)
   fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   Tmpv40118(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40118(i,k,j)
   fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
   fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDIF
   ENDDO

   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   i_start_f =i_start
   i_end_f =i_end+1
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-1)
   END IF
   IF(degrade_xs) THEN
   i_start =max(ids+1, its-1)
   i_start_f =ids+3
   ENDIF
   IF(degrade_xe) THEN
   i_end =min(ide-2, ite+1)
   i_end_f =ide-3
   ENDIF

   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start_f, i_end_f
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40119(i,k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40120(i,k,j) =mu

   vel =ru(i,k,j)
   Tmpv40121(i,k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40122(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40122(i,k,j)/mu
   cr =Tmpv002
   Tmpv40123(i,k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40124(i,k,j) =Tmpv001
   Tmpv40125(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40124(i,k,j)*Tmpv40125(i,k,j)
   fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux5(field(i-3,k,j),field(i-2,k,j),field(i-1,k,j),field(i,k,j)  &
   ,field(i+1,k,j),field(i+2,k,j),vel)
   Tmpv40126(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40126(i,k,j)
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   IF( degrade_xs ) THEN

   DO i =i_start, i_start_f-1
   IF(i == ids+1) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40127(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40128(k,i,j) =mu

   Tmpv001 =ru(i,k,j)/mu
   vel =Tmpv001
   Tmpv40129(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   cr =Tmpv001
   Tmpv40130(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40131(k,i,j) =Tmpv001
   Tmpv40132(k,i,j) =Tmpv002
   Tmpv003 =Tmpv40131(k,i,j)*Tmpv40132(k,i,j)
   fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv40133(k,i,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv40133(k,i,j)
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   IF(i == ids+2) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40134(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40135(k,i,j) =mu

   vel =ru(i,k,j)
   Tmpv40136(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40137(k,i,j) =Tmpv001
   Tmpv002 =Tmpv40137(k,i,j)/mu
   cr =Tmpv002
   Tmpv40138(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40139(k,i,j) =Tmpv001
   Tmpv40140(k,i,j) =Tmpv002
   fqxl(i,k,j) =Tmpv003
   Tmpv003 =Tmpv40139(k,i,j)*Tmpv40140(k,i,j)

   Tmpv001 =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv40141(k,i,j) =Tmpv001
   Tmpv002 =vel*Tmpv40141(k,i,j)
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDDO
   ENDIF
   IF( degrade_xe ) THEN

   DO i =i_end_f+1, i_end+1
   IF( i == ide-1 ) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40142(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40143(k,i,j) =mu

   vel =ru(i,k,j)
   Tmpv40144(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40145(k,i,j) =Tmpv001
   Tmpv002 =Tmpv40145(k,i,j)/mu
   cr =Tmpv002
   Tmpv40146(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40147(k,i,j) =Tmpv001
   Tmpv40148(k,i,j) =Tmpv002
   Tmpv003 =Tmpv40147(k,i,j)*Tmpv40148(k,i,j)
   fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv40149(k,i,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv40149(k,i,j)
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   IF( i == ide-2 ) THEN

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40150(k,i,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40151(k,i,j) =mu

   vel =ru(i,k,j)
   Tmpv40152(k,i,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40153(k,i,j) =Tmpv001
   Tmpv002 =Tmpv40153(k,i,j)/mu
   cr =Tmpv002
   Tmpv40154(k,i,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40155(k,i,j) =Tmpv001
   Tmpv40156(k,i,j) =Tmpv002
   Tmpv003 =Tmpv40155(k,i,j)*Tmpv40156(k,i,j)
   fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv40157(k,i,j) =Tmpv001
   Tmpv002 =vel*Tmpv40157(k,i,j)
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDDO
   ENDIF
   ENDDO

   ELSE IF( horz_order == 4 ) THEN
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xs .or.  	       (its > ids+1)                ) THEN
   degrade_xs =.false.
   END IF
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xe .or.  	       (ite < ide-2)                ) THEN
   degrade_xe =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ys .or.  	       (jts > jds+1)                ) THEN
   degrade_ys =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ye .or.  	       (jte < jde-2)                ) THEN
   degrade_ye =.false.
   END IF
   ktf =min(kte, kde-1)
   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   j_start_f =j_start
   j_end_f =j_end+1
   IF(degrade_xs) THEN
   i_start =its
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts, jds+1)
   j_start_f =jds+2
   ENDIF
   IF(degrade_ye) THEN
   j_end =min(jte, jde-2)
   j_end_f =jde-2
   ENDIF
   DO j =j_start, j_end+1
   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40158(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40159(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40160(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40161(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40161(i,k,j)/mu
   cr =Tmpv002
   Tmpv40162(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40163(i,k,j) =Tmpv001
   Tmpv40164(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40163(i,k,j)*Tmpv40164(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   Tmpv40165(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40165(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jds+1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40166(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40167(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40168(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40169(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40169(i,k,j)/mu
   cr =Tmpv002
   Tmpv40170(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40171(i,k,j) =Tmpv001
   Tmpv40172(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40171(i,k,j)*Tmpv40172(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv40173(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv40173(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jde-1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40174(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40175(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40176(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40177(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40177(i,k,j)/mu
   cr =Tmpv002
   Tmpv40178(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40179(i,k,j) =Tmpv001
   Tmpv40180(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40179(i,k,j)*Tmpv40180(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv40181(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv40181(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDIF
   ENDDO

   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   i_start_f =i_start
   i_end_f =i_end+1
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   IF(degrade_ys) THEN
   j_start =jts
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte, jde-1)
   END IF
   IF(degrade_xs) THEN
   i_start =max(ids+1, its)
   i_start_f =i_start+1
   ENDIF
   IF(degrade_xe) THEN
   i_end =min(ide-2, ite)
   i_end_f =ide-2
   ENDIF
   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start_f, i_end_f
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40182(i,k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40183(i,k,j) =mu

   vel =ru(i,k,j)
   Tmpv40184(i,k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40185(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40185(i,k,j)/mu
   cr =Tmpv002
   Tmpv40186(i,k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40187(i,k,j) =Tmpv001
   Tmpv40188(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40187(i,k,j)*Tmpv40188(i,k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux4(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv40189(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40189(i,k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   IF( degrade_xs ) THEN
   IF( i_start == ids+1 ) THEN
   i =ids+1

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv300(k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv301(k,j) =mu

   Tmpv001 =ru(i,k,j)/mu
   vel =Tmpv001
   Tmpv302(k,j) =vel

   Tmpv001 =vel*dt/dx
   cr =Tmpv001
   Tmpv303(k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv304(k,j) =Tmpv001
   Tmpv305(k,j) =Tmpv002
   Tmpv003 =Tmpv304(k,j)*Tmpv305(k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv306(k,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv306(k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDIF
   IF( degrade_xe ) THEN
   IF( i_end == ide-2 ) THEN
   i =ide-1

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv307(k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv308(k,j) =mu

   vel =ru(i,k,j)
   Tmpv309(k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv3010(k,j) =Tmpv001
   Tmpv002 =Tmpv3010(k,j)/mu
   cr =Tmpv002
   Tmpv3011(k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv3012(k,j) =Tmpv001
   Tmpv3013(k,j) =Tmpv002
   Tmpv003 =Tmpv3012(k,j)*Tmpv3013(k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv3014(k,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv3014(k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDIF
   ENDDO

   ELSE IF( horz_order == 3 ) THEN
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xs .or.  	       (its > ids+2)                ) THEN
   degrade_xs =.false.
   END IF
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xe .or.  	       (ite < ide-1)                ) THEN
   degrade_xe =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ys .or.  	       (jts > jds+2)                ) THEN
   degrade_ys =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ye .or.  	       (jte < jde-1)                ) THEN
   degrade_ye =.false.
   END IF

   ktf =min(kte, kde-1)
   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   j_start_f =j_start
   j_end_f =j_end+1
   IF(degrade_xs) THEN
   i_start =its
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts, jds+1)
   j_start_f =jds+2
   ENDIF
   IF(degrade_ye) THEN
   j_end =min(jte, jde-2)
   j_end_f =jde-2
   ENDIF
   DO j =j_start, j_end+1
   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40190(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40191(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40192(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40193(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40193(i,k,j)/mu
   cr =Tmpv002
   Tmpv40194(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40195(i,k,j) =Tmpv001
   Tmpv40196(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40195(i,k,j)*Tmpv40196(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   Tmpv40197(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40197(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jds+1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40198(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40199(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40200(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40201(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40201(i,k,j)/mu
   cr =Tmpv002
   Tmpv40202(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40203(i,k,j) =Tmpv001
   Tmpv40204(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40203(i,k,j)*Tmpv40204(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv40205(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv40205(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ELSE IF( j == jde-1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40206(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40207(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40208(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40209(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40209(i,k,j)/mu
   cr =Tmpv002
   Tmpv40210(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40211(i,k,j) =Tmpv001
   Tmpv40212(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40211(i,k,j)*Tmpv40212(i,k,j)
!  fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv40213(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv40213(i,k,j)
!  fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
!  fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDIF
   ENDDO

   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   i_start_f =i_start
   i_end_f =i_end+1
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   IF(degrade_ys) THEN
   j_start =jts
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte, jde-1)
   END IF
   IF(degrade_xs) THEN
   i_start =max(ids+1, its)
   i_start_f =i_start+1
   ENDIF
   IF(degrade_xe) THEN
   i_end =min(ide-2, ite)
   i_end_f =ide-2
   ENDIF

   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start_f, i_end_f
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40214(i,k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40215(i,k,j) =mu

   vel =ru(i,k,j)
   Tmpv40216(i,k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40217(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40217(i,k,j)/mu
   cr =Tmpv002
   Tmpv40218(i,k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40219(i,k,j) =Tmpv001
   Tmpv40220(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40219(i,k,j)*Tmpv40220(i,k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv40221(i,k,j) =Tmpv001
   Tmpv002 =vel*Tmpv40221(i,k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDDO

   IF( degrade_xs ) THEN
   IF( i_start == ids+1 ) THEN
   i =ids+1

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv3015(k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv3016(k,j) =mu

   Tmpv001 =ru(i,k,j)/mu
   vel =Tmpv001
   Tmpv3017(k,j) =vel

   Tmpv001 =vel*dt/dx
   cr =Tmpv001
   Tmpv3018(k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv3019(k,j) =Tmpv001
   Tmpv3020(k,j) =Tmpv002
   Tmpv003 =Tmpv3019(k,j)*Tmpv3020(k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv3021(k,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv3021(k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDIF

   IF( degrade_xe ) THEN
   IF( i_end == ide-2 ) THEN
   i =ide-1

   DO k =kts, ktf
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv3022(k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv3023(k,j) =mu

   vel =ru(i,k,j)
   Tmpv3024(k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv3025(k,j) =Tmpv001
   Tmpv002 =Tmpv3025(k,j)/mu
   cr =Tmpv002
   Tmpv3026(k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv3027(k,j) =Tmpv001
   Tmpv3028(k,j) =Tmpv002
   Tmpv003 =Tmpv3027(k,j)*Tmpv3028(k,j)
!  fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv3029(k,j) =Tmpv001
   Tmpv002 =0.5*(ru(i,k,j))*Tmpv3029(k,j)
!  fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
!  fqx(i,k,j) =Tmpv001

   ENDDO
   ENDIF
   ENDIF
   ENDDO

   ELSE IF( horz_order == 2 ) THEN
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xs .or.  	       (its > ids+1)                ) THEN
   degrade_xs =.false.
   END IF
   IF( config_flags%periodic_x   .or.  	       config_flags%symmetric_xe .or.  	       (ite < ide-2)                ) THEN
   degrade_xe =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ys .or.  	       (jts > jds+1)                ) THEN
   degrade_ys =.false.
   END IF
   IF( config_flags%periodic_y   .or.  	       config_flags%symmetric_ye .or.  	       (jte < jde-2)                ) THEN
   degrade_ye =.false.
   END IF
   ktf =min(kte, kde-1)
   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   IF(degrade_xs) THEN
   i_start =its
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts, jds+1)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte, jde-2)
   END IF

   DO j =j_start, j_end+1
   DO k =kts, ktf
   DO i =i_start, i_end
   dy =2./(msftx(i,j)+msftx(i,j-1))/rdy
   Tmpv40222(i,k,j) =dy

   Tmpv001 =mut(i,j) +mut(i,j-1)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40223(i,k,j) =mu

   vel =rv(i,k,j)
   Tmpv40224(i,k,j) =vel

   Tmpv001 =vel*dt/dy
   Tmpv40225(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40225(i,k,j)/mu
   cr =Tmpv002
   Tmpv40226(i,k,j) =cr

   Tmpv001 =mu*(dy/dt)
   Tmpv002 =flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   Tmpv40227(i,k,j) =Tmpv001
   Tmpv40228(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40227(i,k,j)*Tmpv40228(i,k,j)
   fqyl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i,k,j-1)
   Tmpv40229(i,k,j) =Tmpv001
   Tmpv002 =0.5*rv(i,k,j)*Tmpv40229(i,k,j)
   fqy(i,k,j) =Tmpv002

   Tmpv001 =fqy(i,k,j) -fqyl(i,k,j)
   fqy(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDDO

   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start, i_end+1
   dx =2./(msfty(i,j)+msfty(i-1,j))/rdx
   Tmpv40230(i,k,j) =dx

   Tmpv001 =mut(i,j) +mut(i-1,j)
   Tmpv002 =0.5*Tmpv001
   mu =Tmpv002
   Tmpv40231(i,k,j) =mu

   vel =ru(i,k,j)
   Tmpv40232(i,k,j) =vel

   Tmpv001 =vel*dt/dx
   Tmpv40233(i,k,j) =Tmpv001
   Tmpv002 =Tmpv40233(i,k,j)/mu
   cr =Tmpv002
   Tmpv40234(i,k,j) =cr

   Tmpv001 =mu*(dx/dt)
   Tmpv002 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv40235(i,k,j) =Tmpv001
   Tmpv40236(i,k,j) =Tmpv002
   Tmpv003 =Tmpv40235(i,k,j)*Tmpv40236(i,k,j)
   fqxl(i,k,j) =Tmpv003

   Tmpv001 =field(i,k,j) +field(i-1,k,j)
   Tmpv40237(i,k,j) =Tmpv001
   Tmpv002 =0.5*ru(i,k,j)*Tmpv40237(i,k,j)
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   ENDDO
   ENDDO
   ENDDO
   ELSE
   CALL wrf_error_fatal(Trim(wrf_err_message))

   ENDIF

!ADDED BY WALLS

     ktf=MIN(kte,kde-1)
     horz_order = config_flags%h_sca_adv_order
     vert_order = config_flags%v_sca_adv_order

     degrade_xs = .true.
     degrade_xe = .true.
     degrade_ys = .true.
     degrade_ye = .true.

   IF( horz_order == 6 ) THEN
!ADDED BY WALLS
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+3)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-4)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+3)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-4)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = MAX(its-1,ids)

      IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts-1,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte+1,jde-2)
           j_end_f = jde-3
         ENDIF

!ADDED BY WALLS
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         i_start_f = i_start
         i_end_f   = i_end+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_ys) j_start = MAX(jts-1,jds)

      IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

      IF(degrade_xs) then

           i_start = MAX(ids+1,its-1)
           i_start_f = ids+3
         ENDIF
      IF(degrade_xe) then

           i_end = MIN(ide-2,ite+1)
           i_end_f = ide-3
         ENDIF

   DO j =j_end, j_start, -1

   IF( degrade_xe ) THEN

   DO i =i_end+1, i_end_f+1, -1

   IF( i == ide-2 ) THEN

   DO k =ktf, kts, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4075(k,i,j)
   vel =Tmpv4073(k,i,j)
   dx =Tmpv4071(k,i,j)
   mu =Tmpv4072(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv4078(k,i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux4(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4077(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4076(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv4075(k,i,j)
!  vel =Tmpv4073(k,i,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4074(k,i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv4072(k,i,j)

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

!  dx =Tmpv4071(k,i,j)

   a_dx =0.0
   ENDDO

   ENDIF

   IF( i == ide-1 ) THEN

   DO k =ktf, kts, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4067(k,i,j)
   vel =Tmpv4065(k,i,j)
   mu =Tmpv4064(k,i,j)
   dx =Tmpv4063(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv4070(k,i,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4069(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4068(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4066(k,i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO i =i_start_f-1, i_start, -1

   IF(i == ids+2) THEN

   DO k =ktf, kts, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4059(k,i,j)
   vel =Tmpv4057(k,i,j)
   mu =Tmpv4056(k,i,j)
   dx =Tmpv4055(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv4062(k,i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux4(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4061(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4060(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4058(k,i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF

   IF(i == ids+1) THEN

   DO k =ktf, kts, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4051(k,i,j)
   vel =Tmpv4050(k,i,j)
   mu =Tmpv4049(k,i,j)
   dx =Tmpv4048(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv4054(k,i,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4053(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4052(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv1 =a_cr
   a_cr =0.0
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_Tmpv1 =a_vel
   a_vel =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +a_Tmpv1/mu
   a_mu =a_mu -ru(i,k,j)/(mu*mu)*a_Tmpv1

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF
   ENDDO

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4044(i,k,j)
   vel =Tmpv4042(i,k,j)
   mu =Tmpv4041(i,k,j)
   dx =Tmpv4040(i,k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv4047(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+2,k,j) =a_field(i+2,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,j)  &
   ,0.0,field(i-1,k,j),0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux6(field(i-3,k,j),0.0,field(i-2,k,  &
   j),1.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-3,k,j) =a_field(i-3,k,j) +Diff_flux6(field(i-3,k,j),1.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4046(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4045(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4043(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

!ADDED BY WALLS
         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = MAX(its-1,ids)

      IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts-1,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte+1,jde-2)
           j_end_f = jde-3
         ENDIF

   DO j =j_end+1, j_start, -1

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv404(i,k,j)
   vel =Tmpv402(i,k,j)
   mu =Tmpv401(i,k,j)
   dy =Tmpv400(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv407(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+2) =a_field(i,k,j+2) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-2)  &
   ,0.0,field(i,k,j-1),0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux6(field(i,k,j-3),0.0,field(i,k,j-  &
   2),1.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-3) =a_field(i,k,j-3) +Diff_flux6(field(i,k,j-3),1.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv406(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv405(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv403(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4012(i,k,j)
   vel =Tmpv4010(i,k,j)
   mu =Tmpv409(i,k,j)
   dy =Tmpv408(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv4015(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4014(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4013(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4011(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4020(i,k,j)
   vel =Tmpv4018(i,k,j)
   mu =Tmpv4017(i,k,j)
   dy =Tmpv4016(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv4023(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux4(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4022(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4021(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4019(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4028(i,k,j)
   vel =Tmpv4026(i,k,j)
   mu =Tmpv4025(i,k,j)
   dy =Tmpv4024(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv4031(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4030(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4029(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4027(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv4036(i,k,j)
   vel =Tmpv4034(i,k,j)
   mu =Tmpv4033(i,k,j)
   dy =Tmpv4032(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv4039(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux4(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4038(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4037(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4035(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   IF(degrade_ye) THEN

   ENDIF

   IF(degrade_ys) THEN

   ENDIF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-4)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+3)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-4)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+3)                ) THEN

   END IF

   ELSE IF( horz_order == 5 ) THEN
!ALL SCALARS IN THE FOLLOWING ARE REVISED BY WALLS
!ALL SCALARS IN THE FOLLOWING ARE REVISED BY WALLS
!ADDED BY WALLS
   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xs .or.   &
       (its > ids+3)                ) degrade_xs = .false.

   IF( config_flags%periodic_x   .or.   &
       config_flags%symmetric_xe .or.   &
       (ite < ide-4)                ) degrade_xe = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ys .or.   &
       (jts > jds+3)                ) degrade_ys = .false.

   IF( config_flags%periodic_y   .or.   &
       config_flags%symmetric_ye .or.   &
       (jte < jde-4)                ) degrade_ye = .false.

         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = MAX(its-1,ids)

      IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts-1,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte+1,jde-2)
           j_end_f = jde-3
         ENDIF

!ADDED BY WALLS
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         i_start_f = i_start
         i_end_f   = i_end+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
      IF(degrade_ys) j_start = MAX(jts-1,jds)

      IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

      IF(degrade_xs) then

           i_start = MAX(ids+1,its-1)
           i_start_f = ids+3
         ENDIF
      IF(degrade_xe) then

           i_end = MIN(ide-2,ite+1)
           i_end_f = ide-3
         ENDIF

   DO j =j_end, j_start, -1

   IF( degrade_xe ) THEN

   DO i =i_end+1, i_end_f+1, -1

   IF( i == ide-2 ) THEN

   DO k =ktf, kts, -1
   cr =Tmpv40154(k,i,j)
   vel =Tmpv40152(k,i,j)
   mu =Tmpv40151(k,i,j)
   dx =Tmpv40150(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv40157(k,i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40156(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40155(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv40154(k,i,j)
!  vel =Tmpv40152(k,i,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40153(k,i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv40151(k,i,j)

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

!  dx =Tmpv40150(k,i,j)

   a_dx =0.0
   ENDDO

   ENDIF

   IF( i == ide-1 ) THEN

   DO k =ktf, kts, -1
   cr =Tmpv40146(k,i,j)
   vel =Tmpv40144(k,i,j)
   mu =Tmpv40143(k,i,j)
   dx =Tmpv40142(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv40149(k,i,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40148(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40147(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40145(k,i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO i =i_start_f-1, i_start, -1

   IF(i == ids+2) THEN

   DO k =ktf, kts, -1
   cr =Tmpv40138(k,i,j)
   vel =Tmpv40136(k,i,j)
   mu =Tmpv40135(k,i,j)
   dx =Tmpv40134(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv40141(k,i,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40140(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40139(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40137(k,i,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF

   IF(i == ids+1) THEN

   DO k =ktf, kts, -1
   dx =Tmpv40127(k,i,j)
   mu =Tmpv40128(k,i,j)
   cr =Tmpv40130(k,i,j)
   vel =Tmpv40129(k,i,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv40133(k,i,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40132(k,i,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40131(k,i,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv1 =a_cr
   a_cr =0.0
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_Tmpv1 =a_vel
   a_vel =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +a_Tmpv1/mu
   a_mu =a_mu -ru(i,k,j)/(mu*mu)*a_Tmpv1

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF
   ENDDO

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   dx =Tmpv40119(i,k,j)
   mu =Tmpv40120(i,k,j)
   cr =Tmpv40123(i,k,j)
   vel =Tmpv40121(i,k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv40126(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+2,k,j) =a_field(i+2,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,j)  &
   ,0.0,field(i-1,k,j),0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),1.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-3,k,j) =a_field(i-3,k,j) +Diff_flux5(field(i-3,k,j),1.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40125(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40124(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40122(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

!ADDED BY WALLS
         ktf=MIN(kte,kde-1)
         i_start = its-1
         i_end   = MIN(ite,ide-1)+1
         j_start = jts-1
         j_end   = MIN(jte,jde-1)+1
         j_start_f = j_start
         j_end_f   = j_end+1
      IF(degrade_xs) i_start = MAX(its-1,ids)

      IF(degrade_xe) i_end   = MIN(ite+1,ide-1)

      IF(degrade_ys) then

           j_start = MAX(jts-1,jds+1)
           j_start_f = jds+3
         ENDIF
      IF(degrade_ye) then

           j_end = MIN(jte+1,jde-2)
           j_end_f = jde-3
         ENDIF

   DO j =j_end+1, j_start, -1

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   dy =Tmpv4079(i,k,j)
   cr =Tmpv4083(i,k,j)
   vel =Tmpv4081(i,k,j)
   mu =Tmpv4080(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv4086(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+2) =a_field(i,k,j+2) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-2)  &
   ,0.0,field(i,k,j-1),0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),1.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-3) =a_field(i,k,j-3) +Diff_flux5(field(i,k,j-3),1.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4085(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4084(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4082(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   cr =Tmpv4091(i,k,j)
   vel =Tmpv4089(i,k,j)
   dy =Tmpv4087(i,k,j)
   mu =Tmpv4088(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv4094(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv4093(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv4092(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4090(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   dy =Tmpv4095(i,k,j)
   cr =Tmpv4099(i,k,j)
   vel =Tmpv4097(i,k,j)
   mu =Tmpv4096(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv40102(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40101(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40100(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv4098(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   dy =Tmpv40103(i,k,j)
   cr =Tmpv40107(i,k,j)
   vel =Tmpv40105(i,k,j)
   mu =Tmpv40104(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv40110(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40109(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40108(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40106(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   dy =Tmpv40111(i,k,j)
   cr =Tmpv40115(i,k,j)
   vel =Tmpv40113(i,k,j)
   mu =Tmpv40112(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv40118(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40117(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40116(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40114(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   IF(degrade_ye) THEN

   ENDIF

   IF(degrade_ys) THEN

   ENDIF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-4)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+3)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-4)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+3)                ) THEN

   END IF

   ELSE IF( horz_order == 4 ) THEN
!ADDED BY WALLS
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xs .or. &
       (its > ids+1)                ) degrade_xs = .false.
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xe .or. &
       (ite < ide-2)                ) degrade_xe = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ys .or. &
       (jts > jds+1)                ) degrade_ys = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ye .or. &
       (jte < jde-2)                ) degrade_ye = .false.

      ktf=MIN(kte,kde-1)
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1
      j_start_f = j_start
      j_end_f   = j_end+1

!--  modify loop bounds if open or specified

      IF(degrade_xs) i_start = its
      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+2
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-2
      ENDIF

!ADDED BY WALLS
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      i_start_f = i_start
      i_end_f   = i_end+1

      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1

!--  modify loop bounds for open and specified b.c

      IF(degrade_ys) j_start = jts
      IF(degrade_ye) j_end   = MIN(jte,jde-1)

      IF(degrade_xs) then
        i_start = MAX(ids+1,its)
        i_start_f = i_start+1
      ENDIF

      IF(degrade_xe) then
        i_end = MIN(ide-2,ite)
        i_end_f = ide-2
      ENDIF

   DO j =j_end, j_start, -1

   IF( degrade_xe ) THEN

   IF( i_end == ide-2 ) THEN

!ADDED AND REVISED BY WALLS
   i = ide-1

   DO k =ktf, kts, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv3011(k,j)
   vel =Tmpv309(k,j)
   mu =Tmpv308(k,j)
   dx =Tmpv307(k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv3014(k,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3013(k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3012(k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3010(k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF

   ENDIF

   IF( degrade_xs ) THEN

   IF( i_start == ids+1 ) THEN

!ADDED AND REVISED BY WALLS
   i = ids+1

   DO k =ktf, kts, -1
!ADDED AND REVISED BY WALLS
   cr =Tmpv303(k,j)
   vel =Tmpv302(k,j)
   mu =Tmpv301(k,j)
   dx =Tmpv300(k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv306(k,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv305(k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv304(k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv1 =a_cr
   a_cr =0.0
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_Tmpv1 =a_vel
   a_vel =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +a_Tmpv1/mu
   a_mu =a_mu -ru(i,k,j)/(mu*mu)*a_Tmpv1

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF

   ENDIF
   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   cr =Tmpv40186(i,k,j)
   vel =Tmpv40184(i,k,j)
   mu =Tmpv40183(i,k,j)
   dx =Tmpv40182(i,k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv40189(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux4(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux4(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40188(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40187(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40185(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

!ADDED BY WALLS
      ktf=MIN(kte,kde-1)
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1
      j_start_f = j_start
      j_end_f   = j_end+1

!--  modify loop bounds if open or specified

      IF(degrade_xs) i_start = its
      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+2
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-2
      ENDIF

   DO j =j_end+1, j_start, -1

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   cr =Tmpv40162(i,k,j)
   vel =Tmpv40160(i,k,j)
   mu =Tmpv40159(i,k,j)
   dy =Tmpv40158(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv40165(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux4(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux4(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40164(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40163(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40161(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   cr =Tmpv40170(i,k,j)
   vel =Tmpv40168(i,k,j)
   mu =Tmpv40167(i,k,j)
   dy =Tmpv40166(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv40173(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40172(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40171(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40169(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   cr =Tmpv40178(i,k,j)
   vel =Tmpv40176(i,k,j)
   mu =Tmpv40175(i,k,j)
   dy =Tmpv40174(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv40181(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40180(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40179(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40177(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   IF(degrade_ye) THEN

   ENDIF

   IF(degrade_ys) THEN

   ENDIF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-2)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+1)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+1)                ) THEN

   END IF

   ELSE IF( horz_order == 3 ) THEN
!ADDED BY WALLS
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xs .or. &
       (its > ids+2)                ) degrade_xs = .false.
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xe .or. &
       (ite < ide-1)                ) degrade_xe = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ys .or. &
       (jts > jds+2)                ) degrade_ys = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ye .or. &
       (jte < jde-1)                ) degrade_ye = .false.

      ktf=MIN(kte,kde-1)
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1
      j_start_f = j_start
      j_end_f   = j_end+1

      IF(degrade_xs) i_start = its
      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+2
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-2
      ENDIF

!ADDED BY WALLS
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      i_start_f = i_start
      i_end_f   = i_end+1

      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1

!--  modify loop bounds for open and specified b.c

      IF(degrade_ys) j_start = jts
      IF(degrade_ye) j_end   = MIN(jte,jde-1)

      IF(degrade_xs) then
        i_start = MAX(ids+1,its)
        i_start_f = i_start+1
      ENDIF

      IF(degrade_xe) then
        i_end = MIN(ide-2,ite)
        i_end_f = ide-2
      ENDIF

   DO j =j_end, j_start, -1

   IF( degrade_xe ) THEN

   IF( i_end == ide-2 ) THEN

!ADDED BY WALLS
   i =ide-1

   DO k =ktf, kts, -1
!ADDED BY WALLS
   cr =Tmpv3026(k,j)
   vel =Tmpv3024(k,j)
   mu =Tmpv3023(k,j)
   dx =Tmpv3022(k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv3029(k,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3028(k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3027(k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv3025(k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF

   ENDIF

   IF( degrade_xs ) THEN

   IF( i_start == ids+1 ) THEN

!ADDED BY WALLS
   i =ids+1

   DO k =ktf, kts, -1
!ADDED BY WALLS
   cr =Tmpv3018(k,j)
   vel =Tmpv3017(k,j)
   mu =Tmpv3016(k,j)
   dx =Tmpv3015(k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv3021(k,j)*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv3020(k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv3019(k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv1 =a_cr
   a_cr =0.0
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_Tmpv1 =a_vel
   a_vel =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +a_Tmpv1/mu
   a_mu =a_mu -ru(i,k,j)/(mu*mu)*a_Tmpv1

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO

   ENDIF

   ENDIF

   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
!REVISED AND ADDED BY WALLS
   cr =Tmpv40218(i,k,j)
   vel =Tmpv40216(i,k,j)
   mu =Tmpv40215(i,k,j)
   dx =Tmpv40214(i,k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +Tmpv40221(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40220(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40219(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40217(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO
   ENDDO
   ENDDO

   IF(degrade_xe) THEN

   ENDIF

   IF(degrade_xs) THEN

   ENDIF

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

!ADDED BY WALLS
      ktf=MIN(kte,kde-1)
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1
      j_start_f = j_start
      j_end_f   = j_end+1

!--  modify loop bounds if open or specified

      IF(degrade_xs) i_start = its
      IF(degrade_xe) i_end   = MIN(ite,ide-1)

      IF(degrade_ys) then
        j_start = MAX(jts,jds+1)
        j_start_f = jds+2
      ENDIF

      IF(degrade_ye) then
        j_end = MIN(jte,jde-2)
        j_end_f = jde-2
      ENDIF

   DO j =j_end+1, j_start, -1

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!REVISED AND ADDED BY WALLS
   cr =Tmpv40194(i,k,j)
   vel =Tmpv40192(i,k,j)
   mu =Tmpv40191(i,k,j)
   dy =Tmpv40190(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +Tmpv40197(i,k,j)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40196(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40195(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40193(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!REVISED AND ADDED BY WALLS
   cr =Tmpv40202(i,k,j)
   vel =Tmpv40200(i,k,j)
   mu =Tmpv40199(i,k,j)
   dy =Tmpv40198(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv40205(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40204(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40203(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40201(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
!REVISED AND ADDED BY WALLS
   cr =Tmpv40210(i,k,j)
   vel =Tmpv40208(i,k,j)
   mu =Tmpv40207(i,k,j)
   dy =Tmpv40206(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv40213(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40212(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40211(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40209(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

   a_dy =0.0
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   IF(degrade_ye) THEN

   ENDIF

   IF(degrade_ys) THEN

   ENDIF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-1)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-1)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+2)                ) THEN

   END IF

   ELSE IF( horz_order == 2 ) THEN
!ADDED BY WALLS
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xs .or. &
       (its > ids+1)                ) degrade_xs = .false.
   IF( config_flags%periodic_x   .or. &
       config_flags%symmetric_xe .or. &
       (ite < ide-2)                ) degrade_xe = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ys .or. &
       (jts > jds+1)                ) degrade_ys = .false.
   IF( config_flags%periodic_y   .or. &
       config_flags%symmetric_ye .or. &
       (jte < jde-2)                ) degrade_ye = .false.

!--  y flux compute; these bounds are for periodic and sym b.c.

      ktf=MIN(kte,kde-1)
      i_start = its-1
      i_end   = MIN(ite,ide-1)+1
      j_start = jts-1
      j_end   = MIN(jte,jde-1)+1

!--  modify loop bounds if open or specified

      IF(degrade_xs) i_start = its
      IF(degrade_xe) i_end   = MIN(ite,ide-1)
      IF(degrade_ys) j_start = MAX(jts,jds+1)
      IF(degrade_ye) j_end = MIN(jte,jde-2)

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end+1, i_start, -1
   mu =Tmpv40231(i,k,j)
   cr =Tmpv40234(i,k,j)
   vel =Tmpv40232(i,k,j)
   dx =Tmpv40230(i,k,j)

   a_Tmpv1 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_fqx(i,k,j) =a_fqx(i,k,j) +a_Tmpv1
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*Tmpv40237(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*ru(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv3 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40236(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40235(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dx/dt)*a_Tmpv1
   a_dx =a_dx +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv40234(i,k,j)
!  vel =Tmpv40232(i,k,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40233(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dx*a_Tmpv1
   a_dx =a_dx -vel*dt/(dx*dx)*a_Tmpv1

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i-1,j) =a_mut(i-1,j) +a_Tmpv1

   a_dx =0.0
   ENDDO
   ENDDO
   ENDDO

   DO j =j_end+1, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   cr =Tmpv40226(i,k,j)
   vel =Tmpv40224(i,k,j)
   mu =Tmpv40223(i,k,j)
   dy =Tmpv40222(i,k,j)

   a_Tmpv1 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_fqy(i,k,j) =a_fqy(i,k,j) +a_Tmpv1
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*Tmpv40229(i,k,j)*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv3 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_Tmpv1 =Tmpv40228(i,k,j)*a_Tmpv3
   a_Tmpv2 =Tmpv40227(i,k,j)*a_Tmpv3
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv2
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv2
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv2
   a_Tmpv2 =0.0

   a_mu =a_mu +(dy/dt)*a_Tmpv1
   a_dy =a_dy +1.0/dt*mu*a_Tmpv1

!  cr =Tmpv40226(i,k,j)
!  vel =Tmpv40224(i,k,j)

   a_Tmpv2 =a_cr
   a_cr =0.0
   a_Tmpv1 =a_Tmpv2/mu
   a_mu =a_mu -Tmpv40225(i,k,j)/(mu*mu)*a_Tmpv2
   a_vel =a_vel +dt/dy*a_Tmpv1
   a_dy =a_dy -vel*dt/(dy*dy)*a_Tmpv1

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

!  mu =Tmpv40223(i,k,j)

   a_Tmpv2 =a_mu
   a_mu =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +a_Tmpv1
   a_mut(i,j-1) =a_mut(i,j-1) +a_Tmpv1

!  dy =Tmpv40222(i,k,j)

   a_dy =0.0
   ENDDO
   ENDDO
   ENDDO

   IF(degrade_ye) THEN

   END IF

   IF(degrade_ys) THEN

   END IF

   IF(degrade_xe) THEN

   END IF

   IF(degrade_xs) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ye .or.   &
          (jte < jde-2)                ) THEN

   END IF

   IF( config_flags%periodic_y   .or.   &
          config_flags%symmetric_ys .or.   &
          (jts > jds+1)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xe .or.   &
          (ite < ide-2)                ) THEN

   END IF

   IF( config_flags%periodic_x   .or.   &
          config_flags%symmetric_xs .or.   &
          (its > ids+1)                ) THEN

   END IF

   ELSE

   ENDIF

   IF(config_flags%polar) THEN

   a_fqzl(:,:,:) =0.0
   a_fqyl(:,:,:) =0.0
   a_fqxl(:,:,:) =0.0
   a_fqz(:,:,:) =0.0
   a_fqy(:,:,:) =0.0
   a_fqx(:,:,:) =0.0

   END IF

!LPB[0]

   END SUBROUTINE a_advect_scalar_pd

   SUBROUTINE a_advect_scalar_mono(field,a_field,field_old,a_field_old,tendency, &
   a_tendency,h_tendency,a_h_tendency,z_tendency,a_z_tendency,ru,a_ru,rv,a_rv,rom,a_rom,mut,a_mut,mub,mu_old,a_mu_old, &
   config_flags,tenddec,msfux,msfuy,msfvx,msfvy,msftx,msfty,fzm,fzp,rdx,rdy,rdzw,dt,ids,ide,jds, &
   jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte)

!PART I: DECLARATION OF VARIABLES

   IMPLICIT NONE

   INTEGER :: K0_ADJ,K1_ADJ,K2_ADJ,K3_ADJ
   TYPE(grid_config_rec_type) :: config_flags
   LOGICAL :: tenddec
   INTEGER :: ids,ide,jds,jde,kds,kde,ims,ime,jms,jme,kms,kme,its,ite,jts,jte,kts,kte
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: field,a_field,field_old,a_field_old, &
   ru,a_ru,rv,a_rv,rom,a_rom
   REAL,DIMENSION(ims:ime,jms:jme) :: mut,a_mut,mub,mu_old,a_mu_old
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: tendency,a_tendency
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: h_tendency, z_tendency
   REAL,DIMENSION(ims:ime,kms:kme,jms:jme) :: a_h_tendency, a_z_tendency
   REAL,DIMENSION(ims:ime,jms:jme) :: msfux,msfuy,msfvx,msfvy,msftx,msfty
   REAL,DIMENSION(kms:kme) :: fzm,fzp,rdzw
   REAL :: rdx,rdy,dt
   INTEGER :: i,j,k,itf,jtf,ktf
   INTEGER :: i_start,i_end,j_start,j_end
   INTEGER :: i_start_f,i_end_f,j_start_f,j_end_f
   INTEGER :: jmin,jmax,jp,jm,imin,imax
   REAL :: ub,a_ub,vb,a_vb
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: fqx,a_fqx,fqy,a_fqy,fqz,a_fqz
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: fqxl,a_fqxl,fqyl,a_fqyl,fqzl,a_fqzl
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: qmin,a_qmin,qmax,a_qmax
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: scale_in,a_scale_in,scale_out,a_scale_out
   REAL :: ph_upwind,a_ph_upwind
   INTEGER :: horz_order,vert_order
   LOGICAL :: degrade_xs,degrade_ys
   LOGICAL :: degrade_xe,degrade_ye
   INTEGER :: jp1,jp0,jtmp
   REAL :: flux_out,a_flux_out,ph_low,a_ph_low,flux_in,a_flux_in,ph_hi,a_ph_hi,scale,a_scale
   REAL,PARAMETER :: eps =1.e-20
   REAL :: flux3,Diff_flux3,flux4,Diff_flux4,flux5,Diff_flux5,flux6,Diff_flux6,flux_upwind, &
   Diff_flux_upwind
   REAL :: q_im3,Diff_q_im3,q_im2,Diff_q_im2,q_im1,Diff_q_im1,q_i,Diff_q_i,q_ip1,Diff_q_ip1, &
   q_ip2,Diff_q_ip2,ua,Diff_ua,vel,a_vel,cr,Diff_cr,a_cr

   Diff_flux4(q_im2, Diff_q_im2,q_im1, Diff_q_im1,q_i, Diff_q_i,q_ip1, Diff_q_ip1, &
   ua, Diff_ua) =(7./12.)*(Diff_q_i +Diff_q_im1) -(1./12.)*(Diff_q_ip1 +Diff_q_im2)
   flux4(q_im2,q_im1,q_i,q_ip1,ua) =(7./12.)*(q_i +q_im1) -(1./12.)*(q_ip1 +q_im2)

   Diff_flux3(q_im2, Diff_q_im2,q_im1, Diff_q_im1,q_i, Diff_q_i,q_ip1, Diff_q_ip1, &
   ua, Diff_ua) =Diff_flux4(q_im2,Diff_q_im2,q_im1,Diff_q_im1,q_i,Diff_q_i,q_ip1, &
   Diff_q_ip1,ua,Diff_ua) +sign(1., ua) *(1./12.)*((Diff_q_ip1 -Diff_q_im2) &
   -3.*(Diff_q_i -Diff_q_im1))
   flux3(q_im2,q_im1,q_i,q_ip1,ua) =flux4(q_im2,q_im1,q_i,q_ip1,ua) +sign(1., ua) &
   *(1./12.)*((q_ip1 -q_im2) -3.*(q_i -q_im1))

   Diff_flux6(q_im3, Diff_q_im3,q_im2, Diff_q_im2,q_im1, Diff_q_im1,q_i, Diff_q_i, &
   q_ip1, Diff_q_ip1,q_ip2, Diff_q_ip2,ua, Diff_ua) =(37./60.)*(Diff_q_i +Diff_q_im1) &
   -(2./15.)*(Diff_q_ip1 +Diff_q_im2) +(1./60.)*(Diff_q_ip2 +Diff_q_im3)
   flux6(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2,ua) =(37./60.)*(q_i +q_im1) -(2./15.) &
  *(q_ip1 +q_im2) +(1./60.)*(q_ip2 +q_im3)

   Diff_flux5(q_im3, Diff_q_im3,q_im2, Diff_q_im2,q_im1, Diff_q_im1,q_i, Diff_q_i, &
   q_ip1, Diff_q_ip1,q_ip2, Diff_q_ip2,ua, Diff_ua) =Diff_flux6(q_im3,Diff_q_im3,q_im2, &
   Diff_q_im2,q_im1,Diff_q_im1,q_i,Diff_q_i,q_ip1,Diff_q_ip1,q_ip2,Diff_q_ip2,ua, &
   Diff_ua) -sign(1., ua) *(1./60.)*((Diff_q_ip2 -Diff_q_im3) -5.*(Diff_q_ip1 - &
   Diff_q_im2) +10.*(Diff_q_i -Diff_q_im1))
   flux5(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2,ua) =flux6(q_im3,q_im2,q_im1,q_i,q_ip1,q_ip2, &
   ua) -sign(1., ua) *(1./60.)*((q_ip2 -q_im3) -5.*(q_ip1 -q_im2) +10.*(q_i -q_im1))

   Diff_flux_upwind(q_im1, Diff_q_im1,q_i, Diff_q_i,cr, Diff_cr) =0.5 *(1.+sign(1., cr)) &
  *Diff_q_im1 +0.5 *(1.-sign(1., cr))*Diff_q_i
   flux_upwind(q_im1,q_i,cr) =0.5 *(1.+sign(1., cr))*q_im1 +0.5 *(1.-sign(1., cr))*q_i

   LOGICAL,PARAMETER :: mono_limit =.true.

   REAL :: Keep_Lpb3_cr
   REAL :: Keep_Lpb7_ub
   REAL :: Keep_Lpb11_vb
   REAL :: Keep_Lpb21_vel
   REAL :: Keep_Lpb21_cr   
   INTEGER :: IX1,IX2,IX3

   REAL :: a_Tmpv1,Tmpv001,a_Tmpv2,Tmpv002,a_Tmpv3,Tmpv003,a_Tmpv4,Tmpv004, &
   a_Tmpv5,Tmpv005,a_Tmpv6,Tmpv006,a_Tmpv7,Tmpv007,a_Tmpv8,Tmpv008,a_Tmpv9, &
   Tmpv009,a_Tmpv10,Tmpv010,a_Tmpv11,Tmpv011,a_Tmpv12,Tmpv012,gwalls

   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: Tmpv2400,Tmpv2401,Tmpv2402,Tmpv2403,Tmpv2404,Tmpv2405
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: Tmpv600,Tmpv601,Tmpv602,Tmpv603
   REAL,DIMENSION(its-2:ite+2,kts:kte) :: Tmpv604,Tmpv605,Tmpv606,Tmpv607,Tmpv608, &
       Tmpv609,Tmpv6010,Tmpv6011,Tmpv6012,Tmpv6013,Tmpv6014,Tmpv6015,Tmpv6016, &
       Tmpv6017,Tmpv6018,Tmpv6019
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: Tmpv700,Tmpv701,Tmpv702,Tmpv703
   REAL,DIMENSION(kts:kte,jts-2:jte+2) :: Tmpv704,Tmpv705,Tmpv706,Tmpv707,Tmpv708, &
       Tmpv709,Tmpv710,Tmpv711,Tmpv712,Tmpv713,Tmpv714,Tmpv715,Tmpv716, &
       Tmpv717,Tmpv718,Tmpv719
   REAL,DIMENSION(its-2:ite+2,kts:kte,jts-2:jte+2) :: Tmpv800,Tmpv801,Tmpv802,Tmpv803
   REAL,DIMENSION(its-2:ite+2,jts-2:jte+2) :: Tmpv804,Tmpv805,Tmpv806,Tmpv807,Tmpv808, &
       Tmpv809,Tmpv810,Tmpv811

!PART II: CALCULATIONS OF B. S. TRAJECTORY

!LPB[0]
     ktf=MIN(kte,kde-1)
     horz_order = config_flags%h_sca_adv_order
     vert_order = config_flags%v_sca_adv_order

     degrade_xs = .true.
     degrade_xe = .true.
     degrade_ys = .true.
     degrade_ye = .true.

     IF( config_flags%periodic_x   .or. &
         config_flags%symmetric_xs .or. &
         (its > ids+3)                ) degrade_xs = .false.
     IF( config_flags%periodic_x   .or. &
         config_flags%symmetric_xe .or. &
         (ite < ide-4)                ) degrade_xe = .false.
     IF( config_flags%periodic_y   .or. &
         config_flags%symmetric_ys .or. &
         (jts > jds+3)                ) degrade_ys = .false.
     IF( config_flags%periodic_y   .or. &
         config_flags%symmetric_ye .or. &
         (jte < jde-4)                ) degrade_ye = .false.

!PART III: INITIALIZATION OF LOCAL ADJOINT PERTURBATIONS

   a_ub =0.0
   a_vb =0.0

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_fqx(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_fqy(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_fqz(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_fqxl(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_fqyl(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_fqzl(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_qmin(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_qmax(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_scale_in(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   Do K2_ADJ =jts-2, jte+2
   Do K1_ADJ =kts, kte
   Do K0_ADJ =its-2, ite+2
   a_scale_out(K0_ADJ,K1_ADJ,K2_ADJ) =0.0
   End Do
   End Do
   End Do

   a_ph_upwind =0.0
   a_flux_out =0.0
   a_ph_low =0.0
   a_flux_in =0.0
   a_ph_hi =0.0
   a_scale =0.0
   a_vel =0.0
   a_cr =0.0

!PART IV: REVERSE/BACKWARD ACCUMULATIONS

!LPB[35]
   i_start = its
   i_end   = MIN(ite,ide-1)
   j_start = jts
   j_end   = MIN(jte,jde-1)

   IF(degrade_ys) j_start = MAX(jts,jds+1)
   IF(degrade_ye) j_end   = MIN(jte,jde-2)

   IF(tenddec) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-rdy*msftx(i,j)*a_h_tendency(i,k,j)
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_fqyl(i,k,j+1) =a_fqyl(i,k,j+1) +a_Tmpv1
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +a_Tmpv1
   a_fqy(i,k,j) =a_fqy(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO
   ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-rdy*msftx(i,j)*a_tendency(i,k,j)
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv1
   a_fqyl(i,k,j+1) =a_fqyl(i,k,j+1) +a_Tmpv1
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +a_Tmpv1
   a_fqy(i,k,j) =a_fqy(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

!LPB[30]
   i_start = its
   i_end   = MIN(ite,ide-1)
   j_start = jts
   j_end   = MIN(jte,jde-1)
   IF(degrade_xs) i_start = MAX(its,ids+1)
   IF(degrade_xe) i_end   = MIN(ite,ide-2)

   IF(tenddec) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-rdx*msftx(i,j)*a_h_tendency(i,k,j)
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_fqxl(i+1,k,j) =a_fqxl(i+1,k,j) +a_Tmpv1
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -a_Tmpv1
   a_h_tendency(i,k,j) = 0.0
   ENDDO
   ENDDO
   ENDDO
   ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   a_Tmpv1 =-rdx*msftx(i,j)*a_tendency(i,k,j)
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv1
   a_fqxl(i+1,k,j) =a_fqxl(i+1,k,j) +a_Tmpv1
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

!LPB[25]
   i_start = its
   i_end   = MIN(ite,ide-1)
   j_start = jts
   j_end   = MIN(jte,jde-1)

   IF(tenddec) THEN
   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   gwalls=-rdzw(k)
   DO i =i_end, i_start, -1
   a_Tmpv1 =gwalls*a_z_tendency(i,k,j)
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_fqzl(i,k+1,j) =a_fqzl(i,k+1,j) +a_Tmpv1
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +a_Tmpv1
   a_fqz(i,k,j) =a_fqz(i,k,j) -a_Tmpv1
   a_z_tendency(i,k,j) = 0.0
   ENDDO
   ENDDO
   ENDDO
   ENDIF

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   gwalls=-rdzw(k)
   DO i =i_end, i_start, -1
   a_Tmpv1 =gwalls*a_tendency(i,k,j)
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_fqzl(i,k+1,j) =a_fqzl(i,k+1,j) +a_Tmpv1
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +a_Tmpv1
   a_fqz(i,k,j) =a_fqz(i,k,j) -a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

!LPB[1]
   qmin(its-2:ite+2,kts:kte,jts-2:jte+2) =field_old(its-2:ite+2,kts:kte,jts-2:jte+2)
   qmax(its-2:ite+2,kts:kte,jts-2:jte+2) =field_old(its-2:ite+2,kts:kte,jts-2:jte+2)
   scale_in(its-2:ite+2,kts:kte,jts-2:jte+2) =1.
   scale_out(its-2:ite+2,kts:kte,jts-2:jte+2) =1.
   fqx(its-2:ite+2,kts:kte,jts-2:jte+2) =0.
   fqy(its-2:ite+2,kts:kte,jts-2:jte+2) =0.
   fqz(its-2:ite+2,kts:kte,jts-2:jte+2) =0.
   fqxl(its-2:ite+2,kts:kte,jts-2:jte+2) =0.
   fqyl(its-2:ite+2,kts:kte,jts-2:jte+2) =0.
   fqzl(its-2:ite+2,kts:kte,jts-2:jte+2) =0.

!LPB[3]
   IF( horz_order == 5 ) THEN
   ktf =min(kte, kde-1)
   i_start =its-1
   i_end =min(ite, ide-1) +1
   j_start =jts-1
   j_end =min(jte, jde-1) +1
   j_start_f =j_start
   j_end_f =j_end+1
   IF(degrade_xs) i_start =max(its-1, ids)
   IF(degrade_xe) i_end =min(ite+1, ide-1)
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   j_start_f =jds+3
   ENDIF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   j_end_f =jde-3
   ENDIF

   DO j =j_start, j_end+1
   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   vel =rv(i,k,j)
   cr =vel

   fqyl(i,k,j) =vel*flux_upwind(field_old(i,k,j-1),field_old(i,k,j),vel)
   fqy(i,k,j) =vel*flux5(field(i,k,j-3),field(i,k,j-2),field(i,k,j-1),field(i,k,j)  &
   ,field(i,k,j+1),field(i,k,j+2),vel)

   fqy(i,k,j) =fqy(i,k,j) -fqyl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv600(i,k,j) = qmax(i,k,j)
   qmax(i,k,j) =amax1(qmax(i,k,j), field_old(i,k,j-1))

   Tmpv601(i,k,j) = qmin(i,k,j)
   qmin(i,k,j) =amin1(qmin(i,k,j), field_old(i,k,j-1))

   else

   Tmpv602(i,k,j-1) = qmax(i,k,j-1)
   qmax(i,k,j-1) =amax1(qmax(i,k,j-1), field_old(i,k,j))

   Tmpv603(i,k,j-1) = qmin(i,k,j-1)
   qmin(i,k,j-1) =amin1(qmin(i,k,j-1), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   vel =rv(i,k,j)
   cr =vel

   fqyl(i,k,j) =vel*flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   fqy(i,k,j) =0.5*rv(i,k,j)*(field(i,k,j) +field(i,k,j-1))
   fqy(i,k,j) =fqy(i,k,j) -fqyl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv604(i,k) = qmax(i,k,j)
   qmax(i,k,j) =amax1(qmax(i,k,j), field_old(i,k,j-1))

   Tmpv605(i,k) = qmin(i,k,j)
   qmin(i,k,j) =amin1(qmin(i,k,j), field_old(i,k,j-1))

   else

   Tmpv606(i,k) = qmax(i,k,j-1)
   qmax(i,k,j-1) =amax1(qmax(i,k,j-1), field_old(i,k,j))

   Tmpv607(i,k) = qmin(i,k,j-1)
   qmin(i,k,j-1) =amin1(qmin(i,k,j-1), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO

   ELSE IF( j == jds+2 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   vel =rv(i,k,j)
   cr =vel

   fqyl(i,k,j) =vel*flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   fqy(i,k,j) =vel*flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   fqy(i,k,j) =fqy(i,k,j) -fqyl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv608(i,k) = qmax(i,k,j)
   qmax(i,k,j) =max(qmax(i,k,j), field_old(i,k,j-1))

   Tmpv609(i,k) = qmin(i,k,j)
   qmin(i,k,j) =min(qmin(i,k,j), field_old(i,k,j-1))

   else

   Tmpv6010(i,k) = qmax(i,k,j-1)
   qmax(i,k,j-1) =max(qmax(i,k,j-1), field_old(i,k,j))

   Tmpv6011(i,k) = qmin(i,k,j-1)
   qmin(i,k,j-1) =min(qmin(i,k,j-1), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   vel =rv(i,k,j)
   cr =vel

   fqyl(i,k,j) =vel*flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   fqy(i,k,j) =0.5*rv(i,k,j)*(field(i,k,j) +field(i,k,j-1))
   fqy(i,k,j) =fqy(i,k,j) -fqyl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv6012(i,k) = qmax(i,k,j)
   qmax(i,k,j) =max(qmax(i,k,j), field_old(i,k,j-1))

   Tmpv6013(i,k) = qmin(i,k,j)
   qmin(i,k,j) =min(qmin(i,k,j), field_old(i,k,j-1))

   else

   Tmpv6014(i,k) = qmax(i,k,j-1)
   qmax(i,k,j-1) =max(qmax(i,k,j-1), field_old(i,k,j))

   Tmpv6015(i,k) = qmin(i,k,j-1)
   qmin(i,k,j-1) =min(qmin(i,k,j-1), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO
   ELSE IF( j == jde-2 ) THEN

   DO k =kts, ktf
   DO i =i_start, i_end
   vel =rv(i,k,j)
   cr =vel

   fqyl(i,k,j) =vel*flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)
   fqy(i,k,j) =vel*flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)
   fqy(i,k,j) =fqy(i,k,j) -fqyl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv6016(i,k) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i,k,j-1))
   qmax(i,k,j) =Tmpv001

   Tmpv6017(i,k) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i,k,j-1))
   qmin(i,k,j) =Tmpv001

   else

   Tmpv6018(i,k) = qmax(i,k,j-1)
   qmax(i,k,j-1) =max(qmax(i,k,j-1), field_old(i,k,j))

   Tmpv6019(i,k) = qmin(i,k,j-1)
   qmin(i,k,j-1) =min(qmin(i,k,j-1), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO
   ENDIF
   ENDDO

   i_start =its-1
   i_end =min(ite, ide-1) +1
   i_start_f =i_start
   i_end_f =i_end+1
   j_start =jts-1
   j_end =min(jte, jde-1) +1
   IF(degrade_ys) j_start =max(jts-1, jds)
   IF(degrade_ye) j_end =min(jte+1, jde-1)
   IF(degrade_xs) THEN 
   i_start =max(ids+1, its-1)
   i_start_f =ids+3
   ENDIF
   IF(degrade_xe) THEN
   i_end =min(ide-2, ite+1)
   i_end_f =ide-3
   ENDIF

   DO j =j_start, j_end

   DO k =kts, ktf
   DO i =i_start_f, i_end_f
   vel =ru(i,k,j)
   cr =vel

   fqxl(i,k,j) =vel*flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)

   fqx(i,k,j) =vel*flux5(field(i-3,k,j),field(i-2,k,j),field(i-1,k,j),field(i,k,j)  &
   ,field(i+1,k,j),field(i+2,k,j),vel)

   fqx(i,k,j) =fqx(i,k,j) -fqxl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv700(i,k,j) = qmax(i,k,j)
   qmax(i,k,j) =max(qmax(i,k,j), field_old(i-1,k,j))

   Tmpv701(i,k,j) = qmin(i,k,j)
   qmin(i,k,j) =min(qmin(i,k,j), field_old(i-1,k,j))

   else
   Tmpv702(i-1,k,j) = qmax(i-1,k,j)
   qmax(i-1,k,j) =max(qmax(i-1,k,j), field_old(i,k,j))

   Tmpv703(i-1,k,j) = qmin(i-1,k,j)
   qmin(i-1,k,j) =min(qmin(i-1,k,j), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO

   IF( degrade_xs ) THEN

   DO i =i_start, i_start_f-1
   IF(i == ids+1) THEN

   DO k =kts, ktf
   vel =ru(i,k,j)
   cr =vel

   fqxl(i,k,j) =vel*flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   fqx(i,k,j) =0.5*(ru(i,k,j))*(field(i,k,j) +field(i-1,k,j))

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   IF(cr.gt. 0) THEN
   Tmpv704(k,j) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i-1,k,j))
   qmax(i,k,j) =Tmpv001

   Tmpv705(k,j) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i-1,k,j))
   qmin(i,k,j) =Tmpv001

   else
   Tmpv706(k,j) = qmax(i-1,k,j)
   Tmpv001 =max(qmax(i-1,k,j), field_old(i,k,j))
   qmax(i-1,k,j) =Tmpv001

   Tmpv707(k,j) = qmin(i-1,k,j)
   Tmpv001 =min(qmin(i-1,k,j), field_old(i,k,j))
   qmin(i-1,k,j) =Tmpv001

   end IF
   ENDDO
   ENDIF
   IF(i == ids+2) THEN

   DO k =kts, ktf
   vel =ru(i,k,j)
   cr =vel

   fqxl(i,k,j) =vel*flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   fqx(i,k,j) =vel*flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   fqx(i,k,j) =fqx(i,k,j) -fqxl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv708(k,j) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i-1,k,j))
   qmax(i,k,j) =Tmpv001

   Tmpv709(k,j) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i-1,k,j))
   qmin(i,k,j) =Tmpv001

   else
   Tmpv710(k,j) = qmax(i-1,k,j)
   Tmpv001 =max(qmax(i-1,k,j), field_old(i,k,j))
   qmax(i-1,k,j) =Tmpv001

   Tmpv711(k,j) = qmin(i-1,k,j)
   Tmpv001 =min(qmin(i-1,k,j), field_old(i,k,j))
   qmin(i-1,k,j) =Tmpv001

   end IF
   ENDDO
   ENDIF
   ENDDO
   ENDIF

   IF( degrade_xe ) THEN
   DO i =i_end_f+1, i_end+1
   IF( i == ide-1 ) THEN

   DO k =kts, ktf
   vel =ru(i,k,j)
   cr =vel

   fqxl(i,k,j) =vel*flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   fqx(i,k,j) =0.5*(ru(i,k,j))*(field(i,k,j) +field(i-1,k,j))
   fqx(i,k,j) =fqx(i,k,j) -fqxl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv712(k,j) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i-1,k,j))
   qmax(i,k,j) =Tmpv001

   Tmpv713(k,j) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i-1,k,j))
   qmin(i,k,j) =Tmpv001

   else
   Tmpv714(k,j) = qmax(i-1,k,j)
   Tmpv001 =max(qmax(i-1,k,j), field_old(i,k,j))
   qmax(i-1,k,j) =Tmpv001

   Tmpv715(k,j) = qmin(i-1,k,j)
   Tmpv001 =min(qmin(i-1,k,j), field_old(i,k,j))
   qmin(i-1,k,j) =Tmpv001

   end IF
   ENDDO
   ENDIF
   IF( i == ide-2 ) THEN

   DO k =kts, ktf
   vel =ru(i,k,j)
   cr =vel

   Tmpv001 =flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)
   Tmpv002 =vel*Tmpv001
   fqxl(i,k,j) =Tmpv002

   Tmpv001 =flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)
   Tmpv002 =vel*Tmpv001
   fqx(i,k,j) =Tmpv002

   Tmpv001 =fqx(i,k,j) -fqxl(i,k,j)
   fqx(i,k,j) =Tmpv001

   IF(cr.gt. 0) THEN
   Tmpv716(k,j) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i-1,k,j))
   qmax(i,k,j) =Tmpv001

   Tmpv717(k,j) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i-1,k,j))
   qmin(i,k,j) =Tmpv001

   else
   Tmpv718(k,j) = qmax(i-1,k,j)
   Tmpv001 =max(qmax(i-1,k,j), field_old(i,k,j))
   qmax(i-1,k,j) =Tmpv001

   Tmpv719(k,j) = qmin(i-1,k,j)
   Tmpv001 =min(qmin(i-1,k,j), field_old(i,k,j))
   qmin(i-1,k,j) =Tmpv001

   end IF
   ENDDO
   ENDIF
   ENDDO
   ENDIF
   ENDDO

   ELSE

   ENDIF

   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1
   IF(degrade_xs) i_start = MAX(its-1,ids)
   IF(degrade_xe) i_end   = MIN(ite+1,ide-1)
   IF(degrade_ys) j_start = MAX(jts-1,jds)
   IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

!LPB[22]

   IF(vert_order == 3) THEN
   DO j =j_start, j_end
   DO i =i_start, i_end
   fqz(i,1,j) =0.
   fqzl(i,1,j) =0.
   fqz(i,kde,j) =0.
   fqzl(i,kde,j) =0.
   ENDDO

   DO k =kts+2, ktf-1
   DO i =i_start, i_end
   vel =rom(i,k,j)
   cr =-vel

   fqzl(i,k,j) =vel*flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   fqz(i,k,j) =vel*flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)
   fqz(i,k,j) =fqz(i,k,j) -fqzl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv800(i,k,j) = qmax(i,k,j)
   qmax(i,k,j) =max(qmax(i,k,j), field_old(i,k-1,j))

   Tmpv801(i,k,j) = qmin(i,k,j)
   qmin(i,k,j) =min(qmin(i,k,j), field_old(i,k-1,j))

   else

   Tmpv802(i,k-1,j) = qmax(i,k-1,j)
   qmax(i,k-1,j) =max(qmax(i,k-1,j), field_old(i,k,j))

   Tmpv803(i,k-1,j) = qmin(i,k-1,j)
   qmin(i,k-1,j) =min(qmin(i,k-1,j), field_old(i,k,j))
   end IF
   ENDDO
   ENDDO

   DO i =i_start, i_end
   k =kts+1
   vel =rom(i,k,j)
   cr =-vel

   fqzl(i,k,j) =vel*flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   fqz(i,k,j) =rom(i,k,j)*(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))

   Tmpv001 =fqz(i,k,j) -fqzl(i,k,j)
   fqz(i,k,j) =Tmpv001

   IF(cr.gt. 0) THEN
   Tmpv804(i,j) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i,k-1,j))
   qmax(i,k,j) =Tmpv001

   Tmpv805(i,j) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i,k-1,j))
   qmin(i,k,j) =Tmpv001

   else
   Tmpv806(i,j) = qmax(i,k-1,j)
   Tmpv001 =max(qmax(i,k-1,j), field_old(i,k,j))
   qmax(i,k-1,j) =Tmpv001

   Tmpv807(i,j) = qmin(i,k-1,j)
   Tmpv001 =min(qmin(i,k-1,j), field_old(i,k,j))
   qmin(i,k-1,j) =Tmpv001

   end IF
   k =ktf
   vel =rom(i,k,j)
   cr =-vel

   fqzl(i,k,j) =vel*flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)
   fqz(i,k,j) =rom(i,k,j)*(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))
   fqz(i,k,j) =fqz(i,k,j) -fqzl(i,k,j)

   IF(cr.gt. 0) THEN
   Tmpv808(i,j) = qmax(i,k,j)
   Tmpv001 =max(qmax(i,k,j), field_old(i,k-1,j))
   qmax(i,k,j) =Tmpv001

   Tmpv809(i,j) = qmin(i,k,j)
   Tmpv001 =min(qmin(i,k,j), field_old(i,k-1,j))
   qmin(i,k,j) =Tmpv001

   else

   Tmpv810(i,j) = qmax(i,k-1,j)
   qmax(i,k-1,j) =max(qmax(i,k-1,j), field_old(i,k,j))

   Tmpv811(i,j) = qmin(i,k-1,j)
   qmin(i,k-1,j) =min(qmin(i,k-1,j), field_old(i,k,j))

   end IF
   ENDDO
   ENDDO

   ELSE

   ENDIF

!LPB[23]
   IF(mono_limit) THEN
   i_start =its-1
   Tmpv001 =min(ite, ide-1) +1
   i_end =Tmpv001
   j_start =jts-1
   Tmpv001 =min(jte, jde-1) +1
   j_end =Tmpv001
   IF(degrade_xs) THEN
   i_start =max(its-1, ids)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-1)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-1)
   END IF
   IF(config_flags%specified .or. config_flags%nested) THEN
   IF(degrade_xs) THEN
   i_start =max(its-1, ids+1)
   END IF
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-2)
   END IF
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   END IF
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   END IF
   END IF
   IF(config_flags%open_xs) THEN
   IF(degrade_xs) THEN
   i_start =max(its-1, ids+1)
   END IF
   END IF
   IF(config_flags%open_xe) THEN
   IF(degrade_xe) THEN
   i_end =min(ite+1, ide-2)
   END IF
   END IF
   IF(config_flags%open_ys) THEN
   IF(degrade_ys) THEN
   j_start =max(jts-1, jds+1)
   END IF
   END IF
   IF(config_flags%open_ye) THEN
   IF(degrade_ye) THEN
   j_end =min(jte+1, jde-2)
   END IF
   END IF

   DO j =j_start, j_end
   DO k =kts, ktf
   DO i =i_start, i_end
   Tmpv001 =(mub(i,j) +mu_old(i,j))*field_old(i,k,j)
   Tmpv002 =fqxl(i+1,k,j) -fqxl(i,k,j)
   Tmpv003 =rdx*Tmpv002
   Tmpv004 =fqyl(i,k,j+1) -fqyl(i,k,j)
   Tmpv005 =rdy*Tmpv004
   Tmpv006 =Tmpv003 +Tmpv005
   Tmpv007 =msftx(i,j)*msfty(i,j)*Tmpv006
   Tmpv008 =fqzl(i,k+1,j) -fqzl(i,k,j)
   Tmpv009 =msfty(i,j)*rdzw(k)*Tmpv008
   ph_upwind =Tmpv001 -dt*(Tmpv007 +Tmpv009)

   Tmpv001 =min(0., fqx(i+1,k,j)) -max(0., fqx(i,k,j))
   Tmpv002 =rdx*Tmpv001
   Tmpv003 =min(0., fqy(i,k,j+1)) -max(0., fqy(i,k,j))
   Tmpv004 =rdy*Tmpv003
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =(msftx(i,j)*msfty(i,j))*Tmpv005
   Tmpv007 =max(0., fqz(i,k+1,j)) -min(0., fqz(i,k,j))
   Tmpv008 =msfty(i,j)*rdzw(k)*Tmpv007
   Tmpv009 =Tmpv006 +Tmpv008
   Tmpv010 =-dt*Tmpv009
   flux_in =Tmpv010
   Tmpv2400(i,k,j) =flux_in

   Tmpv001 =mut(i,j)*qmax(i,k,j)
   Tmpv002 =Tmpv001 -ph_upwind
   ph_hi =Tmpv002
   Tmpv2401(i,k,j) =ph_hi

   IF( flux_in .gt. ph_hi ) THEN
   Tmpv001 =ph_hi/(flux_in +eps)
   Tmpv2402(i,k,j) =Tmpv001
   scale_in(i,k,j) =max(0., Tmpv2402(i,k,j))
   END IF

   Tmpv001 =max(0., fqx(i+1,k,j)) -min(0., fqx(i,k,j))
   Tmpv002 =rdx*Tmpv001
   Tmpv003 =max(0., fqy(i,k,j+1)) -min(0., fqy(i,k,j))
   Tmpv004 =rdy*Tmpv003
   Tmpv005 =Tmpv002 +Tmpv004
   Tmpv006 =(msftx(i,j)*msfty(i,j))*Tmpv005
   Tmpv007 =min(0., fqz(i,k+1,j)) -max(0., fqz(i,k,j))
   Tmpv008 =msfty(i,j)*rdzw(k)*Tmpv007
   Tmpv009 =Tmpv006 +Tmpv008
   Tmpv010 =dt*Tmpv009
   flux_out =Tmpv010
   Tmpv2403(i,k,j) =flux_out

   Tmpv001 =mut(i,j)*qmin(i,k,j)
   Tmpv002 =ph_upwind -Tmpv001
   ph_low =Tmpv002
   Tmpv2404(i,k,j) =ph_low

   IF( flux_out .gt. ph_low ) THEN
   Tmpv001 =ph_low/(flux_out +eps)
   Tmpv2405(i,k,j) =Tmpv001
   scale_out(i,k,j) =max(0., Tmpv2405(i,k,j))
   END IF

   ENDDO
   ENDDO
   ENDDO

   DO j =j_end, j_start, -1
   DO k =ktf, kts+1, -1
   DO i =i_end, i_start, -1

   IF( fqz (i,k,j) .lt. 0.) THEN

   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_Tmpv1 =fqz(i,k,j)*a_Tmpv2
   a_fqz(i,k,j) =a_fqz(i,k,j) +min(scale_in(i,k,j), scale_out(i,k-1,j))*a_Tmpv2
   a_scale_in(i,k,j) =a_scale_in(i,k,j)  +(1.0 -sign(1.0, scale_in(i,k,j)  &
   -scale_out(i,k-1,j)))*0.5*1.0*a_Tmpv1
   a_scale_out(i,k-1,j) =a_scale_out(i,k-1,j)  +(1.0 +sign(1.0, scale_in(i,k,j)  &
   -scale_out(i,k-1,j)))*0.5*1.0*a_Tmpv1

   ELSE

   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_Tmpv1 =fqz(i,k,j)*a_Tmpv2
   a_fqz(i,k,j) =a_fqz(i,k,j) +min(scale_out(i,k,j), scale_in(i,k-1,j))*a_Tmpv2
   a_scale_out(i,k,j) =a_scale_out(i,k,j)  +(1.0 -sign(1.0, scale_out(i,k,j)  &
   -scale_in(i,k-1,j)))*0.5*1.0*a_Tmpv1
   a_scale_in(i,k-1,j) =a_scale_in(i,k-1,j)  +(1.0 +sign(1.0, scale_out(i,k,j)  &
   -scale_in(i,k-1,j)))*0.5*1.0*a_Tmpv1

   ENDIF
   ENDDO
   ENDDO
   ENDDO

   DO j =j_end+1, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1

   IF( fqy (i,k,j) .gt. 0.) THEN

   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_Tmpv1 =fqy(i,k,j)*a_Tmpv2
   a_fqy(i,k,j) =a_fqy(i,k,j) +min(scale_in(i,k,j), scale_out(i,k,j-1))*a_Tmpv2
   a_scale_in(i,k,j) =a_scale_in(i,k,j)  +(1.0 -sign(1.0, scale_in(i,k,j)  &
   -scale_out(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_scale_out(i,k,j-1) =a_scale_out(i,k,j-1)  +(1.0 +sign(1.0, scale_in(i,k,j)  &
   -scale_out(i,k,j-1)))*0.5*1.0*a_Tmpv1

   ELSE

   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_Tmpv1 =fqy(i,k,j)*a_Tmpv2
   a_fqy(i,k,j) =a_fqy(i,k,j) +min(scale_out(i,k,j), scale_in(i,k,j-1))*a_Tmpv2
   a_scale_out(i,k,j) =a_scale_out(i,k,j)  +(1.0 -sign(1.0, scale_out(i,k,j)  &
   -scale_in(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_scale_in(i,k,j-1) =a_scale_in(i,k,j-1)  +(1.0 +sign(1.0, scale_out(i,k,j)  &
   -scale_in(i,k,j-1)))*0.5*1.0*a_Tmpv1

   ENDIF
   ENDDO
   ENDDO
   ENDDO

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end+1, i_start, -1

   IF( fqx (i,k,j) .gt. 0.) THEN

   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_Tmpv1 =fqx(i,k,j)*a_Tmpv2
   a_fqx(i,k,j) =a_fqx(i,k,j) +min(scale_in(i,k,j), scale_out(i-1,k,j))*a_Tmpv2
   a_scale_in(i,k,j) =a_scale_in(i,k,j)  +(1.0 -sign(1.0, scale_in(i,k,j)  &
   -scale_out(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_scale_out(i-1,k,j) =a_scale_out(i-1,k,j)  +(1.0 +sign(1.0, scale_in(i,k,j)  &
   -scale_out(i-1,k,j)))*0.5*1.0*a_Tmpv1

   ELSE

   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_Tmpv1 =fqx(i,k,j)*a_Tmpv2
   a_fqx(i,k,j) =a_fqx(i,k,j) +min(scale_out(i,k,j), scale_in(i-1,k,j))*a_Tmpv2
   a_scale_out(i,k,j) =a_scale_out(i,k,j)  +(1.0 -sign(1.0, scale_out(i,k,j)  &
   -scale_in(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_scale_in(i-1,k,j) =a_scale_in(i-1,k,j)  +(1.0 +sign(1.0, scale_out(i,k,j)  &
   -scale_in(i-1,k,j)))*0.5*1.0*a_Tmpv1

   ENDIF

   ENDDO
   ENDDO
   ENDDO

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   flux_out = Tmpv2403(i,k,j)
   ph_low = Tmpv2404(i,k,j)

   IF( flux_out .gt. ph_low ) THEN
   a_Tmpv1 = (1.0 +(-1.0)*sign(1.0, 0. -Tmpv2405(i,k,j)))*0.5*a_scale_out(i,k,j)
   a_scale_out(i,k,j) =0.0
   a_ph_low =a_ph_low +a_Tmpv1/(flux_out +eps)
   a_flux_out =a_flux_out -ph_low/((flux_out +eps)*(flux_out +eps))*a_Tmpv1
   END IF

   a_Tmpv2 =a_ph_low
   a_ph_low =0.0
   a_ph_upwind =a_ph_upwind +a_Tmpv2
   a_Tmpv1 =-a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +qmin(i,k,j)*a_Tmpv1
   a_qmin(i,k,j) =a_qmin(i,k,j) +mut(i,j)*a_Tmpv1

   a_Tmpv10 =a_flux_out
   a_flux_out =0.0
   a_Tmpv9 =dt*a_Tmpv10
   a_Tmpv6 =a_Tmpv9
   a_Tmpv8 =a_Tmpv9
   a_Tmpv7 =msfty(i,j)*rdzw(k)*a_Tmpv8
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +(1.0 -(-1.0)*sign(1.0, 0. -fqz(i,k+1,j)))*0.5*a_Tmpv7
   a_fqz(i,k,j) =a_fqz(i,k,j) -(1.0 +(-1.0)*sign(1.0, 0. -fqz(i,k,j)))*0.5*a_Tmpv7
   a_Tmpv5 =(msftx(i,j)*msfty(i,j))*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_Tmpv3 =rdy*a_Tmpv4
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +(1.0 +(-1.0)*sign(1.0, 0. -fqy(i,k,j+1)))*0.5*a_Tmpv3
   a_fqy(i,k,j) =a_fqy(i,k,j) -(1.0 -(-1.0)*sign(1.0, 0. -fqy(i,k,j)))*0.5*a_Tmpv3
   a_Tmpv1 =rdx*a_Tmpv2
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +(1.0 +(-1.0)*sign(1.0, 0. -fqx(i+1,k,j)))*0.5*a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -(1.0 -(-1.0)*sign(1.0, 0. -fqx(i,k,j)))*0.5*a_Tmpv1

   flux_in =Tmpv2400(i,k,j)
   ph_hi =Tmpv2401(i,k,j)

   IF( flux_in .gt. ph_hi ) THEN

   a_Tmpv1 = (1.0 +(-1.0)*sign(1.0, 0. -Tmpv2402(i,k,j)))*0.5*a_scale_in(i,k,j)
   a_scale_in(i,k,j) =0.0
   a_ph_hi =a_ph_hi +a_Tmpv1/(flux_in +eps)
   a_flux_in =a_flux_in -ph_hi/((flux_in +eps)*(flux_in +eps))*a_Tmpv1
   END IF

   a_Tmpv2 =a_ph_hi
   a_ph_hi =0.0
   a_Tmpv1 =a_Tmpv2
   a_ph_upwind =a_ph_upwind -a_Tmpv2
   a_mut(i,j) =a_mut(i,j) +qmax(i,k,j)*a_Tmpv1
   a_qmax(i,k,j) =a_qmax(i,k,j) +mut(i,j)*a_Tmpv1

   a_Tmpv10 =a_flux_in
   a_flux_in =0.0
   a_Tmpv9 =-dt*a_Tmpv10
   a_Tmpv6 =a_Tmpv9
   a_Tmpv8 =a_Tmpv9
   a_Tmpv7 =msfty(i,j)*rdzw(k)*a_Tmpv8
   a_fqz(i,k+1,j) =a_fqz(i,k+1,j) +(1.0 +(-1.0)*sign(1.0, 0. -fqz(i,k+1,j)))*0.5*a_Tmpv7
   a_fqz(i,k,j) =a_fqz(i,k,j) -(1.0 -(-1.0)*sign(1.0, 0. -fqz(i,k,j)))*0.5*a_Tmpv7
   a_Tmpv5 =(msftx(i,j)*msfty(i,j))*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_Tmpv3 =rdy*a_Tmpv4
   a_fqy(i,k,j+1) =a_fqy(i,k,j+1) +(1.0 -(-1.0)*sign(1.0, 0. -fqy(i,k,j+1)))*0.5*a_Tmpv3
   a_fqy(i,k,j) =a_fqy(i,k,j) -(1.0 +(-1.0)*sign(1.0, 0. -fqy(i,k,j)))*0.5*a_Tmpv3
   a_Tmpv1 =rdx*a_Tmpv2
   a_fqx(i+1,k,j) =a_fqx(i+1,k,j) +(1.0 -(-1.0)*sign(1.0, 0. -fqx(i+1,k,j)))*0.5*a_Tmpv1
   a_fqx(i,k,j) =a_fqx(i,k,j) -(1.0 +(-1.0)*sign(1.0, 0. -fqx(i,k,j)))*0.5*a_Tmpv1
   a_Tmpv12 =a_ph_upwind
   a_ph_upwind =0.0
   a_Tmpv1 =a_Tmpv12
   a_Tmpv11 =-a_Tmpv12
   a_Tmpv10 =dt*a_Tmpv11
   a_Tmpv7 =a_Tmpv10
   a_Tmpv9 =a_Tmpv10
   a_Tmpv8 =msfty(i,j)*rdzw(k)*a_Tmpv9
   a_fqzl(i,k+1,j) =a_fqzl(i,k+1,j) +a_Tmpv8
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv8
   a_Tmpv6 =msftx(i,j)*msfty(i,j)*a_Tmpv7
   a_Tmpv3 =a_Tmpv6
   a_Tmpv5 =a_Tmpv6
   a_Tmpv4 =rdy*a_Tmpv5
   a_fqyl(i,k,j+1) =a_fqyl(i,k,j+1) +a_Tmpv4
   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_Tmpv4
   a_Tmpv2 =rdx*a_Tmpv3
   a_fqxl(i+1,k,j) =a_fqxl(i+1,k,j) +a_Tmpv2
   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_Tmpv2
   a_mu_old(i,j) =a_mu_old(i,j) +field_old(i,k,j)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +(mub(i,j) +mu_old(i,j))*a_Tmpv1
   ENDDO
   ENDDO
   ENDDO

   END IF

!LPB[22]

   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1
   IF(degrade_xs) i_start = MAX(its-1,ids)
   IF(degrade_xe) i_end   = MIN(ite+1,ide-1)
   IF(degrade_ys) j_start = MAX(jts-1,jds)
   IF(degrade_ye) j_end   = MIN(jte+1,jde-1)

   IF(vert_order == 3) THEN

   DO j =j_end, j_start, -1
   DO i =i_end, i_start, -1
   k =ktf

   vel = rom(i,k,j)
   cr = -vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv808(i,j)
   qmin(i,k,j) = Tmpv809(i,j)

   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k-1,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k-1,j)))*0.5*1.0*a_Tmpv1

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k-1,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k-1,j)))*0.5*1.0*a_Tmpv1
   else
   qmax(i,k-1,j) = Tmpv810(i,j)
   qmin(i,k-1,j) = Tmpv811(i,j)

   a_Tmpv1 =a_qmin(i,k-1,j)
   a_qmin(i,k-1,j) =0.0
   a_qmin(i,k-1,j) =a_qmin(i,k-1,j)  +(1.0 -sign(1.0, qmin(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k-1,j)
   a_qmax(i,k-1,j) =0.0
   a_qmax(i,k-1,j) =a_qmax(i,k-1,j)  +(1.0 +sign(1.0, qmax(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j) +fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv2 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel -a_cr
   a_cr =0.0

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0

   k =kts+1

   vel = rom(i,k,j)
   cr = -vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv804(i,j)
   qmin(i,k,j) = Tmpv805(i,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k-1,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k-1,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k-1,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k-1,j)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k-1,j) = Tmpv806(i,j)
   qmin(i,k-1,j) = Tmpv807(i,j)

   a_Tmpv1 =a_qmin(i,k-1,j)
   a_qmin(i,k-1,j) =0.0
   a_qmin(i,k-1,j) =a_qmin(i,k-1,j)  +(1.0 -sign(1.0, qmin(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k-1,j)
   a_qmax(i,k-1,j) =0.0
   a_qmax(i,k-1,j) =a_qmax(i,k-1,j)  +(1.0 +sign(1.0, qmax(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF
   a_Tmpv1 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_fqz(i,k,j) =a_fqz(i,k,j) +a_Tmpv1
   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_Tmpv1
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_rom(i,k,j) =a_rom(i,k,j) +(fzm(k)*field(i,k,j)+fzp(k)*field(i,k-1,j))*a_Tmpv2
   a_Tmpv1 =rom(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +fzm(k)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +fzp(k)*a_Tmpv1
   a_Tmpv2 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel -a_cr
   a_cr =0.0

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0
   ENDDO

   DO k =ktf-1, kts+2, -1
   DO i =i_end, i_start, -1
   vel = rom(i,k,j)
   cr = -vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv800(i,k,j)
   qmin(i,k,j) = Tmpv801(i,k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k-1,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k-1,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k-1,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k-1,j)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k-1,j) = Tmpv802(i,k-1,j)
   qmin(i,k-1,j) = Tmpv803(i,k-1,j)

   a_Tmpv1 =a_qmin(i,k-1,j)
   a_qmin(i,k-1,j) =0.0
   a_qmin(i,k-1,j) =a_qmin(i,k-1,j)  +(1.0 -sign(1.0, qmin(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k-1,j)
   a_qmax(i,k-1,j) =0.0
   a_qmax(i,k-1,j) =a_qmax(i,k-1,j)  +(1.0 +sign(1.0, qmax(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k-1,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqzl(i,k,j) =a_fqzl(i,k,j) -a_fqz(i,k,j)
   a_Tmpv2 =a_fqz(i,k,j)
   a_fqz(i,k,j) =0.0
   a_vel =a_vel +flux3(field(i,k-2,j),field(i,k-1,j),field(i,k,j),field(i,k+1,j),-vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel -Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j),0.0,field(i,k,j)  &
   ,0.0,field(i,k+1,j),0.0,-vel,1.0)*a_Tmpv1
   a_field(i,k+1,j) =a_field(i,k+1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),1.0,-vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,j)  &
   ,0.0,field(i,k,j),1.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-1,j) =a_field(i,k-1,j) +Diff_flux3(field(i,k-2,j),0.0,field(i,k-1,  &
   j),1.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1
   a_field(i,k-2,j) =a_field(i,k-2,j) +Diff_flux3(field(i,k-2,j),1.0,field(i,k-1,  &
   j),0.0,field(i,k,j),0.0,field(i,k+1,j),0.0,-vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqzl(i,k,j)
   a_fqzl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k-1,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k-1,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k-1,j) =a_field_old(i,k-1,j) +Diff_flux_upwind(field_old(i,k-1,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel -a_cr
   a_cr =0.0

   a_rom(i,k,j) =a_rom(i,k,j) +a_vel
   a_vel =0.0
   ENDDO
   ENDDO

   DO i =i_end, i_start, -1
   a_fqzl(i,kde,j) =0.0
   a_fqz(i,kde,j) =0.0
   a_fqzl(i,1,j) =0.0
   a_fqz(i,1,j) =0.0
   ENDDO

   ENDDO

   ELSE
   ENDIF

!LPB[12]

   i_start =its
   i_end =min(ite, ide-1)
   j_start =jts
   j_end =min(jte, jde-1)

!LPB[11]

   IF( (config_flags%open_ye) .and. (jte == jde)) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   gwalls =0.5*(rv(i,k,jte-1) +rv(i,k,jte))
   vb =max(gwalls, 0.)
   a_Tmpv7 =a_tendency(i,k,j_end)
   a_tendency(i,k,j_end) =0.0
   a_tendency(i,k,j_end) =a_tendency(i,k,j_end) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdy*a_Tmpv6
   a_field(i,k,j_end) =a_field(i,k,j_end) +(rv(i,k,jte) -rv(i,k,jte-1))*a_Tmpv5
   a_Tmpv3 =field(i,k,j_end)*a_Tmpv5
   a_rv(i,k,jte) =a_rv(i,k,jte) +a_Tmpv3
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) -a_Tmpv3
   a_vb =a_vb +(field_old(i,k,j_end) -field_old(i,k,j_end-1))*a_Tmpv5
   a_Tmpv1 =vb*a_Tmpv5
   a_field_old(i,k,j_end) =a_field_old(i,k,j_end) +a_Tmpv1
   a_field_old(i,k,j_end-1) =a_field_old(i,k,j_end-1) -a_Tmpv1

   a_Tmpv2 = (1.0 +(1.0)*sign(1.0, gwalls-0.))*0.5*a_vb
   a_vb =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_rv(i,k,jte-1) =a_rv(i,k,jte-1) +a_Tmpv1
   a_rv(i,k,jte) =a_rv(i,k,jte) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[9]

   IF( (config_flags%open_ys) .and. (jts == jds) ) THEN

   DO i =i_end, i_start, -1
   DO k =ktf, kts, -1
   gwalls =0.5*(rv(i,k,jts) +rv(i,k,jts+1))
   vb =min(gwalls, 0.)
   a_Tmpv7 =a_tendency(i,k,jts)
   a_tendency(i,k,jts) =0.0
   a_tendency(i,k,jts) =a_tendency(i,k,jts) +a_Tmpv7
   a_Tmpv5 =-rdy*a_Tmpv7
   a_field(i,k,jts) =a_field(i,k,jts) +(rv(i,k,jts+1) -rv(i,k,jts))*a_Tmpv5
   a_Tmpv3 =field(i,k,jts)*a_Tmpv5
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +a_Tmpv3
   a_rv(i,k,jts) =a_rv(i,k,jts) -a_Tmpv3
   a_vb =a_vb +(field_old(i,k,jts+1) -field_old(i,k,jts))*a_Tmpv5
   a_Tmpv1 =vb*a_Tmpv5
   a_field_old(i,k,jts+1) =a_field_old(i,k,jts+1) +a_Tmpv1
   a_field_old(i,k,jts) =a_field_old(i,k,jts) -a_Tmpv1

   a_Tmpv2 = (1.0 -(1.0)*sign(1.0, gwalls-0.))*0.5*a_vb
   a_vb =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_rv(i,k,jts) =a_rv(i,k,jts) +a_Tmpv1
   a_rv(i,k,jts+1) =a_rv(i,k,jts+1) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[7]

   IF( (config_flags%open_xe) .and. (ite == ide) ) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   gwalls=0.5*(ru(ite-1,k,j) +ru(ite,k,j))
   ub =max(gwalls, 0.)
   a_Tmpv7 =a_tendency(i_end,k,j)
   a_tendency(i_end,k,j) =0.0
   a_tendency(i_end,k,j) =a_tendency(i_end,k,j) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdx*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(i_end,k,j) =a_field(i_end,k,j) +(ru(ite,k,j) -ru(ite-1,k,j))*a_Tmpv4
   a_Tmpv3 =field(i_end,k,j)*a_Tmpv4
   a_ru(ite,k,j) =a_ru(ite,k,j) +a_Tmpv3
   a_ru(ite-1,k,j) =a_ru(ite-1,k,j) -a_Tmpv3
   a_ub =a_ub +(field_old(i_end,k,j) -field_old(i_end-1,k,j))*a_Tmpv2
   a_Tmpv1 =ub*a_Tmpv2
   a_field_old(i_end,k,j) =a_field_old(i_end,k,j) +a_Tmpv1
   a_field_old(i_end-1,k,j) =a_field_old(i_end-1,k,j) -a_Tmpv1

   a_Tmpv2 = (1.0 +(1.0)*sign(1.0, gwalls-0.))*0.5*a_ub
   a_ub =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_ru(ite-1,k,j) =a_ru(ite-1,k,j) +a_Tmpv1
   a_ru(ite,k,j) =a_ru(ite,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[5]

   IF( (config_flags%open_xs) .and. (its == ids) ) THEN

   DO j =j_end, j_start, -1
   DO k =ktf, kts, -1
   gwalls =0.5*(ru(its,k,j) +ru(its+1,k,j))
   ub =min(gwalls, 0.)
   a_Tmpv7 =a_tendency(its,k,j)
   a_tendency(its,k,j) =0.0
   a_tendency(its,k,j) =a_tendency(its,k,j) +a_Tmpv7
   a_Tmpv6 =-a_Tmpv7
   a_Tmpv5 =rdx*a_Tmpv6
   a_Tmpv2 =a_Tmpv5
   a_Tmpv4 =a_Tmpv5
   a_field(its,k,j) =a_field(its,k,j) +(ru(its+1,k,j) -ru(its,k,j))*a_Tmpv4
   a_Tmpv3 =field(its,k,j)*a_Tmpv4
   a_ru(its+1,k,j) =a_ru(its+1,k,j) +a_Tmpv3
   a_ru(its,k,j) =a_ru(its,k,j) -a_Tmpv3
   a_ub =a_ub +(field_old(its+1,k,j) -field_old(its,k,j))*a_Tmpv2
   a_Tmpv1 =ub*a_Tmpv2
   a_field_old(its+1,k,j) =a_field_old(its+1,k,j) +a_Tmpv1
   a_field_old(its,k,j) =a_field_old(its,k,j) -a_Tmpv1

   a_Tmpv2 = (1.0 -(1.0)*sign(1.0, gwalls -0.))*0.5*a_ub
   a_ub =0.0
   a_Tmpv1 =0.5*a_Tmpv2
   a_ru(its,k,j) =a_ru(its,k,j) +a_Tmpv1
   a_ru(its+1,k,j) =a_ru(its+1,k,j) +a_Tmpv1
   ENDDO
   ENDDO

   ENDIF

!LPB[3]

   IF( horz_order == 5 ) THEN
   ktf=MIN(kte,kde-1)

   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   i_start_f = i_start
   i_end_f   = i_end+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1
   IF(degrade_ys) j_start = MAX(jts-1,jds)
   IF(degrade_ye) j_end   = MIN(jte+1,jde-1)
   IF(degrade_xs) then
     i_start = MAX(ids+1,its-1)
     i_start_f = ids+3
   ENDIF
   IF(degrade_xe) then
     i_end = MIN(ide-2,ite+1)
     i_end_f = ide-3
   ENDIF

   DO j =j_end, j_start, -1

   IF( degrade_xe ) THEN

   DO i =i_end+1, i_end_f+1, -1

   IF( i == ide-2 ) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv716(k,j)
   qmin(i,k,j) = Tmpv717(k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1

   ELSE

   qmax(i-1,k,j) = Tmpv718(k,j)
   qmin(i-1,k,j) = Tmpv719(k,j)

   a_Tmpv1 =a_qmin(i-1,k,j)
   a_qmin(i-1,k,j) =0.0
   a_qmin(i-1,k,j) =a_qmin(i-1,k,j)  +(1.0 -sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i-1,k,j)
   a_qmax(i-1,k,j) =0.0
   a_qmax(i-1,k,j) =a_qmax(i-1,k,j)  +(1.0 +sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   END IF

   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_fqx(i,k,j)
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0
   ENDDO

   ENDIF

   IF( i == ide-1 ) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv712(k,j)
   qmin(i,k,j) = Tmpv713(k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1

   else

   qmax(i-1,k,j) = Tmpv714(k,j)
   qmin(i-1,k,j) = Tmpv715(k,j)

   a_Tmpv1 =a_qmin(i-1,k,j)
   a_qmin(i-1,k,j) =0.0
   a_qmin(i-1,k,j) =a_qmin(i-1,k,j)  +(1.0 -sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i-1,k,j)
   a_qmax(i-1,k,j) =0.0
   a_qmax(i-1,k,j) =a_qmax(i-1,k,j)  +(1.0 +sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_fqx(i,k,j)
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*(field(i,k,j) +field(i-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv2 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0
   ENDDO

   ENDIF
   ENDDO

   ENDIF

   IF( degrade_xs ) THEN

   DO i =i_start_f-1, i_start, -1

   IF(i == ids+2) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv708(k,j)
   qmin(i,k,j) = Tmpv709(k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1

   else

   qmax(i-1,k,j) = Tmpv710(k,j)
   qmin(i-1,k,j) = Tmpv711(k,j)

   a_Tmpv1 =a_qmin(i-1,k,j)
   a_qmin(i-1,k,j) =0.0
   a_qmin(i-1,k,j) =a_qmin(i-1,k,j)  +(1.0 -sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i-1,k,j)
   a_qmax(i-1,k,j) =0.0
   a_qmax(i-1,k,j) =a_qmax(i-1,k,j)  +(1.0 +sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_fqx(i,k,j)
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +flux3(field(i-2,k,j),field(i-1,k,j),field(i,k,j),field(i+1,k,j),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j),0.0,field(i,k,j)  &
   ,0.0,field(i+1,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux3(field(i-2,k,j),0.0,field(i-1,k,  &
   j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux3(field(i-2,k,j),1.0,field(i-1,k,  &
   j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0
   ENDDO

   ENDIF

   IF(i == ids+1) THEN

   DO k =ktf, kts, -1
   vel =ru(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv704(k,j)
   qmin(i,k,j) = Tmpv705(k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1

   else

   qmax(i-1,k,j) = Tmpv706(k,j)
   qmin(i-1,k,j) = Tmpv707(k,j)

   a_Tmpv1 =a_qmin(i-1,k,j)
   a_qmin(i-1,k,j) =0.0
   a_qmin(i-1,k,j) =a_qmin(i-1,k,j)  +(1.0 -sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i-1,k,j)
   a_qmax(i-1,k,j) =0.0
   a_qmax(i-1,k,j) =a_qmax(i-1,k,j)  +(1.0 +sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_fqx(i,k,j)
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_ru(i,k,j) =a_ru(i,k,j) +0.5*(field(i,k,j)+field(i-1,k,j))*a_Tmpv2
   a_Tmpv1 =0.5*(ru(i,k,j))*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +a_Tmpv1
   a_Tmpv2 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0
   ENDDO

   ENDIF
   ENDDO

   ENDIF

   DO k =ktf, kts, -1
   DO i =i_end_f, i_start_f, -1
   vel =ru(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv700(i,k,j)
   qmin(i,k,j) = Tmpv701(i,k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i-1,k,j)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i-1,k,j)))*0.5*1.0*a_Tmpv1

   else

   qmax(i-1,k,j) = Tmpv702(i-1,k,j)
   qmin(i-1,k,j) = Tmpv703(i-1,k,j)

   a_Tmpv1 =a_qmin(i-1,k,j)
   a_qmin(i-1,k,j) =0.0
   a_qmin(i-1,k,j) =a_qmin(i-1,k,j)  +(1.0 -sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i-1,k,j)
   a_qmax(i-1,k,j) =0.0
   a_qmax(i-1,k,j) =a_qmax(i-1,k,j)  +(1.0 +sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i-1,k,j)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqxl(i,k,j) =a_fqxl(i,k,j) -a_fqx(i,k,j)
   a_Tmpv2 =a_fqx(i,k,j)
   a_fqx(i,k,j) =0.0
   a_vel =a_vel +flux5(field(i-3,k,j),field(i-2,k,j),field(i-1,k,j),field(i,k,j)  &
   ,field(i+1,k,j),field(i+2,k,j),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,j),0.0,field(i-1,k,j)  &
   ,0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j),0.0,vel,1.0)*a_Tmpv1
   a_field(i+2,k,j) =a_field(i+2,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i+1,k,j) =a_field(i+1,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),1.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,j)  &
   ,0.0,field(i-1,k,j),0.0,field(i,k,j),1.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-1,k,j) =a_field(i-1,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),1.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-2,k,j) =a_field(i-2,k,j) +Diff_flux5(field(i-3,k,j),0.0,field(i-2,k,  &
   j),1.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i-3,k,j) =a_field(i-3,k,j) +Diff_flux5(field(i-3,k,j),1.0,field(i-2,k,  &
   j),0.0,field(i-1,k,j),0.0,field(i,k,j),0.0,field(i+1,k,j),0.0,field(i+2,k,j)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqxl(i,k,j)
   a_fqxl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i-1,k,j),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i-1,k,j),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i-1,k,j) =a_field_old(i-1,k,j) +Diff_flux_upwind(field_old(i-1,k,j)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_ru(i,k,j) =a_ru(i,k,j) +a_vel
   a_vel =0.0
   ENDDO
   ENDDO
   ENDDO

   ktf=MIN(kte,kde-1)

   i_start = its-1
   i_end   = MIN(ite,ide-1)+1
   j_start = jts-1
   j_end   = MIN(jte,jde-1)+1
   j_start_f = j_start
   j_end_f   = j_end+1
   IF(degrade_xs) i_start = MAX(its-1,ids)
   IF(degrade_xe) i_end   = MIN(ite+1,ide-1)
   IF(degrade_ys) then
     j_start = MAX(jts-1,jds+1)
     j_start_f = jds+3
   ENDIF
   IF(degrade_ye) then
     j_end = MIN(jte+1,jde-2)
     j_end_f = jde-3
   ENDIF

   DO j =j_end+1, j_start, -1

   IF( (j >= j_start_f ) .and. (j <= j_end_f) ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv600(i,k,j)
   qmin(i,k,j) = Tmpv601(i,k,j)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k,j-1) = Tmpv602(i,k,j-1)
   qmin(i,k,j-1) = Tmpv603(i,k,j-1)

   a_Tmpv1 =a_qmin(i,k,j-1)
   a_qmin(i,k,j-1) =0.0
   a_qmin(i,k,j-1) =a_qmin(i,k,j-1)  +(1.0 -sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k,j-1)
   a_qmax(i,k,j-1) =0.0
   a_qmax(i,k,j-1) =a_qmax(i,k,j-1)  +(1.0 +sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_fqy(i,k,j)
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +flux5(field(i,k,j-3),field(i,k,j-2),field(i,k,j-1),field(i,k,j)  &
   ,field(i,k,j+1),field(i,k,j+2),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+2) =a_field(i,k,j+2) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-2)  &
   ,0.0,field(i,k,j-1),0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux5(field(i,k,j-3),0.0,field(i,k,j-  &
   2),1.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-3) =a_field(i,k,j-3) +Diff_flux5(field(i,k,j-3),1.0,field(i,k,j-  &
   2),0.0,field(i,k,j-1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,field(i,k,j+2)  &
   ,0.0,vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k,j-1),field_old(i,k,j),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,vel,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,vel,0.0)*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,vel,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv604(i,k)
   qmin(i,k,j) = Tmpv605(i,k)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k,j-1) = Tmpv606(i,k)
   qmin(i,k,j-1) = Tmpv607(i,k)

   a_Tmpv1 =a_qmin(i,k,j-1)
   a_qmin(i,k,j-1) =0.0
   a_qmin(i,k,j-1) =a_qmin(i,k,j-1)  +(1.0 -sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k,j-1)
   a_qmax(i,k,j-1) =0.0
   a_qmax(i,k,j-1) =a_qmax(i,k,j-1)  +(1.0 +sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_fqy(i,k,j)
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv2 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jds+2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv608(i,k)
   qmin(i,k,j) = Tmpv609(i,k)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k,j-1) = Tmpv6010(i,k)
   qmin(i,k,j-1) = Tmpv6011(i,k)

   a_Tmpv1 =a_qmin(i,k,j-1)
   a_qmin(i,k,j-1) =0.0
   a_qmin(i,k,j-1) =a_qmin(i,k,j-1)  +(1.0 -sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k,j-1)
   a_qmax(i,k,j-1) =0.0
   a_qmax(i,k,j-1) =a_qmax(i,k,j-1)  +(1.0 +sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_fqy(i,k,j)
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0
   ENDDO
   ENDDO

   ELSE IF( j == jde-1 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv6012(i,k)
   qmin(i,k,j) = Tmpv6013(i,k)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k,j-1) = Tmpv6014(i,k)
   qmin(i,k,j-1) = Tmpv6015(i,k)

   a_Tmpv1 =a_qmin(i,k,j-1)
   a_qmin(i,k,j-1) =0.0
   a_qmin(i,k,j-1) =a_qmin(i,k,j-1)  +(1.0 -sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k,j-1)
   a_qmax(i,k,j-1) =0.0
   a_qmax(i,k,j-1) =a_qmax(i,k,j-1)  +(1.0 +sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_fqy(i,k,j)
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_rv(i,k,j) =a_rv(i,k,j) +0.5*(field(i,k,j) +field(i,k,j-1))*a_Tmpv2
   a_Tmpv1 =0.5*rv(i,k,j)*a_Tmpv2
   a_field(i,k,j) =a_field(i,k,j) +a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +a_Tmpv1
   a_Tmpv2 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0

   ENDDO
   ENDDO

   ELSE IF( j == jde-2 ) THEN

   DO k =ktf, kts, -1
   DO i =i_end, i_start, -1
   vel =rv(i,k,j)
   cr =vel

   IF(cr.gt. 0) THEN
   qmax(i,k,j) = Tmpv6016(i,k)
   qmin(i,k,j) = Tmpv6017(i,k)

   a_Tmpv1 =a_qmax(i,k,j)
   a_qmax(i,k,j) =0.0
   a_qmax(i,k,j) =a_qmax(i,k,j)  +(1.0 +sign(1.0, qmax(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 -sign(1.0, qmax(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmin(i,k,j)
   a_qmin(i,k,j) =0.0
   a_qmin(i,k,j) =a_qmin(i,k,j)  +(1.0 -sign(1.0, qmin(i,k,j) -field_old(i,k,j-1)  &
   ))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1)  +(1.0 +sign(1.0, qmin(i,k,j)  &
    -field_old(i,k,j-1)))*0.5*1.0*a_Tmpv1

   else

   qmax(i,k,j-1) = Tmpv6018(i,k)
   qmin(i,k,j-1) = Tmpv6019(i,k)

   a_Tmpv1 =a_qmin(i,k,j-1)
   a_qmin(i,k,j-1) =0.0
   a_qmin(i,k,j-1) =a_qmin(i,k,j-1)  +(1.0 -sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 +sign(1.0, qmin(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_Tmpv1 =a_qmax(i,k,j-1)
   a_qmax(i,k,j-1) =0.0
   a_qmax(i,k,j-1) =a_qmax(i,k,j-1)  +(1.0 +sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j)  +(1.0 -sign(1.0, qmax(i,k,j-1)  &
    -field_old(i,k,j)))*0.5*1.0*a_Tmpv1

   end IF

   a_fqyl(i,k,j) =a_fqyl(i,k,j) -a_fqy(i,k,j)
   a_Tmpv2 =a_fqy(i,k,j)
   a_fqy(i,k,j) =0.0
   a_vel =a_vel +flux3(field(i,k,j-2),field(i,k,j-1),field(i,k,j),field(i,k,j+1),vel)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_vel =a_vel +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1),0.0,field(i,k,j)  &
   ,0.0,field(i,k,j+1),0.0,vel,1.0)*a_Tmpv1
   a_field(i,k,j+1) =a_field(i,k,j+1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),1.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j) =a_field(i,k,j) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-1)  &
   ,0.0,field(i,k,j),1.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-1) =a_field(i,k,j-1) +Diff_flux3(field(i,k,j-2),0.0,field(i,k,j-  &
   1),1.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1
   a_field(i,k,j-2) =a_field(i,k,j-2) +Diff_flux3(field(i,k,j-2),1.0,field(i,k,j-  &
   1),0.0,field(i,k,j),0.0,field(i,k,j+1),0.0,vel,0.0)*a_Tmpv1

   a_Tmpv2 =a_fqyl(i,k,j)
   a_fqyl(i,k,j) =0.0
   a_vel =a_vel +flux_upwind(field_old(i,k,j-1),field_old(i,k,j),cr)*a_Tmpv2
   a_Tmpv1 =vel*a_Tmpv2
   a_cr =a_cr +Diff_flux_upwind(field_old(i,k,j-1),0.0,field_old(i,k,j)  &
   ,0.0,cr,1.0)*a_Tmpv1
   a_field_old(i,k,j) =a_field_old(i,k,j) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,0.0,field_old(i,k,j),1.0,cr,0.0)*a_Tmpv1
   a_field_old(i,k,j-1) =a_field_old(i,k,j-1) +Diff_flux_upwind(field_old(i,k,j-1)  &
   ,1.0,field_old(i,k,j),0.0,cr,0.0)*a_Tmpv1

   a_vel =a_vel +a_cr
   a_cr =0.0

   a_rv(i,k,j) =a_rv(i,k,j) +a_vel
   a_vel =0.0
   ENDDO
   ENDDO

   ENDIF
   ENDDO

   ENDIF

!LPB[1]

   DO j =jte+2, jts-2, -1
   DO k =kte, kts, -1
   DO i =ite+2, its-2, -1
   a_field_old(i,k,j) =a_field_old(i,k,j) +a_qmax(i,k,j)
   a_field_old(i,k,j) =a_field_old(i,k,j) +a_qmin(i,k,j)
   ENDDO
   ENDDO
   ENDDO

   END SUBROUTINE a_advect_scalar_mono

END MODULE a_module_advect_em

