parameters:
  DOMAINS: [d01, d02]

jobs:
- job: wats_plots
  displayName: 'WATS plots'

  timeoutInMinutes: 0
  
  pool:
    vmImage: ubuntu-16.04
  
  dependsOn:
  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        - ${{ each BUILD_SYSTEM in parameters.BUILD_SYSTEMS }}:
          # For Windows, since there is no Make-based build, skip that combination.
          - ${{ if not(and(eq(OS_NAME, 'Windows'), eq(BUILD_SYSTEM, 'Make'))) }}:
            - ${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}

  variables:
    ${{ insert }}: ${{ parameters.vars }}

  steps:
  - bash: bash .ci/unix/use-conda.sh
    displayName: Enable Conda
  
  - bash: |
      set -ex
      git clone --depth=1 --branch=$WATS_BRANCH https://github.com/$WATS_REPO.git wats
      conda env update -n base -f wats/environment.yml
    displayName: Install WATS
  
  # Plot: Linux/Make/Debug/serial against all others

  - task: DownloadBuildArtifacts@0
    displayName: Retrieve reference Linux/Make/Debug/serial WATS outputs
    inputs:
      downloadPath: wats_outputs
      downloadType: specific
      itemPattern: 'wats_Linux_Make_Debug_serial/**'
  
  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        - ${{ each BUILD_SYSTEM in parameters.BUILD_SYSTEMS }}:
          # For Windows, since there is no Make-based build, skip that combination.
          # Also, skip the reference combination.
          - ${{ if not(or(and(eq(OS_NAME, 'Windows'), eq(BUILD_SYSTEM, 'Make')), and(eq(OS_NAME, 'Linux'), eq(BUILD_SYSTEM, 'Make'), eq(MODE, 'serial'), eq(BUILD_TYPE, 'Debug')))) }}:

            - task: DownloadBuildArtifacts@0
              displayName: Retrieve trial ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs
              inputs:
                downloadPath: wats_outputs
                downloadType: specific
                itemPattern: 'wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}/**'
            
            - ${{ each DOMAIN in parameters.DOMAINS }}:
              - script: |
                  set -ex
                  O=wats_outputs
                  W="python wats/wats/plots.py compute --stats-dir wats_stats_single_ref/${{ DOMAIN }} --filter ${{ DOMAIN }} --append"
                  $W $O/wats_Linux_Make_Debug_serial $O/wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}
                displayName: 'Run WATS: compute plot stats Linux/Make/Debug/serial vs ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} for domain ${{ DOMAIN }}'

            - script: |
                rm -rf wats_outputs/wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}
              displayName: Remove trial ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs 

  - script: |
      rm -rf wats_outputs/wats_Linux_Make_Debug_serial
    displayName: Remove reference Linux/Make/Debug/serial WATS outputs 

  - task: PublishBuildArtifacts@1
    displayName: Store WATS plot stats (single reference)
    inputs:
      pathtoPublish: wats_stats_single_ref
      artifactName: wats_stats_single_ref

  - ${{ each DOMAIN in parameters.DOMAINS }}:
    - script: |
        python wats/wats/plots.py plot --stats-dir wats_stats_single_ref/${{ DOMAIN }} --plots-dir wats_plots_single_ref/${{ DOMAIN }}
      displayName: 'Run WATS: create plots (single reference) for domain ${{ DOMAIN }}'
    - ${{ each OS_NAME in parameters.OS_NAMES }}:
      - script: |
          python wats/wats/plots.py plot --stats-dir wats_stats_single_ref/${{ DOMAIN }} --plots-dir wats_plots_single_ref/${{ DOMAIN }}/${{ OS_NAME }} --filter ${{ OS_NAME }}
        displayName: 'Run WATS: create plots (single reference) for domain ${{ DOMAIN }} - ${{ OS_NAME }}'
  
  - task: PublishBuildArtifacts@1
    displayName: Store WATS plots (single reference)
    inputs:
      pathtoPublish: wats_plots_single_ref
      artifactName: wats_plots_single_ref

  # Plot: Make vs CMake for same configuration/environment

  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    # For Windows, since there is no Make-based reference, skip.
    - ${{ if not(eq(OS_NAME, 'Windows')) }}:
      - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
        - ${{ each MODE in parameters.MODES }}:

          - task: DownloadBuildArtifacts@0
            displayName: Retrieve reference and trial ${{ OS_NAME }}/{Make,CMake}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs
            inputs:
              downloadPath: wats_outputs
              downloadType: specific
              itemPattern: 'wats_${{ OS_NAME }}_*_${{ BUILD_TYPE }}_${{ MODE }}/**'
          
          - ${{ each DOMAIN in parameters.DOMAINS }}:
            - script: |
                set -ex
                O=wats_outputs
                W="python wats/wats/plots.py compute --stats-dir wats_stats_make_vs_cmake/${{ DOMAIN }} --filter ${{ DOMAIN }} --append"
                $W $O/wats_${{ OS_NAME }}_Make_${{ BUILD_TYPE }}_${{ MODE }} $O/wats_${{ OS_NAME }}_CMake_${{ BUILD_TYPE }}_${{ MODE }}
              displayName: 'Run WATS: compute plot stats ${{ OS_NAME }}/Make/${{ BUILD_TYPE }}/${{ MODE }} vs ${{ OS_NAME }}/CMake/${{ BUILD_TYPE }}/${{ MODE }} for domain ${{ DOMAIN }}'
                    
          - script: |
              rm -rf wats_outputs/wats_${{ OS_NAME }}_*_${{ BUILD_TYPE }}_${{ MODE }}
            displayName: Remove reference and trial ${{ OS_NAME }}/{Make,CMake}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs 

  - task: PublishBuildArtifacts@1
    displayName: Store WATS plot stats (Make vs CMake)
    inputs:
      pathtoPublish: wats_stats_make_vs_cmake
      artifactName: wats_stats_make_vs_cmake

  - ${{ each DOMAIN in parameters.DOMAINS }}:
    - script: |
        python wats/wats/plots.py plot --stats-dir wats_stats_make_vs_cmake/${{ DOMAIN }} --plots-dir wats_plots_make_vs_cmake/${{ DOMAIN }}
      displayName: 'Run WATS: create plots (Make vs CMake) for domain ${{ DOMAIN }}'
    
  - task: PublishBuildArtifacts@1
    displayName: Store WATS plots (Make vs CMake)
    inputs:
      pathtoPublish: wats_plots_make_vs_cmake
      artifactName: wats_plots_make_vs_cmake
