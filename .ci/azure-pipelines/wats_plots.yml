# WRF-CMake (https://github.com/WRF-CMake/wrf).
# Copyright 2019 M. Riechert and D. Meyer. Licensed under the MIT License.

parameters:
  DOMAINS: [d01, d02]
  TIMES: [0, 6]

jobs:
- job: wats_plots
  displayName: 'WATS plots'

  timeoutInMinutes: 0
  
  pool:
    vmImage: ubuntu-latest
  
  dependsOn:
  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        - ${{ each BUILD_SYSTEM in parameters.BUILD_SYSTEMS }}:
          # For Windows, since there is no Make-based build, skip that combination.
          - ${{ if not(and(eq(OS_NAME, 'Windows'), eq(BUILD_SYSTEM, 'Make'))) }}:
            - ${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}

  variables:
    ${{ insert }}: ${{ parameters.vars }}

  steps:
  - bash: .ci/unix/use-conda.sh
    displayName: Enable Conda
  
  - bash: .ci/unix/install-wats.sh
    displayName: Install WATS
  
  # Plot: Ubuntu/Make/Debug/serial against all others

  - task: DownloadBuildArtifacts@0
    displayName: Retrieve reference Ubuntu/Make/Debug/serial WATS outputs
    inputs:
      downloadPath: wats_outputs
      downloadType: specific
      itemPattern: 'wats_Ubuntu_Make_Debug_serial/**'
  
  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        - ${{ each BUILD_SYSTEM in parameters.BUILD_SYSTEMS }}:
          # For Windows, since there is no Make-based build, skip that combination.
          # Also, skip the reference combination.
          - ${{ if not(or(and(eq(OS_NAME, 'Windows'), eq(BUILD_SYSTEM, 'Make')), and(eq(OS_NAME, 'Ubuntu'), eq(BUILD_SYSTEM, 'Make'), eq(MODE, 'serial'), eq(BUILD_TYPE, 'Debug')))) }}:

            - task: DownloadBuildArtifacts@0
              displayName: Retrieve trial ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs
              inputs:
                downloadPath: wats_outputs
                downloadType: specific
                itemPattern: 'wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}/**'
            
            - ${{ each DOMAIN in parameters.DOMAINS }}:
              - ${{ each TIME in parameters.TIMES }}:
                - script: |
                    set -ex
                    O=wats_outputs
                    W="python wats/wats/plots.py compute --stats-dir wats_stats/${{ DOMAIN }}/T${{ TIME }} --filter ${{ DOMAIN }} --time-idx ${{ TIME }} --append"
                    $W $O/wats_Ubuntu_Make_Debug_serial $O/wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}
                  displayName: 'Run WATS: compute plot stats Ubuntu/Make/Debug/serial vs ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} for domain ${{ DOMAIN }} - T${{ TIME }}'
                
            - script: |
                rm -rf wats_outputs/wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}
              displayName: Remove trial ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs 

  - script: |
      rm -rf wats_outputs/wats_Ubuntu_Make_Debug_serial
    displayName: Remove reference Ubuntu/Make/Debug/serial WATS outputs 

  - ${{ each DOMAIN in parameters.DOMAINS }}:   
    - ${{ each TIME in parameters.TIMES }}:
      - script: |
          python wats/wats/plots.py plot --stats-dir wats_stats/${{ DOMAIN }}/T${{ TIME }} --plots-dir wats_plots/single_ref/${{ DOMAIN }}/T${{ TIME }}
        displayName: 'Run WATS: create Ubuntu/Make/Debug/serial reference plots for domain ${{ DOMAIN }} - T${{ TIME }}'

  - script: |
      rm -rf wats_stats/
    displayName: Remove WATS stats files
  
  # Plot: CMake vs Make

  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        # For Windows, since there is no Make-based build, skip that combination.
        - ${{ if not(eq(OS_NAME, 'Windows')) }}:

          - task: DownloadBuildArtifacts@0
            displayName: Retrieve ${{ OS_NAME }}/{Make,CMake}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs
            inputs:
              downloadPath: wats_outputs
              downloadType: specific
              itemPattern: 'wats_${{ OS_NAME }}_*_${{ BUILD_TYPE }}_${{ MODE }}/**'

          - ${{ each DOMAIN in parameters.DOMAINS }}:
            - ${{ each TIME in parameters.TIMES }}:
              - script: |
                  set -ex
                  O=wats_outputs
                  W="python wats/wats/plots.py compute --stats-dir wats_stats/${{ DOMAIN }}/T${{ TIME }} --filter ${{ DOMAIN }} --time-idx ${{ TIME }} --append"
                  $W $O/wats_${{ OS_NAME }}_Make_${{ BUILD_TYPE }}_${{ MODE }} $O/wats_${{ OS_NAME }}_CMake_${{ BUILD_TYPE }}_${{ MODE }}
                displayName: 'Run WATS: compute plot stats ${{ OS_NAME }}/Make/${{ BUILD_TYPE }}/${{ MODE }} vs ${{ OS_NAME }}/CMake/${{ BUILD_TYPE }}/${{ MODE }} for domain ${{ DOMAIN }} - T${{ TIME }}'

          - script: |
              rm -rf wats_outputs/wats_${{ OS_NAME }}_*_${{ BUILD_TYPE }}_${{ MODE }}
            displayName: Remove ${{ OS_NAME }}/{Make,CMake}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs 

  - ${{ each DOMAIN in parameters.DOMAINS }}:   
    - ${{ each TIME in parameters.TIMES }}:
      - script: |
          python wats/wats/plots.py plot --stats-dir wats_stats/${{ DOMAIN }}/T${{ TIME }} --plots-dir wats_plots/make_cmake/${{ DOMAIN }}/T${{ TIME }}
        displayName: 'Run WATS: create Make vs CMake plots for domain ${{ DOMAIN }} - T${{ TIME }}'

  - task: PublishBuildArtifacts@1
    displayName: Store WATS plots
    inputs:
      pathtoPublish: wats_plots
      artifactName: wats_plots
