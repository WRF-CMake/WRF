jobs:
- job: wats_plots
  displayName: 'WATS plots'
  
  pool:
    vmImage: ubuntu-16.04
  
  dependsOn:
  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        - ${{ each BUILD_SYSTEM in parameters.BUILD_SYSTEMS }}:
          # For Windows, since there is no Make-based build, skip that combination.
          - ${{ if not(and(eq(OS_NAME, 'Windows'), eq(BUILD_SYSTEM, 'Make'))) }}:
            - ${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}

  variables:
    ${{ insert }}: ${{ parameters.vars }}

  steps:
  - bash: bash .ci/unix/use-conda.sh
    displayName: Enable Conda
  
  - pwsh: |
      git clone --depth=1 --branch=$Env:WATS_BRANCH https://github.com/$Env:WATS_REPO.git wats
      conda env update -n base -f wats/environment.yml
    displayName: Install WATS
  
  - task: DownloadBuildArtifacts@0
    displayName: Retrieve reference WATS outputs
    inputs:
      downloadPath: wats_outputs
      downloadType: specific
      itemPattern: 'wats_Linux_Make_Debug_serial/**'
  
  - ${{ each OS_NAME in parameters.OS_NAMES }}:
    - ${{ each BUILD_TYPE in parameters.BUILD_TYPES }}:
      - ${{ each MODE in parameters.MODES }}:
        - ${{ each BUILD_SYSTEM in parameters.BUILD_SYSTEMS }}:
          # For Windows, since there is no Make-based build, skip that combination.
          # Also, skip the reference combination.
          - ${{ if not(or(and(eq(OS_NAME, 'Windows'), eq(BUILD_SYSTEM, 'Make')), and(eq(OS_NAME, 'Linux'), eq(BUILD_SYSTEM, 'Make'), eq(MODE, 'serial'), eq(BUILD_TYPE, 'Debug')))) }}:

            - task: DownloadBuildArtifacts@0
              displayName: Retrieve trial ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs
              inputs:
                downloadPath: wats_outputs
                downloadType: specific
                itemPattern: 'wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}/**'
            
            - script: |
                cd wats_outputs
                find . -type f
              displayName: List WATS output files
            
            - script: |
                set -ex
                O=wats_outputs
                W="python wats/wats/plots.py compute --out-dir wats_stats"
                $W $O/wats_Linux_Make_Debug_serial $O/wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}
              displayName: 'Run WATS: compute plot stats'

            - script: |
                rm -rf wats_outputs/wats_${{ OS_NAME }}_${{ BUILD_SYSTEM }}_${{ BUILD_TYPE }}_${{ MODE }}
              displayName: Remove trial ${{ OS_NAME }}/${{ BUILD_SYSTEM }}/${{ BUILD_TYPE }}/${{ MODE }} WATS outputs 
  
  - script: |
      python wats/wats/plots.py plot --stats-dir wats_stats --out-dir wats_plots
    displayName: 'Run WATS: create plots'
  
  - task: PublishBuildArtifacts@1
    displayName: Store WATS plots
    inputs:
      pathtoPublish: wats_plots
      artifactName: wats_plots
