steps:
- script: |
    if [[ $OS_NAME == 'osx' ]]; then
      top -l 1 -s 0 | grep PhysMem
      system_profiler | grep Processor
      sysctl hw
      df -h
    else
      free -m
      lscpu
      df -h --total
    fi
  displayName: Dump VM specs

- script: printenv
  displayName: Dump environment variables

- script: .ci/azure/scripts/setup-dependencies.sh
  displayName: Install dependencies

- script: .ci/azure/scripts/install-wrf.sh
  displayName: Install WRF

# In Azure Pipeline builds, the repository folder is not named after the repository name.
# When building WPS in the Make variant, WPS looks for hard-coded folder names of WRF.
# To make WPS happy but also to avoid having to pass a different folder to the CMake config,
# we symlink the repository to the "WRF" folder.
- script: ln -sf `pwd` ../WRF
  displayName: Symlink repository as "WRF" for convenience

- script: |
    set -e
    cd ..
    git clone --depth=100 --no-single-branch https://github.com/$WPS_REPO.git WPS
    cd WPS
    git checkout $WPS_COMMIT
    .ci/azure/scripts/install-wps.sh
  displayName: Install WPS

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: |
    git clone --depth=1 --branch=$WATS_BRANCH https://github.com/$WATS_REPO.git wats
    pip install -r wats/requirements.txt
  displayName: Install WATS

- script: |
    if [[ $MODE == dm* ]]; then export MPI_FLAG=--mpi ; fi
    if [[ $BUILD_SYSTEM == cmake ]]; then dir_suffix=build/install ; fi
    python wats/wats/main.py run --mode $WATS_MODE --wrf-dir ./$dir_suffix --wps-dir ../WPS/$dir_suffix --work-dir wats_work $MPI_FLAG
  displayName: Run WATS

#- task: PublishPipelineArtifact@0
#  displayName: Publish binaries
#  condition: and(succeeded(), eq(variables.BUILD_SYSTEM, 'cmake'))
#  inputs:
#    artifactName: binaries_$(OS_NAME)_$(BUILD_SYSTEM)_$(BUILD_TYPE)_$(MODE)
#    targetPath: build/install/main
